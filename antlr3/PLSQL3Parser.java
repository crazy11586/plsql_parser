// $ANTLR 3.4 antlr3/PLSQL3.g 2011-12-29 21:17:21

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/*******************************************************************************

DESCRIPTION:
		Oracle PL/SQL Grammar for ANTLR v3, target language C#
AUTHOR:
		Andrey Kharitonkin (thikone@gmail.com)
DATE:
		02-Jan-2008
BASED ON:
		PLSQLGrammar.g for ANTLR v2
		Qazi Firdous Ahmed (qazif_ahmed@infosys.com) 
		Krupa Benhur (krupa_bg@infosys.com)
		Manojaba Banerjee (manojaba_banerjee@infosys.com)
		Infosys Technologies Ltd., Bangalore, India
		Sept 18, 2002
		This grammar is for PL/SQL.
COMMENT:
		The grammar has been mostly re-written for ANTLR v3,
		using Oracle 10g Release 2 documentation and ANTLR book.
		New SQL and PL/SQL expression rules, SQL statments
		SELECT, INSERT, UPDATE, DELETE are fully supported.
		Generated parser can parse most of valid PL/SQL and 
		it was tested with over 10 Mb of test source code.
		Let me know if something cannot be parsed by this grammar.
KNOWN ISSUES:
		At the moment only supports CREATE PACKAGE and PACKAGE BODY.
		Symbol table and gate predicates needed to distinguish
			between function call and variable usage.

It was fun learning ANTLR3 and creating this grammar, hope you enjoy it as well!

*******************************************************************************/
@SuppressWarnings({"all", "warnings", "unchecked"})
public class PLSQL3Parser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARROW", "ASSIGN", "ASTERISK", "AT_SIGN", "BULK_ROWCOUNT_ATTR", "CHARSET_ATTR", "COLON", "COMMA", "DIVIDE", "DOT", "DOUBLEDOT", "DOUBLEQUOTED_STRING", "DOUBLEVERTBAR", "EQ", "EXPONENT", "FOUND_ATTR", "GEQ", "GTH", "ID", "ISOPEN_ATTR", "LBRACK", "LEQ", "LLABEL", "LPAREN", "LTH", "MINUS", "ML_COMMENT", "N", "NOTFOUND_ATTR", "NOT_EQ", "NUMBER", "PERCENTAGE", "PLUS", "POINT", "QUOTE", "QUOTED_STRING", "RBRACK", "RLABEL", "ROWCOUNT_ATTR", "ROWTYPE_ATTR", "RPAREN", "SEMI", "SL_COMMENT", "TYPE_ATTR", "VERTBAR", "WS", "'ALL'", "'AND'", "'ANY'", "'AS'", "'ASC'", "'AT'", "'BEGIN'", "'BETWEEN'", "'BFILE'", "'BINARY_DOUBLE'", "'BINARY_FLOAT'", "'BINARY_INTEGER'", "'BLOB'", "'BOOLEAN'", "'BY'", "'CASE'", "'CHAR'", "'CHARACTER'", "'CLOB'", "'COMMENT'", "'COMMIT'", "'CONNECT'", "'CONSTANT'", "'CREATE'", "'DATE'", "'DEC'", "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DELETE'", "'DESC'", "'DISTINCT'", "'DOUBLE'", "'ELSE'", "'ELSIF'", "'END'", "'EXCEPTION'", "'EXCLUSIVE'", "'EXISTS'", "'FALSE'", "'FETCH'", "'FLOAT'", "'FOR'", "'FROM'", "'FUNCTION'", "'GOTO'", "'GROUP'", "'HAVING'", "'IF'", "'IN'", "'INDEX'", "'INSERT'", "'INT'", "'INTEGER'", "'INTERSECT'", "'INTO'", "'IS'", "'LIKE'", "'LOCK'", "'LONG'", "'LOOP'", "'MINUS'", "'MLSLABEL'", "'MODE'", "'NATIONAL'", "'NATURAL'", "'NCHAR'", "'NCLOB'", "'NOT'", "'NOWAIT'", "'NULL'", "'NUMBER'", "'NUMERIC'", "'NVARCHAR'", "'NVARCHAR2'", "'OF'", "'ON'", "'OR'", "'ORDER'", "'OUT'", "'PACKAGE'", "'PLS_INTEGER'", "'POSITIVE'", "'PRAGMA'", "'PRIOR'", "'PROCEDURE'", "'RAISE'", "'RAW'", "'REAL'", "'RECORD'", "'RETURN'", "'RETURNING'", "'ROLLBACK'", "'ROW'", "'ROWID'", "'ROWS'", "'SAVEPOINT'", "'SELECT'", "'SET'", "'SHARE'", "'SMALLINT'", "'SQL'", "'START'", "'TABLE'", "'THEN'", "'TO'", "'TRUE'", "'UNION'", "'UNIQUE'", "'UPDATE'", "'UROWID'", "'VALUES'", "'VARCHAR'", "'VARCHAR2'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'"
    };

    public static final int EOF=-1;
    public static final int T__50=50;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__59=59;
    public static final int T__60=60;
    public static final int T__61=61;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__73=73;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int T__79=79;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__84=84;
    public static final int T__85=85;
    public static final int T__86=86;
    public static final int T__87=87;
    public static final int T__88=88;
    public static final int T__89=89;
    public static final int T__90=90;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__95=95;
    public static final int T__96=96;
    public static final int T__97=97;
    public static final int T__98=98;
    public static final int T__99=99;
    public static final int T__100=100;
    public static final int T__101=101;
    public static final int T__102=102;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__110=110;
    public static final int T__111=111;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int ARROW=4;
    public static final int ASSIGN=5;
    public static final int ASTERISK=6;
    public static final int AT_SIGN=7;
    public static final int BULK_ROWCOUNT_ATTR=8;
    public static final int CHARSET_ATTR=9;
    public static final int COLON=10;
    public static final int COMMA=11;
    public static final int DIVIDE=12;
    public static final int DOT=13;
    public static final int DOUBLEDOT=14;
    public static final int DOUBLEQUOTED_STRING=15;
    public static final int DOUBLEVERTBAR=16;
    public static final int EQ=17;
    public static final int EXPONENT=18;
    public static final int FOUND_ATTR=19;
    public static final int GEQ=20;
    public static final int GTH=21;
    public static final int ID=22;
    public static final int ISOPEN_ATTR=23;
    public static final int LBRACK=24;
    public static final int LEQ=25;
    public static final int LLABEL=26;
    public static final int LPAREN=27;
    public static final int LTH=28;
    public static final int MINUS=29;
    public static final int ML_COMMENT=30;
    public static final int N=31;
    public static final int NOTFOUND_ATTR=32;
    public static final int NOT_EQ=33;
    public static final int NUMBER=34;
    public static final int PERCENTAGE=35;
    public static final int PLUS=36;
    public static final int POINT=37;
    public static final int QUOTE=38;
    public static final int QUOTED_STRING=39;
    public static final int RBRACK=40;
    public static final int RLABEL=41;
    public static final int ROWCOUNT_ATTR=42;
    public static final int ROWTYPE_ATTR=43;
    public static final int RPAREN=44;
    public static final int SEMI=45;
    public static final int SL_COMMENT=46;
    public static final int TYPE_ATTR=47;
    public static final int VERTBAR=48;
    public static final int WS=49;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public PLSQL3Parser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public PLSQL3Parser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[942+1];
         

    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return PLSQL3Parser.tokenNames; }
    public String getGrammarFileName() { return "antlr3/PLSQL3.g"; }


        private boolean is_sql = false;


    public static class start_rule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "start_rule"
    // antlr3/PLSQL3.g:47:1: start_rule : ( create_package )* EOF ;
    public final PLSQL3Parser.start_rule_return start_rule() throws RecognitionException {
        PLSQL3Parser.start_rule_return retval = new PLSQL3Parser.start_rule_return();
        retval.start = input.LT(1);

        int start_rule_StartIndex = input.index();

        Object root_0 = null;

        Token EOF2=null;
        PLSQL3Parser.create_package_return create_package1 =null;


        Object EOF2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // antlr3/PLSQL3.g:48:2: ( ( create_package )* EOF )
            // antlr3/PLSQL3.g:48:4: ( create_package )* EOF
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:48:4: ( create_package )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==73) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // antlr3/PLSQL3.g:48:5: create_package
            	    {
            	    pushFollow(FOLLOW_create_package_in_start_rule50);
            	    create_package1=create_package();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_package1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_start_rule54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOF2_tree = 
            (Object)adaptor.create(EOF2)
            ;
            adaptor.addChild(root_0, EOF2_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 1, start_rule_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "start_rule"


    public static class create_package_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create_package"
    // antlr3/PLSQL3.g:51:1: create_package : 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body ) ;
    public final PLSQL3Parser.create_package_return create_package() throws RecognitionException {
        PLSQL3Parser.create_package_return retval = new PLSQL3Parser.create_package_return();
        retval.start = input.LT(1);

        int create_package_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal3=null;
        Token string_literal4=null;
        PLSQL3Parser.keyREPLACE_return keyREPLACE5 =null;

        PLSQL3Parser.package_spec_return package_spec6 =null;

        PLSQL3Parser.package_body_return package_body7 =null;


        Object string_literal3_tree=null;
        Object string_literal4_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // antlr3/PLSQL3.g:52:2: ( 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body ) )
            // antlr3/PLSQL3.g:52:4: 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body )
            {
            root_0 = (Object)adaptor.nil();


            string_literal3=(Token)match(input,73,FOLLOW_73_in_create_package65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal3_tree = 
            (Object)adaptor.create(string_literal3)
            ;
            adaptor.addChild(root_0, string_literal3_tree);
            }

            // antlr3/PLSQL3.g:52:13: ( 'OR' keyREPLACE )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==127) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // antlr3/PLSQL3.g:52:15: 'OR' keyREPLACE
                    {
                    string_literal4=(Token)match(input,127,FOLLOW_127_in_create_package69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal4_tree = 
                    (Object)adaptor.create(string_literal4)
                    ;
                    adaptor.addChild(root_0, string_literal4_tree);
                    }

                    pushFollow(FOLLOW_keyREPLACE_in_create_package71);
                    keyREPLACE5=keyREPLACE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREPLACE5.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:53:3: ( package_spec | package_body )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==130) ) {
                int LA3_1 = input.LA(2);

                if ( (LA3_1==ID) ) {
                    int LA3_2 = input.LA(3);

                    if ( (LA3_2==DOT||LA3_2==53||LA3_2==106) ) {
                        alt3=1;
                    }
                    else if ( (LA3_2==DOUBLEQUOTED_STRING||LA3_2==ID||LA3_2==144) ) {
                        alt3=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 3, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA3_1==DOUBLEQUOTED_STRING||LA3_1==144) ) {
                    alt3=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // antlr3/PLSQL3.g:53:5: package_spec
                    {
                    pushFollow(FOLLOW_package_spec_in_create_package80);
                    package_spec6=package_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec6.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:53:20: package_body
                    {
                    pushFollow(FOLLOW_package_body_in_create_package84);
                    package_body7=package_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body7.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 2, create_package_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "create_package"


    public static class package_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_spec"
    // antlr3/PLSQL3.g:56:1: package_spec : keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMI ;
    public final PLSQL3Parser.package_spec_return package_spec() throws RecognitionException {
        PLSQL3Parser.package_spec_return retval = new PLSQL3Parser.package_spec_return();
        retval.start = input.LT(1);

        int package_spec_StartIndex = input.index();

        Object root_0 = null;

        Token set10=null;
        Token string_literal12=null;
        Token SEMI14=null;
        PLSQL3Parser.keyPACKAGE_return keyPACKAGE8 =null;

        PLSQL3Parser.package_name_return package_name9 =null;

        PLSQL3Parser.package_obj_spec_return package_obj_spec11 =null;

        PLSQL3Parser.package_name_return package_name13 =null;


        Object set10_tree=null;
        Object string_literal12_tree=null;
        Object SEMI14_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // antlr3/PLSQL3.g:57:2: ( keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMI )
            // antlr3/PLSQL3.g:57:4: keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyPACKAGE_in_package_spec98);
            keyPACKAGE8=keyPACKAGE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPACKAGE8.getTree());

            pushFollow(FOLLOW_package_name_in_package_spec100);
            package_name9=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name9.getTree());

            set10=(Token)input.LT(1);

            if ( input.LA(1)==53||input.LA(1)==106 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set10)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // antlr3/PLSQL3.g:58:3: ( package_obj_spec )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==DOUBLEQUOTED_STRING||LA4_0==ID||LA4_0==94||LA4_0==133||LA4_0==135) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // antlr3/PLSQL3.g:58:5: package_obj_spec
            	    {
            	    pushFollow(FOLLOW_package_obj_spec_in_package_spec117);
            	    package_obj_spec11=package_obj_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_obj_spec11.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            string_literal12=(Token)match(input,85,FOLLOW_85_in_package_spec124); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal12_tree = 
            (Object)adaptor.create(string_literal12)
            ;
            adaptor.addChild(root_0, string_literal12_tree);
            }

            // antlr3/PLSQL3.g:59:9: ( package_name )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==DOUBLEQUOTED_STRING||LA5_0==ID||LA5_0==144) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // antlr3/PLSQL3.g:59:10: package_name
                    {
                    pushFollow(FOLLOW_package_name_in_package_spec127);
                    package_name13=package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name13.getTree());

                    }
                    break;

            }


            SEMI14=(Token)match(input,SEMI,FOLLOW_SEMI_in_package_spec131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI14_tree = 
            (Object)adaptor.create(SEMI14)
            ;
            adaptor.addChild(root_0, SEMI14_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 3, package_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_spec"


    public static class package_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_body"
    // antlr3/PLSQL3.g:62:1: package_body : keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMI ;
    public final PLSQL3Parser.package_body_return package_body() throws RecognitionException {
        PLSQL3Parser.package_body_return retval = new PLSQL3Parser.package_body_return();
        retval.start = input.LT(1);

        int package_body_StartIndex = input.index();

        Object root_0 = null;

        Token set18=null;
        Token string_literal20=null;
        Token string_literal22=null;
        Token SEMI24=null;
        PLSQL3Parser.keyPACKAGE_return keyPACKAGE15 =null;

        PLSQL3Parser.keyBODY_return keyBODY16 =null;

        PLSQL3Parser.package_name_return package_name17 =null;

        PLSQL3Parser.package_obj_body_return package_obj_body19 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements21 =null;

        PLSQL3Parser.package_name_return package_name23 =null;


        Object set18_tree=null;
        Object string_literal20_tree=null;
        Object string_literal22_tree=null;
        Object SEMI24_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // antlr3/PLSQL3.g:63:2: ( keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMI )
            // antlr3/PLSQL3.g:63:4: keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyPACKAGE_in_package_body143);
            keyPACKAGE15=keyPACKAGE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPACKAGE15.getTree());

            // antlr3/PLSQL3.g:63:15: ( keyBODY )
            // antlr3/PLSQL3.g:63:17: keyBODY
            {
            pushFollow(FOLLOW_keyBODY_in_package_body147);
            keyBODY16=keyBODY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBODY16.getTree());

            }


            pushFollow(FOLLOW_package_name_in_package_body151);
            package_name17=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name17.getTree());

            set18=(Token)input.LT(1);

            if ( input.LA(1)==53||input.LA(1)==106 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set18)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // antlr3/PLSQL3.g:64:3: ( package_obj_body )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==DOUBLEQUOTED_STRING||LA6_0==ID||LA6_0==73||LA6_0==94||LA6_0==133||LA6_0==135) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // antlr3/PLSQL3.g:64:5: package_obj_body
            	    {
            	    pushFollow(FOLLOW_package_obj_body_in_package_body167);
            	    package_obj_body19=package_obj_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_obj_body19.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            // antlr3/PLSQL3.g:65:3: ( 'BEGIN' seq_of_statements )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==56) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // antlr3/PLSQL3.g:65:5: 'BEGIN' seq_of_statements
                    {
                    string_literal20=(Token)match(input,56,FOLLOW_56_in_package_body176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal20_tree = 
                    (Object)adaptor.create(string_literal20)
                    ;
                    adaptor.addChild(root_0, string_literal20_tree);
                    }

                    pushFollow(FOLLOW_seq_of_statements_in_package_body178);
                    seq_of_statements21=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements21.getTree());

                    }
                    break;

            }


            string_literal22=(Token)match(input,85,FOLLOW_85_in_package_body187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal22_tree = 
            (Object)adaptor.create(string_literal22)
            ;
            adaptor.addChild(root_0, string_literal22_tree);
            }

            // antlr3/PLSQL3.g:66:9: ( package_name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==DOUBLEQUOTED_STRING||LA8_0==ID||LA8_0==144) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // antlr3/PLSQL3.g:66:11: package_name
                    {
                    pushFollow(FOLLOW_package_name_in_package_body191);
                    package_name23=package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name23.getTree());

                    }
                    break;

            }


            SEMI24=(Token)match(input,SEMI,FOLLOW_SEMI_in_package_body196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI24_tree = 
            (Object)adaptor.create(SEMI24)
            ;
            adaptor.addChild(root_0, SEMI24_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 4, package_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_body"


    public static class package_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_name"
    // antlr3/PLSQL3.g:69:1: package_name : ( schema_name DOT )? identifier ;
    public final PLSQL3Parser.package_name_return package_name() throws RecognitionException {
        PLSQL3Parser.package_name_return retval = new PLSQL3Parser.package_name_return();
        retval.start = input.LT(1);

        int package_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT26=null;
        PLSQL3Parser.schema_name_return schema_name25 =null;

        PLSQL3Parser.identifier_return identifier27 =null;


        Object DOT26_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // antlr3/PLSQL3.g:70:2: ( ( schema_name DOT )? identifier )
            // antlr3/PLSQL3.g:70:4: ( schema_name DOT )? identifier
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:70:4: ( schema_name DOT )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==DOUBLEQUOTED_STRING||LA9_0==ID) ) {
                int LA9_1 = input.LA(2);

                if ( (LA9_1==DOT) ) {
                    alt9=1;
                }
            }
            else if ( (LA9_0==144) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // antlr3/PLSQL3.g:70:6: schema_name DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_package_name209);
                    schema_name25=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name25.getTree());

                    DOT26=(Token)match(input,DOT,FOLLOW_DOT_in_package_name211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT26_tree = 
                    (Object)adaptor.create(DOT26)
                    ;
                    adaptor.addChild(root_0, DOT26_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_package_name216);
            identifier27=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier27.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 5, package_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_name"


    public static class package_obj_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_obj_spec"
    // antlr3/PLSQL3.g:73:1: package_obj_spec : ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration );
    public final PLSQL3Parser.package_obj_spec_return package_obj_spec() throws RecognitionException {
        PLSQL3Parser.package_obj_spec_return retval = new PLSQL3Parser.package_obj_spec_return();
        retval.start = input.LT(1);

        int package_obj_spec_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.variable_declaration_return variable_declaration28 =null;

        PLSQL3Parser.type_declaration_return type_declaration29 =null;

        PLSQL3Parser.subtype_declaration_return subtype_declaration30 =null;

        PLSQL3Parser.record_declaration_return record_declaration31 =null;

        PLSQL3Parser.plsql_table_declaration_return plsql_table_declaration32 =null;

        PLSQL3Parser.varray_declaration_return varray_declaration33 =null;

        PLSQL3Parser.cursor_declaration_return cursor_declaration34 =null;

        PLSQL3Parser.cursor_spec_return cursor_spec35 =null;

        PLSQL3Parser.procedure_spec_return procedure_spec36 =null;

        PLSQL3Parser.function_spec_return function_spec37 =null;

        PLSQL3Parser.exception_declaration_return exception_declaration38 =null;

        PLSQL3Parser.pragma_declaration_return pragma_declaration39 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // antlr3/PLSQL3.g:74:2: ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration )
            int alt10=12;
            alt10 = dfa10.predict(input);
            switch (alt10) {
                case 1 :
                    // antlr3/PLSQL3.g:74:4: variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_in_package_obj_spec228);
                    variable_declaration28=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration28.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:75:4: type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_in_package_obj_spec234);
                    type_declaration29=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration29.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:76:4: subtype_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec239);
                    subtype_declaration30=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration30.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:77:4: record_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_record_declaration_in_package_obj_spec245);
                    record_declaration31=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration31.getTree());

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:78:4: plsql_table_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_spec251);
                    plsql_table_declaration32=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_declaration32.getTree());

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:79:4: varray_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_varray_declaration_in_package_obj_spec257);
                    varray_declaration33=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_declaration33.getTree());

                    }
                    break;
                case 7 :
                    // antlr3/PLSQL3.g:80:4: cursor_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec262);
                    cursor_declaration34=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration34.getTree());

                    }
                    break;
                case 8 :
                    // antlr3/PLSQL3.g:81:4: cursor_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_spec_in_package_obj_spec268);
                    cursor_spec35=cursor_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_spec35.getTree());

                    }
                    break;
                case 9 :
                    // antlr3/PLSQL3.g:82:4: procedure_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_procedure_spec_in_package_obj_spec274);
                    procedure_spec36=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec36.getTree());

                    }
                    break;
                case 10 :
                    // antlr3/PLSQL3.g:83:4: function_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_function_spec_in_package_obj_spec280);
                    function_spec37=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec37.getTree());

                    }
                    break;
                case 11 :
                    // antlr3/PLSQL3.g:84:4: exception_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_exception_declaration_in_package_obj_spec286);
                    exception_declaration38=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration38.getTree());

                    }
                    break;
                case 12 :
                    // antlr3/PLSQL3.g:85:4: pragma_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec292);
                    pragma_declaration39=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration39.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 6, package_obj_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_obj_spec"


    public static class variable_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration"
    // antlr3/PLSQL3.g:88:1: variable_declaration : variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? SEMI ;
    public final PLSQL3Parser.variable_declaration_return variable_declaration() throws RecognitionException {
        PLSQL3Parser.variable_declaration_return retval = new PLSQL3Parser.variable_declaration_return();
        retval.start = input.LT(1);

        int variable_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal41=null;
        Token string_literal43=null;
        Token string_literal44=null;
        Token set45=null;
        Token SEMI47=null;
        PLSQL3Parser.variable_name_return variable_name40 =null;

        PLSQL3Parser.type_spec_return type_spec42 =null;

        PLSQL3Parser.plsql_expression_return plsql_expression46 =null;


        Object string_literal41_tree=null;
        Object string_literal43_tree=null;
        Object string_literal44_tree=null;
        Object set45_tree=null;
        Object SEMI47_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // antlr3/PLSQL3.g:89:2: ( variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? SEMI )
            // antlr3/PLSQL3.g:89:4: variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_variable_name_in_variable_declaration303);
            variable_name40=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name40.getTree());

            // antlr3/PLSQL3.g:89:18: ( 'CONSTANT' )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==72) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // antlr3/PLSQL3.g:89:19: 'CONSTANT'
                    {
                    string_literal41=(Token)match(input,72,FOLLOW_72_in_variable_declaration306); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal41_tree = 
                    (Object)adaptor.create(string_literal41)
                    ;
                    adaptor.addChild(root_0, string_literal41_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_type_spec_in_variable_declaration312);
            type_spec42=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec42.getTree());

            // antlr3/PLSQL3.g:90:13: ( 'NOT' 'NULL' )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==118) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // antlr3/PLSQL3.g:90:14: 'NOT' 'NULL'
                    {
                    string_literal43=(Token)match(input,118,FOLLOW_118_in_variable_declaration315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal43_tree = 
                    (Object)adaptor.create(string_literal43)
                    ;
                    adaptor.addChild(root_0, string_literal43_tree);
                    }

                    string_literal44=(Token)match(input,120,FOLLOW_120_in_variable_declaration317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal44_tree = 
                    (Object)adaptor.create(string_literal44)
                    ;
                    adaptor.addChild(root_0, string_literal44_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:91:3: ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ASSIGN||LA13_0==78) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // antlr3/PLSQL3.g:91:5: ( ASSIGN | 'DEFAULT' ) plsql_expression
                    {
                    set45=(Token)input.LT(1);

                    if ( input.LA(1)==ASSIGN||input.LA(1)==78 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set45)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_plsql_expression_in_variable_declaration336);
                    plsql_expression46=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression46.getTree());

                    }
                    break;

            }


            SEMI47=(Token)match(input,SEMI,FOLLOW_SEMI_in_variable_declaration340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI47_tree = 
            (Object)adaptor.create(SEMI47)
            ;
            adaptor.addChild(root_0, SEMI47_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 7, variable_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // antlr3/PLSQL3.g:94:1: type_declaration : keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMI ;
    public final PLSQL3Parser.type_declaration_return type_declaration() throws RecognitionException {
        PLSQL3Parser.type_declaration_return retval = new PLSQL3Parser.type_declaration_return();
        retval.start = input.LT(1);

        int type_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal50=null;
        Token string_literal53=null;
        Token string_literal54=null;
        Token LPAREN55=null;
        Token RPAREN57=null;
        Token SEMI58=null;
        PLSQL3Parser.keyTYPE_return keyTYPE48 =null;

        PLSQL3Parser.type_spec_return type_spec49 =null;

        PLSQL3Parser.keyNEW_return keyNEW51 =null;

        PLSQL3Parser.type_spec_return type_spec52 =null;

        PLSQL3Parser.plsql_expressions_return plsql_expressions56 =null;


        Object string_literal50_tree=null;
        Object string_literal53_tree=null;
        Object string_literal54_tree=null;
        Object LPAREN55_tree=null;
        Object RPAREN57_tree=null;
        Object SEMI58_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // antlr3/PLSQL3.g:95:2: ( keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMI )
            // antlr3/PLSQL3.g:95:4: keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyTYPE_in_type_declaration353);
            keyTYPE48=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE48.getTree());

            pushFollow(FOLLOW_type_spec_in_type_declaration355);
            type_spec49=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec49.getTree());

            string_literal50=(Token)match(input,106,FOLLOW_106_in_type_declaration357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal50_tree = 
            (Object)adaptor.create(string_literal50)
            ;
            adaptor.addChild(root_0, string_literal50_tree);
            }

            // antlr3/PLSQL3.g:95:27: ( keyNEW )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==ID) ) {
                switch ( input.LA(2) ) {
                    case DOUBLEQUOTED_STRING:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 66:
                    case 67:
                    case 68:
                    case 74:
                    case 75:
                    case 76:
                    case 82:
                    case 91:
                    case 102:
                    case 103:
                    case 109:
                    case 112:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 131:
                    case 132:
                    case 137:
                    case 138:
                    case 144:
                    case 150:
                    case 160:
                    case 162:
                    case 163:
                        {
                        alt14=1;
                        }
                        break;
                    case ID:
                        {
                        int LA14_4 = input.LA(3);

                        if ( (LA14_4==AT_SIGN||LA14_4==DOT||LA14_4==ID||LA14_4==ROWTYPE_ATTR||LA14_4==SEMI||LA14_4==TYPE_ATTR||LA14_4==118||LA14_4==167) ) {
                            alt14=1;
                        }
                        else if ( (LA14_4==LPAREN) ) {
                            int LA14_6 = input.LA(4);

                            if ( (LA14_6==NUMBER) ) {
                                int LA14_8 = input.LA(5);

                                if ( (LA14_8==RPAREN) ) {
                                    int LA14_10 = input.LA(6);

                                    if ( (LA14_10==SEMI||LA14_10==118||LA14_10==167) ) {
                                        alt14=1;
                                    }
                                }
                            }
                        }
                        }
                        break;
                    case LPAREN:
                        {
                        int LA14_5 = input.LA(3);

                        if ( (LA14_5==NUMBER) ) {
                            int LA14_7 = input.LA(4);

                            if ( (LA14_7==RPAREN) ) {
                                int LA14_9 = input.LA(5);

                                if ( (((synpred27_PLSQL3()&&synpred27_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("NEW")))) ) {
                                    alt14=1;
                                }
                            }
                            else if ( (LA14_7==ASTERISK||LA14_7==BULK_ROWCOUNT_ATTR||(LA14_7 >= COMMA && LA14_7 <= DIVIDE)||(LA14_7 >= DOUBLEVERTBAR && LA14_7 <= GTH)||LA14_7==ISOPEN_ATTR||LA14_7==LEQ||(LA14_7 >= LTH && LA14_7 <= MINUS)||(LA14_7 >= NOTFOUND_ATTR && LA14_7 <= NOT_EQ)||LA14_7==PLUS||LA14_7==ROWCOUNT_ATTR||LA14_7==51||LA14_7==57||LA14_7==99||(LA14_7 >= 106 && LA14_7 <= 107)||LA14_7==118||LA14_7==127) ) {
                                alt14=1;
                            }
                        }
                        else if ( (LA14_5==DOUBLEQUOTED_STRING||LA14_5==ID||LA14_5==LPAREN||LA14_5==MINUS||LA14_5==PLUS||LA14_5==QUOTED_STRING||LA14_5==65||LA14_5==81||LA14_5==89||LA14_5==118||LA14_5==120||LA14_5==144||LA14_5==147||LA14_5==151||LA14_5==156) ) {
                            alt14=1;
                        }
                        }
                        break;
                }

            }
            switch (alt14) {
                case 1 :
                    // antlr3/PLSQL3.g:95:29: keyNEW
                    {
                    pushFollow(FOLLOW_keyNEW_in_type_declaration361);
                    keyNEW51=keyNEW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNEW51.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:95:39: ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==DOUBLEQUOTED_STRING||LA16_0==ID||(LA16_0 >= 58 && LA16_0 <= 63)||(LA16_0 >= 66 && LA16_0 <= 68)||(LA16_0 >= 74 && LA16_0 <= 76)||LA16_0==82||LA16_0==91||(LA16_0 >= 102 && LA16_0 <= 103)||LA16_0==109||LA16_0==112||(LA16_0 >= 114 && LA16_0 <= 117)||(LA16_0 >= 121 && LA16_0 <= 124)||(LA16_0 >= 131 && LA16_0 <= 132)||(LA16_0 >= 137 && LA16_0 <= 138)||LA16_0==144||LA16_0==150||LA16_0==160||(LA16_0 >= 162 && LA16_0 <= 163)) ) {
                alt16=1;
            }
            else if ( (LA16_0==LPAREN) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }
            switch (alt16) {
                case 1 :
                    // antlr3/PLSQL3.g:95:41: type_spec ( 'NOT' 'NULL' )?
                    {
                    pushFollow(FOLLOW_type_spec_in_type_declaration368);
                    type_spec52=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec52.getTree());

                    // antlr3/PLSQL3.g:95:51: ( 'NOT' 'NULL' )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==118) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // antlr3/PLSQL3.g:95:53: 'NOT' 'NULL'
                            {
                            string_literal53=(Token)match(input,118,FOLLOW_118_in_type_declaration372); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal53_tree = 
                            (Object)adaptor.create(string_literal53)
                            ;
                            adaptor.addChild(root_0, string_literal53_tree);
                            }

                            string_literal54=(Token)match(input,120,FOLLOW_120_in_type_declaration374); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal54_tree = 
                            (Object)adaptor.create(string_literal54)
                            ;
                            adaptor.addChild(root_0, string_literal54_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:95:71: LPAREN plsql_expressions RPAREN
                    {
                    LPAREN55=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_type_declaration381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN55_tree = 
                    (Object)adaptor.create(LPAREN55)
                    ;
                    adaptor.addChild(root_0, LPAREN55_tree);
                    }

                    pushFollow(FOLLOW_plsql_expressions_in_type_declaration383);
                    plsql_expressions56=plsql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions56.getTree());

                    RPAREN57=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_type_declaration385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN57_tree = 
                    (Object)adaptor.create(RPAREN57)
                    ;
                    adaptor.addChild(root_0, RPAREN57_tree);
                    }

                    }
                    break;

            }


            SEMI58=(Token)match(input,SEMI,FOLLOW_SEMI_in_type_declaration389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI58_tree = 
            (Object)adaptor.create(SEMI58)
            ;
            adaptor.addChild(root_0, SEMI58_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 8, type_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class subtype_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subtype_declaration"
    // antlr3/PLSQL3.g:98:1: subtype_declaration : keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMI ;
    public final PLSQL3Parser.subtype_declaration_return subtype_declaration() throws RecognitionException {
        PLSQL3Parser.subtype_declaration_return retval = new PLSQL3Parser.subtype_declaration_return();
        retval.start = input.LT(1);

        int subtype_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal61=null;
        Token string_literal63=null;
        Token string_literal64=null;
        Token DOUBLEDOT67=null;
        Token SEMI69=null;
        PLSQL3Parser.keySUBTYPE_return keySUBTYPE59 =null;

        PLSQL3Parser.type_spec_return type_spec60 =null;

        PLSQL3Parser.type_spec_return type_spec62 =null;

        PLSQL3Parser.keyRANGE_return keyRANGE65 =null;

        PLSQL3Parser.literal_return literal66 =null;

        PLSQL3Parser.literal_return literal68 =null;


        Object string_literal61_tree=null;
        Object string_literal63_tree=null;
        Object string_literal64_tree=null;
        Object DOUBLEDOT67_tree=null;
        Object SEMI69_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // antlr3/PLSQL3.g:99:2: ( keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMI )
            // antlr3/PLSQL3.g:99:4: keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keySUBTYPE_in_subtype_declaration402);
            keySUBTYPE59=keySUBTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySUBTYPE59.getTree());

            pushFollow(FOLLOW_type_spec_in_subtype_declaration404);
            type_spec60=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec60.getTree());

            string_literal61=(Token)match(input,106,FOLLOW_106_in_subtype_declaration406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal61_tree = 
            (Object)adaptor.create(string_literal61)
            ;
            adaptor.addChild(root_0, string_literal61_tree);
            }

            pushFollow(FOLLOW_type_spec_in_subtype_declaration408);
            type_spec62=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec62.getTree());

            // antlr3/PLSQL3.g:99:40: ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )?
            int alt17=3;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==118) ) {
                alt17=1;
            }
            else if ( (LA17_0==ID) ) {
                alt17=2;
            }
            switch (alt17) {
                case 1 :
                    // antlr3/PLSQL3.g:99:42: 'NOT' 'NULL'
                    {
                    string_literal63=(Token)match(input,118,FOLLOW_118_in_subtype_declaration412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal63_tree = 
                    (Object)adaptor.create(string_literal63)
                    ;
                    adaptor.addChild(root_0, string_literal63_tree);
                    }

                    string_literal64=(Token)match(input,120,FOLLOW_120_in_subtype_declaration414); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal64_tree = 
                    (Object)adaptor.create(string_literal64)
                    ;
                    adaptor.addChild(root_0, string_literal64_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:99:57: keyRANGE literal DOUBLEDOT literal
                    {
                    pushFollow(FOLLOW_keyRANGE_in_subtype_declaration418);
                    keyRANGE65=keyRANGE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRANGE65.getTree());

                    pushFollow(FOLLOW_literal_in_subtype_declaration420);
                    literal66=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal66.getTree());

                    DOUBLEDOT67=(Token)match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_subtype_declaration422); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLEDOT67_tree = 
                    (Object)adaptor.create(DOUBLEDOT67)
                    ;
                    adaptor.addChild(root_0, DOUBLEDOT67_tree);
                    }

                    pushFollow(FOLLOW_literal_in_subtype_declaration424);
                    literal68=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal68.getTree());

                    }
                    break;

            }


            SEMI69=(Token)match(input,SEMI,FOLLOW_SEMI_in_subtype_declaration429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI69_tree = 
            (Object)adaptor.create(SEMI69)
            ;
            adaptor.addChild(root_0, SEMI69_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 9, subtype_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "subtype_declaration"


    public static class cursor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_declaration"
    // antlr3/PLSQL3.g:102:1: cursor_declaration : keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMI ;
    public final PLSQL3Parser.cursor_declaration_return cursor_declaration() throws RecognitionException {
        PLSQL3Parser.cursor_declaration_return retval = new PLSQL3Parser.cursor_declaration_return();
        retval.start = input.LT(1);

        int cursor_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN72=null;
        Token RPAREN74=null;
        Token string_literal75=null;
        Token SEMI77=null;
        PLSQL3Parser.keyCURSOR_return keyCURSOR70 =null;

        PLSQL3Parser.cursor_name_return cursor_name71 =null;

        PLSQL3Parser.parameter_specs_return parameter_specs73 =null;

        PLSQL3Parser.select_command_return select_command76 =null;


        Object LPAREN72_tree=null;
        Object RPAREN74_tree=null;
        Object string_literal75_tree=null;
        Object SEMI77_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // antlr3/PLSQL3.g:103:2: ( keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMI )
            // antlr3/PLSQL3.g:103:4: keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyCURSOR_in_cursor_declaration442);
            keyCURSOR70=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURSOR70.getTree());

            pushFollow(FOLLOW_cursor_name_in_cursor_declaration444);
            cursor_name71=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name71.getTree());

            // antlr3/PLSQL3.g:104:3: ( LPAREN parameter_specs RPAREN )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==LPAREN) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // antlr3/PLSQL3.g:104:5: LPAREN parameter_specs RPAREN
                    {
                    LPAREN72=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_declaration450); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN72_tree = 
                    (Object)adaptor.create(LPAREN72)
                    ;
                    adaptor.addChild(root_0, LPAREN72_tree);
                    }

                    pushFollow(FOLLOW_parameter_specs_in_cursor_declaration452);
                    parameter_specs73=parameter_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_specs73.getTree());

                    RPAREN74=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_declaration454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN74_tree = 
                    (Object)adaptor.create(RPAREN74)
                    ;
                    adaptor.addChild(root_0, RPAREN74_tree);
                    }

                    }
                    break;

            }


            string_literal75=(Token)match(input,106,FOLLOW_106_in_cursor_declaration461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal75_tree = 
            (Object)adaptor.create(string_literal75)
            ;
            adaptor.addChild(root_0, string_literal75_tree);
            }

            pushFollow(FOLLOW_select_command_in_cursor_declaration463);
            select_command76=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command76.getTree());

            SEMI77=(Token)match(input,SEMI,FOLLOW_SEMI_in_cursor_declaration465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI77_tree = 
            (Object)adaptor.create(SEMI77)
            ;
            adaptor.addChild(root_0, SEMI77_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 10, cursor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_declaration"


    public static class package_obj_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_obj_body"
    // antlr3/PLSQL3.g:107:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration );
    public final PLSQL3Parser.package_obj_body_return package_obj_body() throws RecognitionException {
        PLSQL3Parser.package_obj_body_return retval = new PLSQL3Parser.package_obj_body_return();
        retval.start = input.LT(1);

        int package_obj_body_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.variable_declaration_return variable_declaration78 =null;

        PLSQL3Parser.subtype_declaration_return subtype_declaration79 =null;

        PLSQL3Parser.cursor_declaration_return cursor_declaration80 =null;

        PLSQL3Parser.exception_declaration_return exception_declaration81 =null;

        PLSQL3Parser.record_declaration_return record_declaration82 =null;

        PLSQL3Parser.plsql_table_declaration_return plsql_table_declaration83 =null;

        PLSQL3Parser.varray_declaration_return varray_declaration84 =null;

        PLSQL3Parser.procedure_body_return procedure_body85 =null;

        PLSQL3Parser.function_body_return function_body86 =null;

        PLSQL3Parser.pragma_declaration_return pragma_declaration87 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // antlr3/PLSQL3.g:108:2: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration )
            int alt19=10;
            alt19 = dfa19.predict(input);
            switch (alt19) {
                case 1 :
                    // antlr3/PLSQL3.g:108:4: variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_in_package_obj_body475);
                    variable_declaration78=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration78.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:109:4: subtype_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_body481);
                    subtype_declaration79=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration79.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:110:4: cursor_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_body487);
                    cursor_declaration80=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration80.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:111:4: exception_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_exception_declaration_in_package_obj_body493);
                    exception_declaration81=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration81.getTree());

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:112:4: record_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_record_declaration_in_package_obj_body499);
                    record_declaration82=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration82.getTree());

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:113:4: plsql_table_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_body505);
                    plsql_table_declaration83=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_declaration83.getTree());

                    }
                    break;
                case 7 :
                    // antlr3/PLSQL3.g:114:4: varray_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_varray_declaration_in_package_obj_body511);
                    varray_declaration84=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_declaration84.getTree());

                    }
                    break;
                case 8 :
                    // antlr3/PLSQL3.g:115:4: procedure_body
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_procedure_body_in_package_obj_body516);
                    procedure_body85=procedure_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_body85.getTree());

                    }
                    break;
                case 9 :
                    // antlr3/PLSQL3.g:116:4: function_body
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_function_body_in_package_obj_body522);
                    function_body86=function_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_body86.getTree());

                    }
                    break;
                case 10 :
                    // antlr3/PLSQL3.g:117:4: pragma_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_body528);
                    pragma_declaration87=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration87.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 11, package_obj_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "package_obj_body"


    public static class seq_of_statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "seq_of_statements"
    // antlr3/PLSQL3.g:120:1: seq_of_statements : statement SEMI ( statement SEMI )* ;
    public final PLSQL3Parser.seq_of_statements_return seq_of_statements() throws RecognitionException {
        PLSQL3Parser.seq_of_statements_return retval = new PLSQL3Parser.seq_of_statements_return();
        retval.start = input.LT(1);

        int seq_of_statements_StartIndex = input.index();

        Object root_0 = null;

        Token SEMI89=null;
        Token SEMI91=null;
        PLSQL3Parser.statement_return statement88 =null;

        PLSQL3Parser.statement_return statement90 =null;


        Object SEMI89_tree=null;
        Object SEMI91_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // antlr3/PLSQL3.g:121:2: ( statement SEMI ( statement SEMI )* )
            // antlr3/PLSQL3.g:121:4: statement SEMI ( statement SEMI )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_statement_in_seq_of_statements539);
            statement88=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement88.getTree());

            SEMI89=(Token)match(input,SEMI,FOLLOW_SEMI_in_seq_of_statements541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI89_tree = 
            (Object)adaptor.create(SEMI89)
            ;
            adaptor.addChild(root_0, SEMI89_tree);
            }

            // antlr3/PLSQL3.g:121:19: ( statement SEMI )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==COLON||LA20_0==DOUBLEQUOTED_STRING||LA20_0==ID||LA20_0==LLABEL||LA20_0==56||LA20_0==65||LA20_0==70||LA20_0==73||LA20_0==77||LA20_0==79||LA20_0==90||LA20_0==92||(LA20_0 >= 94 && LA20_0 <= 95)||LA20_0==98||LA20_0==101||LA20_0==108||LA20_0==110||LA20_0==120||LA20_0==133||(LA20_0 >= 135 && LA20_0 <= 136)||LA20_0==140||LA20_0==142||LA20_0==144||(LA20_0 >= 146 && LA20_0 <= 148)||LA20_0==159||LA20_0==166) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // antlr3/PLSQL3.g:121:21: statement SEMI
            	    {
            	    pushFollow(FOLLOW_statement_in_seq_of_statements545);
            	    statement90=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement90.getTree());

            	    SEMI91=(Token)match(input,SEMI,FOLLOW_SEMI_in_seq_of_statements547); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMI91_tree = 
            	    (Object)adaptor.create(SEMI91)
            	    ;
            	    adaptor.addChild(root_0, SEMI91_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 12, seq_of_statements_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "seq_of_statements"


    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // antlr3/PLSQL3.g:124:1: statement : ( assignment_statement | exit_statement | goto_statement | case_statement | if_statement | loop_statement | null_statement | raise_statement | return_statement | sql_statement | plsql_block | function_call );
    public final PLSQL3Parser.statement_return statement() throws RecognitionException {
        PLSQL3Parser.statement_return retval = new PLSQL3Parser.statement_return();
        retval.start = input.LT(1);

        int statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.assignment_statement_return assignment_statement92 =null;

        PLSQL3Parser.exit_statement_return exit_statement93 =null;

        PLSQL3Parser.goto_statement_return goto_statement94 =null;

        PLSQL3Parser.case_statement_return case_statement95 =null;

        PLSQL3Parser.if_statement_return if_statement96 =null;

        PLSQL3Parser.loop_statement_return loop_statement97 =null;

        PLSQL3Parser.null_statement_return null_statement98 =null;

        PLSQL3Parser.raise_statement_return raise_statement99 =null;

        PLSQL3Parser.return_statement_return return_statement100 =null;

        PLSQL3Parser.sql_statement_return sql_statement101 =null;

        PLSQL3Parser.plsql_block_return plsql_block102 =null;

        PLSQL3Parser.function_call_return function_call103 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // antlr3/PLSQL3.g:125:2: ( assignment_statement | exit_statement | goto_statement | case_statement | if_statement | loop_statement | null_statement | raise_statement | return_statement | sql_statement | plsql_block | function_call )
            int alt21=12;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA21_1 = input.LA(2);

                if ( (synpred43_PLSQL3()) ) {
                    alt21=1;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("EXIT"))&&(input.LT(1).getText().equalsIgnoreCase("EXIT")))&&synpred44_PLSQL3())) ) {
                    alt21=2;
                }
                else if ( (synpred46_PLSQL3()) ) {
                    alt21=4;
                }
                else if ( (((synpred52_PLSQL3()&&synpred52_PLSQL3())&&((input.LT(1).getText().equalsIgnoreCase("OPEN"))||(input.LT(1).getText().equalsIgnoreCase("CLOSE"))))) ) {
                    alt21=10;
                }
                else if ( (synpred53_PLSQL3()) ) {
                    alt21=11;
                }
                else if ( (true) ) {
                    alt21=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 1, input);

                    throw nvae;

                }
                }
                break;
            case COLON:
                {
                alt21=1;
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA21_3 = input.LA(2);

                if ( (synpred43_PLSQL3()) ) {
                    alt21=1;
                }
                else if ( (synpred46_PLSQL3()) ) {
                    alt21=4;
                }
                else if ( (synpred53_PLSQL3()) ) {
                    alt21=11;
                }
                else if ( (true) ) {
                    alt21=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 3, input);

                    throw nvae;

                }
                }
                break;
            case 95:
                {
                alt21=3;
                }
                break;
            case 65:
                {
                alt21=4;
                }
                break;
            case 98:
                {
                alt21=5;
                }
                break;
            case LLABEL:
                {
                int LA21_7 = input.LA(2);

                if ( (synpred48_PLSQL3()) ) {
                    alt21=6;
                }
                else if ( (synpred53_PLSQL3()) ) {
                    alt21=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 7, input);

                    throw nvae;

                }
                }
                break;
            case 92:
            case 110:
            case 166:
                {
                alt21=6;
                }
                break;
            case 120:
                {
                alt21=7;
                }
                break;
            case 136:
                {
                alt21=8;
                }
                break;
            case 140:
                {
                alt21=9;
                }
                break;
            case 70:
            case 79:
            case 90:
            case 101:
            case 108:
            case 142:
            case 146:
            case 147:
            case 148:
            case 159:
                {
                alt21=10;
                }
                break;
            case 56:
            case 73:
            case 77:
            case 94:
            case 133:
            case 135:
                {
                alt21=11;
                }
                break;
            case 144:
                {
                alt21=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }

            switch (alt21) {
                case 1 :
                    // antlr3/PLSQL3.g:125:4: assignment_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_assignment_statement_in_statement562);
                    assignment_statement92=assignment_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_statement92.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:126:4: exit_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_exit_statement_in_statement567);
                    exit_statement93=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement93.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:127:4: goto_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_statement_in_statement572);
                    goto_statement94=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement94.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:128:4: case_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_statement_in_statement577);
                    case_statement95=case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement95.getTree());

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:129:4: if_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_statement_in_statement582);
                    if_statement96=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement96.getTree());

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:130:4: loop_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_loop_statement_in_statement588);
                    loop_statement97=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement97.getTree());

                    }
                    break;
                case 7 :
                    // antlr3/PLSQL3.g:131:4: null_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_statement_in_statement594);
                    null_statement98=null_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_statement98.getTree());

                    }
                    break;
                case 8 :
                    // antlr3/PLSQL3.g:132:4: raise_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_raise_statement_in_statement599);
                    raise_statement99=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement99.getTree());

                    }
                    break;
                case 9 :
                    // antlr3/PLSQL3.g:133:4: return_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_statement_in_statement604);
                    return_statement100=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement100.getTree());

                    }
                    break;
                case 10 :
                    // antlr3/PLSQL3.g:134:4: sql_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_statement_in_statement609);
                    sql_statement101=sql_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statement101.getTree());

                    }
                    break;
                case 11 :
                    // antlr3/PLSQL3.g:135:4: plsql_block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_block_in_statement614);
                    plsql_block102=plsql_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_block102.getTree());

                    }
                    break;
                case 12 :
                    // antlr3/PLSQL3.g:137:4: function_call
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_function_call_in_statement620);
                    function_call103=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call103.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 13, statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class plsql_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_block"
    // antlr3/PLSQL3.g:140:1: plsql_block : ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? ) ;
    public final PLSQL3Parser.plsql_block_return plsql_block() throws RecognitionException {
        PLSQL3Parser.plsql_block_return retval = new PLSQL3Parser.plsql_block_return();
        retval.start = input.LT(1);

        int plsql_block_StartIndex = input.index();

        Object root_0 = null;

        Token LLABEL104=null;
        Token RLABEL106=null;
        Token string_literal107=null;
        Token string_literal109=null;
        Token string_literal111=null;
        Token string_literal113=null;
        PLSQL3Parser.label_name_return label_name105 =null;

        PLSQL3Parser.declare_spec_return declare_spec108 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements110 =null;

        PLSQL3Parser.exception_handler_return exception_handler112 =null;

        PLSQL3Parser.label_name_return label_name114 =null;


        Object LLABEL104_tree=null;
        Object RLABEL106_tree=null;
        Object string_literal107_tree=null;
        Object string_literal109_tree=null;
        Object string_literal111_tree=null;
        Object string_literal113_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // antlr3/PLSQL3.g:141:2: ( ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? ) )
            // antlr3/PLSQL3.g:141:4: ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? )
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:141:4: ( LLABEL label_name RLABEL )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==LLABEL) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // antlr3/PLSQL3.g:141:6: LLABEL label_name RLABEL
                    {
                    LLABEL104=(Token)match(input,LLABEL,FOLLOW_LLABEL_in_plsql_block635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LLABEL104_tree = 
                    (Object)adaptor.create(LLABEL104)
                    ;
                    adaptor.addChild(root_0, LLABEL104_tree);
                    }

                    pushFollow(FOLLOW_label_name_in_plsql_block637);
                    label_name105=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name105.getTree());

                    RLABEL106=(Token)match(input,RLABEL,FOLLOW_RLABEL_in_plsql_block639); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RLABEL106_tree = 
                    (Object)adaptor.create(RLABEL106)
                    ;
                    adaptor.addChild(root_0, RLABEL106_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:142:3: ( ( 'DECLARE' )? ( declare_spec )+ )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==DOUBLEQUOTED_STRING||LA25_0==ID||LA25_0==73||LA25_0==77||LA25_0==94||LA25_0==133||LA25_0==135) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // antlr3/PLSQL3.g:142:5: ( 'DECLARE' )? ( declare_spec )+
                    {
                    // antlr3/PLSQL3.g:142:5: ( 'DECLARE' )?
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==77) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            // antlr3/PLSQL3.g:142:7: 'DECLARE'
                            {
                            string_literal107=(Token)match(input,77,FOLLOW_77_in_plsql_block650); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal107_tree = 
                            (Object)adaptor.create(string_literal107)
                            ;
                            adaptor.addChild(root_0, string_literal107_tree);
                            }

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:142:20: ( declare_spec )+
                    int cnt24=0;
                    loop24:
                    do {
                        int alt24=2;
                        int LA24_0 = input.LA(1);

                        if ( (LA24_0==DOUBLEQUOTED_STRING||LA24_0==ID||LA24_0==73||LA24_0==94||LA24_0==133||LA24_0==135) ) {
                            alt24=1;
                        }


                        switch (alt24) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:142:21: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_plsql_block656);
                    	    declare_spec108=declare_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declare_spec108.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt24 >= 1 ) break loop24;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(24, input);
                                throw eee;
                        }
                        cnt24++;
                    } while (true);


                    }
                    break;

            }


            // antlr3/PLSQL3.g:143:3: ( 'BEGIN' )
            // antlr3/PLSQL3.g:143:5: 'BEGIN'
            {
            string_literal109=(Token)match(input,56,FOLLOW_56_in_plsql_block668); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal109_tree = 
            (Object)adaptor.create(string_literal109)
            ;
            adaptor.addChild(root_0, string_literal109_tree);
            }

            }


            pushFollow(FOLLOW_seq_of_statements_in_plsql_block674);
            seq_of_statements110=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements110.getTree());

            // antlr3/PLSQL3.g:145:3: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==86) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // antlr3/PLSQL3.g:145:5: 'EXCEPTION' ( exception_handler )+
                    {
                    string_literal111=(Token)match(input,86,FOLLOW_86_in_plsql_block680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal111_tree = 
                    (Object)adaptor.create(string_literal111)
                    ;
                    adaptor.addChild(root_0, string_literal111_tree);
                    }

                    // antlr3/PLSQL3.g:145:17: ( exception_handler )+
                    int cnt26=0;
                    loop26:
                    do {
                        int alt26=2;
                        int LA26_0 = input.LA(1);

                        if ( (LA26_0==164) ) {
                            alt26=1;
                        }


                        switch (alt26) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:145:19: exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_plsql_block684);
                    	    exception_handler112=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler112.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt26 >= 1 ) break loop26;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(26, input);
                                throw eee;
                        }
                        cnt26++;
                    } while (true);


                    }
                    break;

            }


            // antlr3/PLSQL3.g:146:3: ( 'END' ( label_name )? )
            // antlr3/PLSQL3.g:146:5: 'END' ( label_name )?
            {
            string_literal113=(Token)match(input,85,FOLLOW_85_in_plsql_block697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal113_tree = 
            (Object)adaptor.create(string_literal113)
            ;
            adaptor.addChild(root_0, string_literal113_tree);
            }

            // antlr3/PLSQL3.g:146:11: ( label_name )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==DOUBLEQUOTED_STRING||LA28_0==ID) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // antlr3/PLSQL3.g:146:13: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_plsql_block701);
                    label_name114=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name114.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 14, plsql_block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_block"


    public static class declare_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declare_spec"
    // antlr3/PLSQL3.g:149:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration );
    public final PLSQL3Parser.declare_spec_return declare_spec() throws RecognitionException {
        PLSQL3Parser.declare_spec_return retval = new PLSQL3Parser.declare_spec_return();
        retval.start = input.LT(1);

        int declare_spec_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.variable_declaration_return variable_declaration115 =null;

        PLSQL3Parser.subtype_declaration_return subtype_declaration116 =null;

        PLSQL3Parser.cursor_declaration_return cursor_declaration117 =null;

        PLSQL3Parser.exception_declaration_return exception_declaration118 =null;

        PLSQL3Parser.record_declaration_return record_declaration119 =null;

        PLSQL3Parser.plsql_table_declaration_return plsql_table_declaration120 =null;

        PLSQL3Parser.varray_declaration_return varray_declaration121 =null;

        PLSQL3Parser.procedure_declaration_return procedure_declaration122 =null;

        PLSQL3Parser.function_declaration_return function_declaration123 =null;

        PLSQL3Parser.type_declaration_return type_declaration124 =null;

        PLSQL3Parser.pragma_declaration_return pragma_declaration125 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // antlr3/PLSQL3.g:150:2: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration )
            int alt29=11;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // antlr3/PLSQL3.g:150:4: variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_in_declare_spec717);
                    variable_declaration115=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration115.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:151:4: subtype_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_subtype_declaration_in_declare_spec723);
                    subtype_declaration116=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration116.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:152:4: cursor_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_declaration_in_declare_spec729);
                    cursor_declaration117=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration117.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:153:4: exception_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_exception_declaration_in_declare_spec735);
                    exception_declaration118=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration118.getTree());

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:154:4: record_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_record_declaration_in_declare_spec741);
                    record_declaration119=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration119.getTree());

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:155:4: plsql_table_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_table_declaration_in_declare_spec747);
                    plsql_table_declaration120=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_declaration120.getTree());

                    }
                    break;
                case 7 :
                    // antlr3/PLSQL3.g:156:4: varray_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_varray_declaration_in_declare_spec753);
                    varray_declaration121=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_declaration121.getTree());

                    }
                    break;
                case 8 :
                    // antlr3/PLSQL3.g:157:4: procedure_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_procedure_declaration_in_declare_spec758);
                    procedure_declaration122=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration122.getTree());

                    }
                    break;
                case 9 :
                    // antlr3/PLSQL3.g:158:4: function_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_function_declaration_in_declare_spec764);
                    function_declaration123=function_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration123.getTree());

                    }
                    break;
                case 10 :
                    // antlr3/PLSQL3.g:159:4: type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_in_declare_spec769);
                    type_declaration124=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration124.getTree());

                    }
                    break;
                case 11 :
                    // antlr3/PLSQL3.g:160:4: pragma_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_pragma_declaration_in_declare_spec775);
                    pragma_declaration125=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration125.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 15, declare_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "declare_spec"


    public static class pragma_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_declaration"
    // antlr3/PLSQL3.g:163:1: pragma_declaration : keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMI ;
    public final PLSQL3Parser.pragma_declaration_return pragma_declaration() throws RecognitionException {
        PLSQL3Parser.pragma_declaration_return retval = new PLSQL3Parser.pragma_declaration_return();
        retval.start = input.LT(1);

        int pragma_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN128=null;
        Token string_literal129=null;
        Token COMMA131=null;
        Token RPAREN133=null;
        Token LPAREN135=null;
        Token COMMA137=null;
        Token RPAREN139=null;
        Token LPAREN143=null;
        Token RPAREN145=null;
        Token LPAREN147=null;
        Token RPAREN149=null;
        Token LPAREN151=null;
        Token RPAREN153=null;
        Token LPAREN155=null;
        Token RPAREN157=null;
        Token LPAREN159=null;
        Token RPAREN161=null;
        Token SEMI162=null;
        PLSQL3Parser.keyPRAGMA_return keyPRAGMA126 =null;

        PLSQL3Parser.keyRESTRICT_REFERENCES_return keyRESTRICT_REFERENCES127 =null;

        PLSQL3Parser.function_name_return function_name130 =null;

        PLSQL3Parser.pragma_param_return pragma_param132 =null;

        PLSQL3Parser.keyEXCEPTION_INIT_return keyEXCEPTION_INIT134 =null;

        PLSQL3Parser.exception_name_return exception_name136 =null;

        PLSQL3Parser.literal_return literal138 =null;

        PLSQL3Parser.keyAUTONOMOUS_TRANSACTION_return keyAUTONOMOUS_TRANSACTION140 =null;

        PLSQL3Parser.keySERIALLY_REUSABLE_return keySERIALLY_REUSABLE141 =null;

        PLSQL3Parser.keyBUILTIN_return keyBUILTIN142 =null;

        PLSQL3Parser.pragma_params_return pragma_params144 =null;

        PLSQL3Parser.keyFIPSFLAG_return keyFIPSFLAG146 =null;

        PLSQL3Parser.pragma_params_return pragma_params148 =null;

        PLSQL3Parser.keyINTERFACE_return keyINTERFACE150 =null;

        PLSQL3Parser.pragma_params_return pragma_params152 =null;

        PLSQL3Parser.keyNEW_NAMES_return keyNEW_NAMES154 =null;

        PLSQL3Parser.pragma_params_return pragma_params156 =null;

        PLSQL3Parser.keyTIMESTAMP_return keyTIMESTAMP158 =null;

        PLSQL3Parser.pragma_params_return pragma_params160 =null;


        Object LPAREN128_tree=null;
        Object string_literal129_tree=null;
        Object COMMA131_tree=null;
        Object RPAREN133_tree=null;
        Object LPAREN135_tree=null;
        Object COMMA137_tree=null;
        Object RPAREN139_tree=null;
        Object LPAREN143_tree=null;
        Object RPAREN145_tree=null;
        Object LPAREN147_tree=null;
        Object RPAREN149_tree=null;
        Object LPAREN151_tree=null;
        Object RPAREN153_tree=null;
        Object LPAREN155_tree=null;
        Object RPAREN157_tree=null;
        Object LPAREN159_tree=null;
        Object RPAREN161_tree=null;
        Object SEMI162_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // antlr3/PLSQL3.g:164:2: ( keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMI )
            // antlr3/PLSQL3.g:164:4: keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyPRAGMA_in_pragma_declaration786);
            keyPRAGMA126=keyPRAGMA();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPRAGMA126.getTree());

            // antlr3/PLSQL3.g:165:3: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN )
            int alt32=9;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // antlr3/PLSQL3.g:165:5: keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN
                    {
                    pushFollow(FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration793);
                    keyRESTRICT_REFERENCES127=keyRESTRICT_REFERENCES();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRESTRICT_REFERENCES127.getTree());

                    LPAREN128=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration795); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN128_tree = 
                    (Object)adaptor.create(LPAREN128)
                    ;
                    adaptor.addChild(root_0, LPAREN128_tree);
                    }

                    // antlr3/PLSQL3.g:165:35: ( 'DEFAULT' | function_name )
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==78) ) {
                        alt30=1;
                    }
                    else if ( (LA30_0==DOUBLEQUOTED_STRING||LA30_0==ID||LA30_0==QUOTED_STRING) ) {
                        alt30=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 30, 0, input);

                        throw nvae;

                    }
                    switch (alt30) {
                        case 1 :
                            // antlr3/PLSQL3.g:165:37: 'DEFAULT'
                            {
                            string_literal129=(Token)match(input,78,FOLLOW_78_in_pragma_declaration799); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal129_tree = 
                            (Object)adaptor.create(string_literal129)
                            ;
                            adaptor.addChild(root_0, string_literal129_tree);
                            }

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:165:49: function_name
                            {
                            pushFollow(FOLLOW_function_name_in_pragma_declaration803);
                            function_name130=function_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name130.getTree());

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:165:65: ( COMMA pragma_param )+
                    int cnt31=0;
                    loop31:
                    do {
                        int alt31=2;
                        int LA31_0 = input.LA(1);

                        if ( (LA31_0==COMMA) ) {
                            alt31=1;
                        }


                        switch (alt31) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:165:67: COMMA pragma_param
                    	    {
                    	    COMMA131=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration809); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA131_tree = 
                    	    (Object)adaptor.create(COMMA131)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA131_tree);
                    	    }

                    	    pushFollow(FOLLOW_pragma_param_in_pragma_declaration811);
                    	    pragma_param132=pragma_param();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_param132.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt31 >= 1 ) break loop31;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(31, input);
                                throw eee;
                        }
                        cnt31++;
                    } while (true);


                    RPAREN133=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN133_tree = 
                    (Object)adaptor.create(RPAREN133)
                    ;
                    adaptor.addChild(root_0, RPAREN133_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:166:5: keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN
                    {
                    pushFollow(FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration823);
                    keyEXCEPTION_INIT134=keyEXCEPTION_INIT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEXCEPTION_INIT134.getTree());

                    LPAREN135=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration825); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN135_tree = 
                    (Object)adaptor.create(LPAREN135)
                    ;
                    adaptor.addChild(root_0, LPAREN135_tree);
                    }

                    pushFollow(FOLLOW_exception_name_in_pragma_declaration827);
                    exception_name136=exception_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name136.getTree());

                    COMMA137=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA137_tree = 
                    (Object)adaptor.create(COMMA137)
                    ;
                    adaptor.addChild(root_0, COMMA137_tree);
                    }

                    pushFollow(FOLLOW_literal_in_pragma_declaration831);
                    literal138=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal138.getTree());

                    RPAREN139=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN139_tree = 
                    (Object)adaptor.create(RPAREN139)
                    ;
                    adaptor.addChild(root_0, RPAREN139_tree);
                    }

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:167:5: keyAUTONOMOUS_TRANSACTION
                    {
                    pushFollow(FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration839);
                    keyAUTONOMOUS_TRANSACTION140=keyAUTONOMOUS_TRANSACTION();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyAUTONOMOUS_TRANSACTION140.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:168:5: keySERIALLY_REUSABLE
                    {
                    pushFollow(FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration845);
                    keySERIALLY_REUSABLE141=keySERIALLY_REUSABLE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySERIALLY_REUSABLE141.getTree());

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:169:5: keyBUILTIN LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyBUILTIN_in_pragma_declaration851);
                    keyBUILTIN142=keyBUILTIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBUILTIN142.getTree());

                    LPAREN143=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN143_tree = 
                    (Object)adaptor.create(LPAREN143)
                    ;
                    adaptor.addChild(root_0, LPAREN143_tree);
                    }

                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration855);
                    pragma_params144=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params144.getTree());

                    RPAREN145=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration857); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN145_tree = 
                    (Object)adaptor.create(RPAREN145)
                    ;
                    adaptor.addChild(root_0, RPAREN145_tree);
                    }

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:170:5: keyFIPSFLAG LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyFIPSFLAG_in_pragma_declaration863);
                    keyFIPSFLAG146=keyFIPSFLAG();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyFIPSFLAG146.getTree());

                    LPAREN147=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN147_tree = 
                    (Object)adaptor.create(LPAREN147)
                    ;
                    adaptor.addChild(root_0, LPAREN147_tree);
                    }

                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration867);
                    pragma_params148=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params148.getTree());

                    RPAREN149=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration869); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN149_tree = 
                    (Object)adaptor.create(RPAREN149)
                    ;
                    adaptor.addChild(root_0, RPAREN149_tree);
                    }

                    }
                    break;
                case 7 :
                    // antlr3/PLSQL3.g:171:5: keyINTERFACE LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyINTERFACE_in_pragma_declaration875);
                    keyINTERFACE150=keyINTERFACE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINTERFACE150.getTree());

                    LPAREN151=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration877); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN151_tree = 
                    (Object)adaptor.create(LPAREN151)
                    ;
                    adaptor.addChild(root_0, LPAREN151_tree);
                    }

                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration879);
                    pragma_params152=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params152.getTree());

                    RPAREN153=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration881); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN153_tree = 
                    (Object)adaptor.create(RPAREN153)
                    ;
                    adaptor.addChild(root_0, RPAREN153_tree);
                    }

                    }
                    break;
                case 8 :
                    // antlr3/PLSQL3.g:172:5: keyNEW_NAMES LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyNEW_NAMES_in_pragma_declaration887);
                    keyNEW_NAMES154=keyNEW_NAMES();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNEW_NAMES154.getTree());

                    LPAREN155=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration889); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN155_tree = 
                    (Object)adaptor.create(LPAREN155)
                    ;
                    adaptor.addChild(root_0, LPAREN155_tree);
                    }

                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration891);
                    pragma_params156=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params156.getTree());

                    RPAREN157=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN157_tree = 
                    (Object)adaptor.create(RPAREN157)
                    ;
                    adaptor.addChild(root_0, RPAREN157_tree);
                    }

                    }
                    break;
                case 9 :
                    // antlr3/PLSQL3.g:173:5: keyTIMESTAMP LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyTIMESTAMP_in_pragma_declaration899);
                    keyTIMESTAMP158=keyTIMESTAMP();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIMESTAMP158.getTree());

                    LPAREN159=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration901); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN159_tree = 
                    (Object)adaptor.create(LPAREN159)
                    ;
                    adaptor.addChild(root_0, LPAREN159_tree);
                    }

                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration903);
                    pragma_params160=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params160.getTree());

                    RPAREN161=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN161_tree = 
                    (Object)adaptor.create(RPAREN161)
                    ;
                    adaptor.addChild(root_0, RPAREN161_tree);
                    }

                    }
                    break;

            }


            SEMI162=(Token)match(input,SEMI,FOLLOW_SEMI_in_pragma_declaration913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI162_tree = 
            (Object)adaptor.create(SEMI162)
            ;
            adaptor.addChild(root_0, SEMI162_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 16, pragma_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pragma_declaration"


    public static class pragma_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_params"
    // antlr3/PLSQL3.g:178:1: pragma_params : pragma_param ( COMMA pragma_param )* ;
    public final PLSQL3Parser.pragma_params_return pragma_params() throws RecognitionException {
        PLSQL3Parser.pragma_params_return retval = new PLSQL3Parser.pragma_params_return();
        retval.start = input.LT(1);

        int pragma_params_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA164=null;
        PLSQL3Parser.pragma_param_return pragma_param163 =null;

        PLSQL3Parser.pragma_param_return pragma_param165 =null;


        Object COMMA164_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // antlr3/PLSQL3.g:179:2: ( pragma_param ( COMMA pragma_param )* )
            // antlr3/PLSQL3.g:179:4: pragma_param ( COMMA pragma_param )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_pragma_param_in_pragma_params924);
            pragma_param163=pragma_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_param163.getTree());

            // antlr3/PLSQL3.g:179:17: ( COMMA pragma_param )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==COMMA) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // antlr3/PLSQL3.g:179:19: COMMA pragma_param
            	    {
            	    COMMA164=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_params928); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA164_tree = 
            	    (Object)adaptor.create(COMMA164)
            	    ;
            	    adaptor.addChild(root_0, COMMA164_tree);
            	    }

            	    pushFollow(FOLLOW_pragma_param_in_pragma_params930);
            	    pragma_param165=pragma_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_param165.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 17, pragma_params_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pragma_params"


    public static class pragma_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_param"
    // antlr3/PLSQL3.g:182:1: pragma_param : ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING | identifier );
    public final PLSQL3Parser.pragma_param_return pragma_param() throws RecognitionException {
        PLSQL3Parser.pragma_param_return retval = new PLSQL3Parser.pragma_param_return();
        retval.start = input.LT(1);

        int pragma_param_StartIndex = input.index();

        Object root_0 = null;

        Token set166=null;
        Token NUMBER167=null;
        Token QUOTED_STRING168=null;
        PLSQL3Parser.identifier_return identifier169 =null;


        Object set166_tree=null;
        Object NUMBER167_tree=null;
        Object QUOTED_STRING168_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // antlr3/PLSQL3.g:183:2: ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING | identifier )
            int alt35=3;
            switch ( input.LA(1) ) {
            case MINUS:
            case NUMBER:
            case PLUS:
                {
                alt35=1;
                }
                break;
            case QUOTED_STRING:
                {
                alt35=2;
                }
                break;
            case DOUBLEQUOTED_STRING:
            case ID:
                {
                alt35=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }

            switch (alt35) {
                case 1 :
                    // antlr3/PLSQL3.g:183:4: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    // antlr3/PLSQL3.g:183:4: ( PLUS | MINUS )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==MINUS||LA34_0==PLUS) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // antlr3/PLSQL3.g:
                            {
                            set166=(Token)input.LT(1);

                            if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set166)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    NUMBER167=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_pragma_param955); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER167_tree = 
                    (Object)adaptor.create(NUMBER167)
                    ;
                    adaptor.addChild(root_0, NUMBER167_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:184:4: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTED_STRING168=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pragma_param960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING168_tree = 
                    (Object)adaptor.create(QUOTED_STRING168)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING168_tree);
                    }

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:185:4: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_pragma_param965);
                    identifier169=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier169.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 18, pragma_param_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pragma_param"


    public static class assignment_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignment_statement"
    // antlr3/PLSQL3.g:188:1: assignment_statement : ( lvalue ASSIGN plsql_expression ) ;
    public final PLSQL3Parser.assignment_statement_return assignment_statement() throws RecognitionException {
        PLSQL3Parser.assignment_statement_return retval = new PLSQL3Parser.assignment_statement_return();
        retval.start = input.LT(1);

        int assignment_statement_StartIndex = input.index();

        Object root_0 = null;

        Token ASSIGN171=null;
        PLSQL3Parser.lvalue_return lvalue170 =null;

        PLSQL3Parser.plsql_expression_return plsql_expression172 =null;


        Object ASSIGN171_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // antlr3/PLSQL3.g:189:2: ( ( lvalue ASSIGN plsql_expression ) )
            // antlr3/PLSQL3.g:191:3: ( lvalue ASSIGN plsql_expression )
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:191:3: ( lvalue ASSIGN plsql_expression )
            // antlr3/PLSQL3.g:191:4: lvalue ASSIGN plsql_expression
            {
            pushFollow(FOLLOW_lvalue_in_assignment_statement981);
            lvalue170=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue170.getTree());

            ASSIGN171=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN171_tree = 
            (Object)adaptor.create(ASSIGN171)
            ;
            adaptor.addChild(root_0, ASSIGN171_tree);
            }

            pushFollow(FOLLOW_plsql_expression_in_assignment_statement985);
            plsql_expression172=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression172.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 19, assignment_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignment_statement"


    public static class lvalues_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalues"
    // antlr3/PLSQL3.g:194:1: lvalues : lvalue ( COMMA lvalue )* ;
    public final PLSQL3Parser.lvalues_return lvalues() throws RecognitionException {
        PLSQL3Parser.lvalues_return retval = new PLSQL3Parser.lvalues_return();
        retval.start = input.LT(1);

        int lvalues_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA174=null;
        PLSQL3Parser.lvalue_return lvalue173 =null;

        PLSQL3Parser.lvalue_return lvalue175 =null;


        Object COMMA174_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // antlr3/PLSQL3.g:195:2: ( lvalue ( COMMA lvalue )* )
            // antlr3/PLSQL3.g:195:4: lvalue ( COMMA lvalue )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_lvalue_in_lvalues997);
            lvalue173=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue173.getTree());

            // antlr3/PLSQL3.g:195:11: ( COMMA lvalue )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==COMMA) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // antlr3/PLSQL3.g:195:13: COMMA lvalue
            	    {
            	    COMMA174=(Token)match(input,COMMA,FOLLOW_COMMA_in_lvalues1001); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA174_tree = 
            	    (Object)adaptor.create(COMMA174)
            	    ;
            	    adaptor.addChild(root_0, COMMA174_tree);
            	    }

            	    pushFollow(FOLLOW_lvalue_in_lvalues1003);
            	    lvalue175=lvalue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue175.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 20, lvalues_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lvalues"


    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // antlr3/PLSQL3.g:197:1: lvalue : ( variable_name | record_name DOT field_name | plsql_table_name LPAREN subscript RPAREN ( DOT field_name )* | COLON host_variable ( COLON host_variable )? );
    public final PLSQL3Parser.lvalue_return lvalue() throws RecognitionException {
        PLSQL3Parser.lvalue_return retval = new PLSQL3Parser.lvalue_return();
        retval.start = input.LT(1);

        int lvalue_StartIndex = input.index();

        Object root_0 = null;

        Token DOT178=null;
        Token LPAREN181=null;
        Token RPAREN183=null;
        Token DOT184=null;
        Token COLON186=null;
        Token COLON188=null;
        PLSQL3Parser.variable_name_return variable_name176 =null;

        PLSQL3Parser.record_name_return record_name177 =null;

        PLSQL3Parser.field_name_return field_name179 =null;

        PLSQL3Parser.plsql_table_name_return plsql_table_name180 =null;

        PLSQL3Parser.subscript_return subscript182 =null;

        PLSQL3Parser.field_name_return field_name185 =null;

        PLSQL3Parser.host_variable_return host_variable187 =null;

        PLSQL3Parser.host_variable_return host_variable189 =null;


        Object DOT178_tree=null;
        Object LPAREN181_tree=null;
        Object RPAREN183_tree=null;
        Object DOT184_tree=null;
        Object COLON186_tree=null;
        Object COLON188_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // antlr3/PLSQL3.g:198:2: ( variable_name | record_name DOT field_name | plsql_table_name LPAREN subscript RPAREN ( DOT field_name )* | COLON host_variable ( COLON host_variable )? )
            int alt39=4;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==DOUBLEQUOTED_STRING||LA39_0==ID) ) {
                switch ( input.LA(2) ) {
                case EOF:
                case ASSIGN:
                case COMMA:
                case SEMI:
                case 93:
                    {
                    alt39=1;
                    }
                    break;
                case DOT:
                    {
                    int LA39_4 = input.LA(3);

                    if ( (LA39_4==DOUBLEQUOTED_STRING||LA39_4==ID) ) {
                        int LA39_6 = input.LA(4);

                        if ( (LA39_6==EOF||LA39_6==ASSIGN||LA39_6==COMMA||LA39_6==SEMI||LA39_6==93) ) {
                            alt39=2;
                        }
                        else if ( (LA39_6==DOT||LA39_6==LPAREN) ) {
                            alt39=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 39, 6, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 39, 4, input);

                        throw nvae;

                    }
                    }
                    break;
                case LPAREN:
                    {
                    alt39=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA39_0==COLON) ) {
                alt39=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // antlr3/PLSQL3.g:198:4: variable_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_name_in_lvalue1016);
                    variable_name176=variable_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name176.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:199:4: record_name DOT field_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_record_name_in_lvalue1021);
                    record_name177=record_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_name177.getTree());

                    DOT178=(Token)match(input,DOT,FOLLOW_DOT_in_lvalue1023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT178_tree = 
                    (Object)adaptor.create(DOT178)
                    ;
                    adaptor.addChild(root_0, DOT178_tree);
                    }

                    pushFollow(FOLLOW_field_name_in_lvalue1025);
                    field_name179=field_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name179.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:200:4: plsql_table_name LPAREN subscript RPAREN ( DOT field_name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_plsql_table_name_in_lvalue1030);
                    plsql_table_name180=plsql_table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_name180.getTree());

                    LPAREN181=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lvalue1032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN181_tree = 
                    (Object)adaptor.create(LPAREN181)
                    ;
                    adaptor.addChild(root_0, LPAREN181_tree);
                    }

                    pushFollow(FOLLOW_subscript_in_lvalue1034);
                    subscript182=subscript();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subscript182.getTree());

                    RPAREN183=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lvalue1036); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN183_tree = 
                    (Object)adaptor.create(RPAREN183)
                    ;
                    adaptor.addChild(root_0, RPAREN183_tree);
                    }

                    // antlr3/PLSQL3.g:200:45: ( DOT field_name )*
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==DOT) ) {
                            alt37=1;
                        }


                        switch (alt37) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:200:47: DOT field_name
                    	    {
                    	    DOT184=(Token)match(input,DOT,FOLLOW_DOT_in_lvalue1040); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT184_tree = 
                    	    (Object)adaptor.create(DOT184)
                    	    ;
                    	    adaptor.addChild(root_0, DOT184_tree);
                    	    }

                    	    pushFollow(FOLLOW_field_name_in_lvalue1042);
                    	    field_name185=field_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name185.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:201:4: COLON host_variable ( COLON host_variable )?
                    {
                    root_0 = (Object)adaptor.nil();


                    COLON186=(Token)match(input,COLON,FOLLOW_COLON_in_lvalue1050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON186_tree = 
                    (Object)adaptor.create(COLON186)
                    ;
                    adaptor.addChild(root_0, COLON186_tree);
                    }

                    pushFollow(FOLLOW_host_variable_in_lvalue1052);
                    host_variable187=host_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, host_variable187.getTree());

                    // antlr3/PLSQL3.g:201:24: ( COLON host_variable )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==COLON) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // antlr3/PLSQL3.g:201:26: COLON host_variable
                            {
                            COLON188=(Token)match(input,COLON,FOLLOW_COLON_in_lvalue1056); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON188_tree = 
                            (Object)adaptor.create(COLON188)
                            ;
                            adaptor.addChild(root_0, COLON188_tree);
                            }

                            pushFollow(FOLLOW_host_variable_in_lvalue1058);
                            host_variable189=host_variable();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, host_variable189.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 21, lvalue_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // antlr3/PLSQL3.g:204:1: field_name : identifier ;
    public final PLSQL3Parser.field_name_return field_name() throws RecognitionException {
        PLSQL3Parser.field_name_return retval = new PLSQL3Parser.field_name_return();
        retval.start = input.LT(1);

        int field_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier190 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // antlr3/PLSQL3.g:205:2: ( identifier )
            // antlr3/PLSQL3.g:205:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_field_name1072);
            identifier190=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier190.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 22, field_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class subscript_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subscript"
    // antlr3/PLSQL3.g:208:1: subscript : plsql_expression ;
    public final PLSQL3Parser.subscript_return subscript() throws RecognitionException {
        PLSQL3Parser.subscript_return retval = new PLSQL3Parser.subscript_return();
        retval.start = input.LT(1);

        int subscript_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.plsql_expression_return plsql_expression191 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // antlr3/PLSQL3.g:209:2: ( plsql_expression )
            // antlr3/PLSQL3.g:209:4: plsql_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_expression_in_subscript1084);
            plsql_expression191=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression191.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 23, subscript_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "subscript"


    public static class host_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "host_variable"
    // antlr3/PLSQL3.g:212:1: host_variable : identifier ;
    public final PLSQL3Parser.host_variable_return host_variable() throws RecognitionException {
        PLSQL3Parser.host_variable_return retval = new PLSQL3Parser.host_variable_return();
        retval.start = input.LT(1);

        int host_variable_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier192 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // antlr3/PLSQL3.g:213:2: ( identifier )
            // antlr3/PLSQL3.g:213:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_host_variable1097);
            identifier192=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier192.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 24, host_variable_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "host_variable"


    public static class goto_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_statement"
    // antlr3/PLSQL3.g:216:1: goto_statement : 'GOTO' label_name ;
    public final PLSQL3Parser.goto_statement_return goto_statement() throws RecognitionException {
        PLSQL3Parser.goto_statement_return retval = new PLSQL3Parser.goto_statement_return();
        retval.start = input.LT(1);

        int goto_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal193=null;
        PLSQL3Parser.label_name_return label_name194 =null;


        Object string_literal193_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // antlr3/PLSQL3.g:217:2: ( 'GOTO' label_name )
            // antlr3/PLSQL3.g:217:4: 'GOTO' label_name
            {
            root_0 = (Object)adaptor.nil();


            string_literal193=(Token)match(input,95,FOLLOW_95_in_goto_statement1109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal193_tree = 
            (Object)adaptor.create(string_literal193)
            ;
            adaptor.addChild(root_0, string_literal193_tree);
            }

            pushFollow(FOLLOW_label_name_in_goto_statement1111);
            label_name194=label_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name194.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 25, goto_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "goto_statement"


    public static class label_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "label_name"
    // antlr3/PLSQL3.g:220:1: label_name : identifier ;
    public final PLSQL3Parser.label_name_return label_name() throws RecognitionException {
        PLSQL3Parser.label_name_return retval = new PLSQL3Parser.label_name_return();
        retval.start = input.LT(1);

        int label_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier195 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // antlr3/PLSQL3.g:221:2: ( identifier )
            // antlr3/PLSQL3.g:221:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_label_name1123);
            identifier195=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier195.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 26, label_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "label_name"


    public static class exit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exit_statement"
    // antlr3/PLSQL3.g:224:1: exit_statement : keyEXIT ( label_name )? ( 'WHEN' plsql_condition )? ;
    public final PLSQL3Parser.exit_statement_return exit_statement() throws RecognitionException {
        PLSQL3Parser.exit_statement_return retval = new PLSQL3Parser.exit_statement_return();
        retval.start = input.LT(1);

        int exit_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal198=null;
        PLSQL3Parser.keyEXIT_return keyEXIT196 =null;

        PLSQL3Parser.label_name_return label_name197 =null;

        PLSQL3Parser.plsql_condition_return plsql_condition199 =null;


        Object string_literal198_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // antlr3/PLSQL3.g:225:2: ( keyEXIT ( label_name )? ( 'WHEN' plsql_condition )? )
            // antlr3/PLSQL3.g:225:4: keyEXIT ( label_name )? ( 'WHEN' plsql_condition )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyEXIT_in_exit_statement1135);
            keyEXIT196=keyEXIT();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEXIT196.getTree());

            // antlr3/PLSQL3.g:225:12: ( label_name )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==DOUBLEQUOTED_STRING||LA40_0==ID) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // antlr3/PLSQL3.g:225:14: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_exit_statement1139);
                    label_name197=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name197.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:225:28: ( 'WHEN' plsql_condition )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==164) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // antlr3/PLSQL3.g:225:30: 'WHEN' plsql_condition
                    {
                    string_literal198=(Token)match(input,164,FOLLOW_164_in_exit_statement1146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal198_tree = 
                    (Object)adaptor.create(string_literal198)
                    ;
                    adaptor.addChild(root_0, string_literal198_tree);
                    }

                    pushFollow(FOLLOW_plsql_condition_in_exit_statement1148);
                    plsql_condition199=plsql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition199.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 27, exit_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exit_statement"


    public static class datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "datatype"
    // antlr3/PLSQL3.g:228:1: datatype : ( 'BINARY_INTEGER' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' | 'NATURAL' | 'POSITIVE' | ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )? | 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )? | 'RAW' ( LPAREN NUMBER RPAREN )? | 'BOOLEAN' | 'DATE' | keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? | keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH | ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )? | 'INTEGER' | 'INT' | 'SMALLINT' | 'FLOAT' ( LPAREN NUMBER RPAREN )? | 'REAL' | 'DOUBLE' keyPRECISION | 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NVARCHAR' ( LPAREN NUMBER RPAREN )? | 'NVARCHAR2' ( LPAREN NUMBER RPAREN )? | 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'MLSLABEL' | 'PLS_INTEGER' | 'BLOB' | 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'NCLOB' | 'BFILE' | 'ROWID' | 'UROWID' ( LPAREN NUMBER RPAREN )? );
    public final PLSQL3Parser.datatype_return datatype() throws RecognitionException {
        PLSQL3Parser.datatype_return retval = new PLSQL3Parser.datatype_return();
        retval.start = input.LT(1);

        int datatype_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal200=null;
        Token string_literal201=null;
        Token string_literal202=null;
        Token string_literal203=null;
        Token string_literal204=null;
        Token set205=null;
        Token LPAREN206=null;
        Token NUMBER207=null;
        Token COMMA208=null;
        Token NUMBER209=null;
        Token RPAREN210=null;
        Token string_literal211=null;
        Token string_literal212=null;
        Token LPAREN213=null;
        Token NUMBER214=null;
        Token RPAREN215=null;
        Token string_literal216=null;
        Token LPAREN217=null;
        Token NUMBER218=null;
        Token RPAREN219=null;
        Token string_literal220=null;
        Token string_literal221=null;
        Token LPAREN224=null;
        Token NUMBER225=null;
        Token RPAREN226=null;
        Token string_literal227=null;
        Token LPAREN229=null;
        Token NUMBER230=null;
        Token RPAREN231=null;
        Token LPAREN234=null;
        Token NUMBER235=null;
        Token RPAREN236=null;
        Token string_literal237=null;
        Token LPAREN241=null;
        Token NUMBER242=null;
        Token RPAREN243=null;
        Token string_literal244=null;
        Token string_literal248=null;
        Token string_literal249=null;
        Token string_literal250=null;
        Token string_literal251=null;
        Token LPAREN252=null;
        Token NUMBER253=null;
        Token RPAREN254=null;
        Token string_literal255=null;
        Token string_literal256=null;
        Token string_literal258=null;
        Token LPAREN260=null;
        Token NUMBER261=null;
        Token string_literal263=null;
        Token RPAREN264=null;
        Token string_literal265=null;
        Token string_literal266=null;
        Token CHARSET_ATTR269=null;
        Token string_literal270=null;
        Token LPAREN271=null;
        Token NUMBER272=null;
        Token string_literal274=null;
        Token RPAREN275=null;
        Token string_literal276=null;
        Token string_literal277=null;
        Token CHARSET_ATTR280=null;
        Token string_literal281=null;
        Token LPAREN282=null;
        Token NUMBER283=null;
        Token string_literal285=null;
        Token RPAREN286=null;
        Token string_literal287=null;
        Token string_literal288=null;
        Token CHARSET_ATTR291=null;
        Token string_literal292=null;
        Token LPAREN294=null;
        Token NUMBER295=null;
        Token RPAREN296=null;
        Token string_literal297=null;
        Token LPAREN299=null;
        Token NUMBER300=null;
        Token RPAREN301=null;
        Token string_literal302=null;
        Token LPAREN303=null;
        Token NUMBER304=null;
        Token RPAREN305=null;
        Token string_literal306=null;
        Token LPAREN307=null;
        Token NUMBER308=null;
        Token RPAREN309=null;
        Token string_literal310=null;
        Token set311=null;
        Token LPAREN313=null;
        Token NUMBER314=null;
        Token RPAREN315=null;
        Token string_literal316=null;
        Token string_literal317=null;
        Token string_literal318=null;
        Token string_literal319=null;
        Token string_literal320=null;
        Token string_literal321=null;
        Token CHARSET_ATTR324=null;
        Token string_literal325=null;
        Token string_literal326=null;
        Token string_literal327=null;
        Token string_literal328=null;
        Token LPAREN329=null;
        Token NUMBER330=null;
        Token RPAREN331=null;
        PLSQL3Parser.keyINTERVAL_return keyINTERVAL222 =null;

        PLSQL3Parser.keyDAY_return keyDAY223 =null;

        PLSQL3Parser.keySECOND_return keySECOND228 =null;

        PLSQL3Parser.keyINTERVAL_return keyINTERVAL232 =null;

        PLSQL3Parser.keyYEAR_return keyYEAR233 =null;

        PLSQL3Parser.keyMONTH_return keyMONTH238 =null;

        PLSQL3Parser.keyTIME_return keyTIME239 =null;

        PLSQL3Parser.keyTIMESTAMP_return keyTIMESTAMP240 =null;

        PLSQL3Parser.keyLOCAL_return keyLOCAL245 =null;

        PLSQL3Parser.keyTIME_return keyTIME246 =null;

        PLSQL3Parser.keyZONE_return keyZONE247 =null;

        PLSQL3Parser.keyPRECISION_return keyPRECISION257 =null;

        PLSQL3Parser.keyVARYING_return keyVARYING259 =null;

        PLSQL3Parser.keyBYTE_return keyBYTE262 =null;

        PLSQL3Parser.identifier_return identifier267 =null;

        PLSQL3Parser.column_spec_return column_spec268 =null;

        PLSQL3Parser.keyBYTE_return keyBYTE273 =null;

        PLSQL3Parser.identifier_return identifier278 =null;

        PLSQL3Parser.column_spec_return column_spec279 =null;

        PLSQL3Parser.keyBYTE_return keyBYTE284 =null;

        PLSQL3Parser.identifier_return identifier289 =null;

        PLSQL3Parser.column_spec_return column_spec290 =null;

        PLSQL3Parser.keyVARYING_return keyVARYING293 =null;

        PLSQL3Parser.keyVARYING_return keyVARYING298 =null;

        PLSQL3Parser.keyVARYING_return keyVARYING312 =null;

        PLSQL3Parser.identifier_return identifier322 =null;

        PLSQL3Parser.column_spec_return column_spec323 =null;


        Object string_literal200_tree=null;
        Object string_literal201_tree=null;
        Object string_literal202_tree=null;
        Object string_literal203_tree=null;
        Object string_literal204_tree=null;
        Object set205_tree=null;
        Object LPAREN206_tree=null;
        Object NUMBER207_tree=null;
        Object COMMA208_tree=null;
        Object NUMBER209_tree=null;
        Object RPAREN210_tree=null;
        Object string_literal211_tree=null;
        Object string_literal212_tree=null;
        Object LPAREN213_tree=null;
        Object NUMBER214_tree=null;
        Object RPAREN215_tree=null;
        Object string_literal216_tree=null;
        Object LPAREN217_tree=null;
        Object NUMBER218_tree=null;
        Object RPAREN219_tree=null;
        Object string_literal220_tree=null;
        Object string_literal221_tree=null;
        Object LPAREN224_tree=null;
        Object NUMBER225_tree=null;
        Object RPAREN226_tree=null;
        Object string_literal227_tree=null;
        Object LPAREN229_tree=null;
        Object NUMBER230_tree=null;
        Object RPAREN231_tree=null;
        Object LPAREN234_tree=null;
        Object NUMBER235_tree=null;
        Object RPAREN236_tree=null;
        Object string_literal237_tree=null;
        Object LPAREN241_tree=null;
        Object NUMBER242_tree=null;
        Object RPAREN243_tree=null;
        Object string_literal244_tree=null;
        Object string_literal248_tree=null;
        Object string_literal249_tree=null;
        Object string_literal250_tree=null;
        Object string_literal251_tree=null;
        Object LPAREN252_tree=null;
        Object NUMBER253_tree=null;
        Object RPAREN254_tree=null;
        Object string_literal255_tree=null;
        Object string_literal256_tree=null;
        Object string_literal258_tree=null;
        Object LPAREN260_tree=null;
        Object NUMBER261_tree=null;
        Object string_literal263_tree=null;
        Object RPAREN264_tree=null;
        Object string_literal265_tree=null;
        Object string_literal266_tree=null;
        Object CHARSET_ATTR269_tree=null;
        Object string_literal270_tree=null;
        Object LPAREN271_tree=null;
        Object NUMBER272_tree=null;
        Object string_literal274_tree=null;
        Object RPAREN275_tree=null;
        Object string_literal276_tree=null;
        Object string_literal277_tree=null;
        Object CHARSET_ATTR280_tree=null;
        Object string_literal281_tree=null;
        Object LPAREN282_tree=null;
        Object NUMBER283_tree=null;
        Object string_literal285_tree=null;
        Object RPAREN286_tree=null;
        Object string_literal287_tree=null;
        Object string_literal288_tree=null;
        Object CHARSET_ATTR291_tree=null;
        Object string_literal292_tree=null;
        Object LPAREN294_tree=null;
        Object NUMBER295_tree=null;
        Object RPAREN296_tree=null;
        Object string_literal297_tree=null;
        Object LPAREN299_tree=null;
        Object NUMBER300_tree=null;
        Object RPAREN301_tree=null;
        Object string_literal302_tree=null;
        Object LPAREN303_tree=null;
        Object NUMBER304_tree=null;
        Object RPAREN305_tree=null;
        Object string_literal306_tree=null;
        Object LPAREN307_tree=null;
        Object NUMBER308_tree=null;
        Object RPAREN309_tree=null;
        Object string_literal310_tree=null;
        Object set311_tree=null;
        Object LPAREN313_tree=null;
        Object NUMBER314_tree=null;
        Object RPAREN315_tree=null;
        Object string_literal316_tree=null;
        Object string_literal317_tree=null;
        Object string_literal318_tree=null;
        Object string_literal319_tree=null;
        Object string_literal320_tree=null;
        Object string_literal321_tree=null;
        Object CHARSET_ATTR324_tree=null;
        Object string_literal325_tree=null;
        Object string_literal326_tree=null;
        Object string_literal327_tree=null;
        Object string_literal328_tree=null;
        Object LPAREN329_tree=null;
        Object NUMBER330_tree=null;
        Object RPAREN331_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // antlr3/PLSQL3.g:229:2: ( 'BINARY_INTEGER' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' | 'NATURAL' | 'POSITIVE' | ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )? | 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )? | 'RAW' ( LPAREN NUMBER RPAREN )? | 'BOOLEAN' | 'DATE' | keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? | keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH | ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )? | 'INTEGER' | 'INT' | 'SMALLINT' | 'FLOAT' ( LPAREN NUMBER RPAREN )? | 'REAL' | 'DOUBLE' keyPRECISION | 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NVARCHAR' ( LPAREN NUMBER RPAREN )? | 'NVARCHAR2' ( LPAREN NUMBER RPAREN )? | 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'MLSLABEL' | 'PLS_INTEGER' | 'BLOB' | 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'NCLOB' | 'BFILE' | 'ROWID' | 'UROWID' ( LPAREN NUMBER RPAREN )? )
            int alt79=35;
            switch ( input.LA(1) ) {
            case 61:
                {
                alt79=1;
                }
                break;
            case 60:
                {
                alt79=2;
                }
                break;
            case 59:
                {
                alt79=3;
                }
                break;
            case 115:
                {
                alt79=4;
                }
                break;
            case 132:
                {
                alt79=5;
                }
                break;
            case 75:
            case 76:
            case 121:
            case 122:
                {
                alt79=6;
                }
                break;
            case 109:
                {
                alt79=7;
                }
                break;
            case 137:
                {
                alt79=8;
                }
                break;
            case 63:
                {
                alt79=9;
                }
                break;
            case 74:
                {
                alt79=10;
                }
                break;
            case ID:
                {
                int LA79_11 = input.LA(2);

                if ( (LA79_11==ID) ) {
                    switch ( input.LA(3) ) {
                    case LPAREN:
                        {
                        int LA79_36 = input.LA(4);

                        if ( (LA79_36==NUMBER) ) {
                            int LA79_38 = input.LA(5);

                            if ( (LA79_38==RPAREN) ) {
                                int LA79_40 = input.LA(6);

                                if ( (LA79_40==155) ) {
                                    int LA79_37 = input.LA(7);

                                    if ( (LA79_37==ID) ) {
                                        int LA79_39 = input.LA(8);

                                        if ( (((synpred114_PLSQL3()&&synpred114_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("INTERVAL")))) ) {
                                            alt79=11;
                                        }
                                        else if ( (((synpred116_PLSQL3()&&synpred116_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("INTERVAL")))) ) {
                                            alt79=12;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 79, 39, input);

                                            throw nvae;

                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 79, 37, input);

                                        throw nvae;

                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 79, 40, input);

                                    throw nvae;

                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 79, 38, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 79, 36, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 155:
                        {
                        int LA79_37 = input.LA(4);

                        if ( (LA79_37==ID) ) {
                            int LA79_39 = input.LA(5);

                            if ( (((synpred114_PLSQL3()&&synpred114_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("INTERVAL")))) ) {
                                alt79=11;
                            }
                            else if ( (((synpred116_PLSQL3()&&synpred116_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("INTERVAL")))) ) {
                                alt79=12;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 79, 39, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 79, 37, input);

                            throw nvae;

                        }
                        }
                        break;
                    case DOT:
                    case DOUBLEQUOTED_STRING:
                    case ID:
                    case MINUS:
                    case NUMBER:
                    case PLUS:
                    case QUOTED_STRING:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 66:
                    case 67:
                    case 68:
                    case 72:
                    case 74:
                    case 75:
                    case 76:
                    case 82:
                    case 86:
                    case 91:
                    case 102:
                    case 103:
                    case 109:
                    case 112:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 131:
                    case 132:
                    case 137:
                    case 138:
                    case 144:
                    case 150:
                    case 160:
                    case 162:
                    case 163:
                        {
                        alt79=13;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 79, 34, input);

                        throw nvae;

                    }

                }
                else if ( (LA79_11==EOF||LA79_11==ASSIGN||LA79_11==COMMA||LA79_11==DOUBLEQUOTED_STRING||LA79_11==LPAREN||(LA79_11 >= RPAREN && LA79_11 <= SEMI)||LA79_11==53||LA79_11==56||LA79_11==73||LA79_11==78||LA79_11==85||LA79_11==94||LA79_11==100||LA79_11==106||LA79_11==118||LA79_11==133||LA79_11==135||LA79_11==167) ) {
                    alt79=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 79, 11, input);

                    throw nvae;

                }
                }
                break;
            case 103:
                {
                alt79=14;
                }
                break;
            case 102:
                {
                alt79=15;
                }
                break;
            case 150:
                {
                alt79=16;
                }
                break;
            case 91:
                {
                alt79=17;
                }
                break;
            case 138:
                {
                alt79=18;
                }
                break;
            case 82:
                {
                alt79=19;
                }
                break;
            case 66:
                {
                alt79=20;
                }
                break;
            case 162:
                {
                alt79=21;
                }
                break;
            case 163:
                {
                alt79=22;
                }
                break;
            case 67:
                {
                alt79=23;
                }
                break;
            case 116:
                {
                alt79=24;
                }
                break;
            case 123:
                {
                alt79=25;
                }
                break;
            case 124:
                {
                alt79=26;
                }
                break;
            case 114:
                {
                alt79=27;
                }
                break;
            case 112:
                {
                alt79=28;
                }
                break;
            case 131:
                {
                alt79=29;
                }
                break;
            case 62:
                {
                alt79=30;
                }
                break;
            case 68:
                {
                alt79=31;
                }
                break;
            case 117:
                {
                alt79=32;
                }
                break;
            case 58:
                {
                alt79=33;
                }
                break;
            case 144:
                {
                alt79=34;
                }
                break;
            case 160:
                {
                alt79=35;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }

            switch (alt79) {
                case 1 :
                    // antlr3/PLSQL3.g:229:4: 'BINARY_INTEGER'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal200=(Token)match(input,61,FOLLOW_61_in_datatype1163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal200_tree = 
                    (Object)adaptor.create(string_literal200)
                    ;
                    adaptor.addChild(root_0, string_literal200_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:230:4: 'BINARY_FLOAT'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal201=(Token)match(input,60,FOLLOW_60_in_datatype1169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal201_tree = 
                    (Object)adaptor.create(string_literal201)
                    ;
                    adaptor.addChild(root_0, string_literal201_tree);
                    }

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:231:4: 'BINARY_DOUBLE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal202=(Token)match(input,59,FOLLOW_59_in_datatype1174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal202_tree = 
                    (Object)adaptor.create(string_literal202)
                    ;
                    adaptor.addChild(root_0, string_literal202_tree);
                    }

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:232:4: 'NATURAL'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal203=(Token)match(input,115,FOLLOW_115_in_datatype1179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal203_tree = 
                    (Object)adaptor.create(string_literal203)
                    ;
                    adaptor.addChild(root_0, string_literal203_tree);
                    }

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:233:4: 'POSITIVE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal204=(Token)match(input,132,FOLLOW_132_in_datatype1185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal204_tree = 
                    (Object)adaptor.create(string_literal204)
                    ;
                    adaptor.addChild(root_0, string_literal204_tree);
                    }

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:234:4: ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    set205=(Token)input.LT(1);

                    if ( (input.LA(1) >= 75 && input.LA(1) <= 76)||(input.LA(1) >= 121 && input.LA(1) <= 122) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set205)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // antlr3/PLSQL3.g:234:49: ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==LPAREN) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // antlr3/PLSQL3.g:234:51: LPAREN NUMBER ( COMMA NUMBER )? RPAREN
                            {
                            LPAREN206=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1211); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN206_tree = 
                            (Object)adaptor.create(LPAREN206)
                            ;
                            adaptor.addChild(root_0, LPAREN206_tree);
                            }

                            NUMBER207=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1213); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER207_tree = 
                            (Object)adaptor.create(NUMBER207)
                            ;
                            adaptor.addChild(root_0, NUMBER207_tree);
                            }

                            // antlr3/PLSQL3.g:234:65: ( COMMA NUMBER )?
                            int alt42=2;
                            int LA42_0 = input.LA(1);

                            if ( (LA42_0==COMMA) ) {
                                alt42=1;
                            }
                            switch (alt42) {
                                case 1 :
                                    // antlr3/PLSQL3.g:234:67: COMMA NUMBER
                                    {
                                    COMMA208=(Token)match(input,COMMA,FOLLOW_COMMA_in_datatype1217); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    COMMA208_tree = 
                                    (Object)adaptor.create(COMMA208)
                                    ;
                                    adaptor.addChild(root_0, COMMA208_tree);
                                    }

                                    NUMBER209=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1219); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NUMBER209_tree = 
                                    (Object)adaptor.create(NUMBER209)
                                    ;
                                    adaptor.addChild(root_0, NUMBER209_tree);
                                    }

                                    }
                                    break;

                            }


                            RPAREN210=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1224); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN210_tree = 
                            (Object)adaptor.create(RPAREN210)
                            ;
                            adaptor.addChild(root_0, RPAREN210_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // antlr3/PLSQL3.g:235:4: 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal211=(Token)match(input,109,FOLLOW_109_in_datatype1232); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal211_tree = 
                    (Object)adaptor.create(string_literal211)
                    ;
                    adaptor.addChild(root_0, string_literal211_tree);
                    }

                    // antlr3/PLSQL3.g:235:11: ( 'RAW' )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==137) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // antlr3/PLSQL3.g:235:13: 'RAW'
                            {
                            string_literal212=(Token)match(input,137,FOLLOW_137_in_datatype1236); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal212_tree = 
                            (Object)adaptor.create(string_literal212)
                            ;
                            adaptor.addChild(root_0, string_literal212_tree);
                            }

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:235:21: ( LPAREN NUMBER RPAREN )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==LPAREN) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // antlr3/PLSQL3.g:235:23: LPAREN NUMBER RPAREN
                            {
                            LPAREN213=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1242); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN213_tree = 
                            (Object)adaptor.create(LPAREN213)
                            ;
                            adaptor.addChild(root_0, LPAREN213_tree);
                            }

                            NUMBER214=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1244); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER214_tree = 
                            (Object)adaptor.create(NUMBER214)
                            ;
                            adaptor.addChild(root_0, NUMBER214_tree);
                            }

                            RPAREN215=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1246); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN215_tree = 
                            (Object)adaptor.create(RPAREN215)
                            ;
                            adaptor.addChild(root_0, RPAREN215_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // antlr3/PLSQL3.g:236:4: 'RAW' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal216=(Token)match(input,137,FOLLOW_137_in_datatype1254); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal216_tree = 
                    (Object)adaptor.create(string_literal216)
                    ;
                    adaptor.addChild(root_0, string_literal216_tree);
                    }

                    // antlr3/PLSQL3.g:236:10: ( LPAREN NUMBER RPAREN )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==LPAREN) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // antlr3/PLSQL3.g:236:12: LPAREN NUMBER RPAREN
                            {
                            LPAREN217=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1258); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN217_tree = 
                            (Object)adaptor.create(LPAREN217)
                            ;
                            adaptor.addChild(root_0, LPAREN217_tree);
                            }

                            NUMBER218=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1260); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER218_tree = 
                            (Object)adaptor.create(NUMBER218)
                            ;
                            adaptor.addChild(root_0, NUMBER218_tree);
                            }

                            RPAREN219=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1262); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN219_tree = 
                            (Object)adaptor.create(RPAREN219)
                            ;
                            adaptor.addChild(root_0, RPAREN219_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // antlr3/PLSQL3.g:237:4: 'BOOLEAN'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal220=(Token)match(input,63,FOLLOW_63_in_datatype1270); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal220_tree = 
                    (Object)adaptor.create(string_literal220)
                    ;
                    adaptor.addChild(root_0, string_literal220_tree);
                    }

                    }
                    break;
                case 10 :
                    // antlr3/PLSQL3.g:238:4: 'DATE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal221=(Token)match(input,74,FOLLOW_74_in_datatype1275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal221_tree = 
                    (Object)adaptor.create(string_literal221)
                    ;
                    adaptor.addChild(root_0, string_literal221_tree);
                    }

                    }
                    break;
                case 11 :
                    // antlr3/PLSQL3.g:239:4: keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_keyINTERVAL_in_datatype1280);
                    keyINTERVAL222=keyINTERVAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINTERVAL222.getTree());

                    pushFollow(FOLLOW_keyDAY_in_datatype1282);
                    keyDAY223=keyDAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDAY223.getTree());

                    // antlr3/PLSQL3.g:239:23: ( LPAREN NUMBER RPAREN )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==LPAREN) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // antlr3/PLSQL3.g:239:25: LPAREN NUMBER RPAREN
                            {
                            LPAREN224=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1286); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN224_tree = 
                            (Object)adaptor.create(LPAREN224)
                            ;
                            adaptor.addChild(root_0, LPAREN224_tree);
                            }

                            NUMBER225=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1288); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER225_tree = 
                            (Object)adaptor.create(NUMBER225)
                            ;
                            adaptor.addChild(root_0, NUMBER225_tree);
                            }

                            RPAREN226=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1290); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN226_tree = 
                            (Object)adaptor.create(RPAREN226)
                            ;
                            adaptor.addChild(root_0, RPAREN226_tree);
                            }

                            }
                            break;

                    }


                    string_literal227=(Token)match(input,155,FOLLOW_155_in_datatype1295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal227_tree = 
                    (Object)adaptor.create(string_literal227)
                    ;
                    adaptor.addChild(root_0, string_literal227_tree);
                    }

                    pushFollow(FOLLOW_keySECOND_in_datatype1297);
                    keySECOND228=keySECOND();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySECOND228.getTree());

                    // antlr3/PLSQL3.g:239:64: ( LPAREN NUMBER RPAREN )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==LPAREN) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // antlr3/PLSQL3.g:239:66: LPAREN NUMBER RPAREN
                            {
                            LPAREN229=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1301); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN229_tree = 
                            (Object)adaptor.create(LPAREN229)
                            ;
                            adaptor.addChild(root_0, LPAREN229_tree);
                            }

                            NUMBER230=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1303); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER230_tree = 
                            (Object)adaptor.create(NUMBER230)
                            ;
                            adaptor.addChild(root_0, NUMBER230_tree);
                            }

                            RPAREN231=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1305); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN231_tree = 
                            (Object)adaptor.create(RPAREN231)
                            ;
                            adaptor.addChild(root_0, RPAREN231_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 12 :
                    // antlr3/PLSQL3.g:240:4: keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_keyINTERVAL_in_datatype1313);
                    keyINTERVAL232=keyINTERVAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINTERVAL232.getTree());

                    pushFollow(FOLLOW_keyYEAR_in_datatype1315);
                    keyYEAR233=keyYEAR();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyYEAR233.getTree());

                    // antlr3/PLSQL3.g:240:24: ( LPAREN NUMBER RPAREN )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==LPAREN) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // antlr3/PLSQL3.g:240:26: LPAREN NUMBER RPAREN
                            {
                            LPAREN234=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1319); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN234_tree = 
                            (Object)adaptor.create(LPAREN234)
                            ;
                            adaptor.addChild(root_0, LPAREN234_tree);
                            }

                            NUMBER235=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1321); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER235_tree = 
                            (Object)adaptor.create(NUMBER235)
                            ;
                            adaptor.addChild(root_0, NUMBER235_tree);
                            }

                            RPAREN236=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1323); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN236_tree = 
                            (Object)adaptor.create(RPAREN236)
                            ;
                            adaptor.addChild(root_0, RPAREN236_tree);
                            }

                            }
                            break;

                    }


                    string_literal237=(Token)match(input,155,FOLLOW_155_in_datatype1328); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal237_tree = 
                    (Object)adaptor.create(string_literal237)
                    ;
                    adaptor.addChild(root_0, string_literal237_tree);
                    }

                    pushFollow(FOLLOW_keyMONTH_in_datatype1330);
                    keyMONTH238=keyMONTH();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMONTH238.getTree());

                    }
                    break;
                case 13 :
                    // antlr3/PLSQL3.g:241:4: ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // antlr3/PLSQL3.g:241:4: ( keyTIME | keyTIMESTAMP )
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==ID) ) {
                        int LA50_1 = input.LA(2);

                        if ( ((((input.LT(1).getText().equalsIgnoreCase("TIME"))&&(input.LT(1).getText().equalsIgnoreCase("TIME")))&&synpred117_PLSQL3())) ) {
                            alt50=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("TIMESTAMP"))) ) {
                            alt50=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 50, 0, input);

                        throw nvae;

                    }
                    switch (alt50) {
                        case 1 :
                            // antlr3/PLSQL3.g:241:6: keyTIME
                            {
                            pushFollow(FOLLOW_keyTIME_in_datatype1337);
                            keyTIME239=keyTIME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIME239.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:241:16: keyTIMESTAMP
                            {
                            pushFollow(FOLLOW_keyTIMESTAMP_in_datatype1341);
                            keyTIMESTAMP240=keyTIMESTAMP();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIMESTAMP240.getTree());

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:241:31: ( LPAREN NUMBER RPAREN )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==LPAREN) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // antlr3/PLSQL3.g:241:33: LPAREN NUMBER RPAREN
                            {
                            LPAREN241=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1347); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN241_tree = 
                            (Object)adaptor.create(LPAREN241)
                            ;
                            adaptor.addChild(root_0, LPAREN241_tree);
                            }

                            NUMBER242=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1349); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER242_tree = 
                            (Object)adaptor.create(NUMBER242)
                            ;
                            adaptor.addChild(root_0, NUMBER242_tree);
                            }

                            RPAREN243=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1351); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN243_tree = 
                            (Object)adaptor.create(RPAREN243)
                            ;
                            adaptor.addChild(root_0, RPAREN243_tree);
                            }

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:241:57: ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==167) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // antlr3/PLSQL3.g:241:59: 'WITH' ( keyLOCAL )? keyTIME keyZONE
                            {
                            string_literal244=(Token)match(input,167,FOLLOW_167_in_datatype1358); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal244_tree = 
                            (Object)adaptor.create(string_literal244)
                            ;
                            adaptor.addChild(root_0, string_literal244_tree);
                            }

                            // antlr3/PLSQL3.g:241:66: ( keyLOCAL )?
                            int alt52=2;
                            int LA52_0 = input.LA(1);

                            if ( (LA52_0==ID) ) {
                                int LA52_1 = input.LA(2);

                                if ( (LA52_1==ID) ) {
                                    int LA52_2 = input.LA(3);

                                    if ( (LA52_2==ID) ) {
                                        switch ( input.LA(4) ) {
                                            case EOF:
                                            case ASSIGN:
                                            case COMMA:
                                            case RPAREN:
                                            case SEMI:
                                            case 53:
                                            case 56:
                                            case 73:
                                            case 78:
                                            case 85:
                                            case 94:
                                            case 100:
                                            case 106:
                                            case 118:
                                            case 133:
                                            case 135:
                                                {
                                                alt52=1;
                                                }
                                                break;
                                            case ID:
                                                {
                                                switch ( input.LA(5) ) {
                                                    case DOUBLEQUOTED_STRING:
                                                    case MINUS:
                                                    case NUMBER:
                                                    case PLUS:
                                                    case QUOTED_STRING:
                                                    case 58:
                                                    case 59:
                                                    case 60:
                                                    case 61:
                                                    case 62:
                                                    case 63:
                                                    case 66:
                                                    case 67:
                                                    case 68:
                                                    case 72:
                                                    case 74:
                                                    case 75:
                                                    case 76:
                                                    case 82:
                                                    case 86:
                                                    case 91:
                                                    case 102:
                                                    case 103:
                                                    case 109:
                                                    case 112:
                                                    case 114:
                                                    case 115:
                                                    case 116:
                                                    case 117:
                                                    case 121:
                                                    case 122:
                                                    case 123:
                                                    case 124:
                                                    case 131:
                                                    case 132:
                                                    case 137:
                                                    case 138:
                                                    case 144:
                                                    case 150:
                                                    case 160:
                                                    case 162:
                                                    case 163:
                                                        {
                                                        alt52=1;
                                                        }
                                                        break;
                                                    case ID:
                                                        {
                                                        int LA52_8 = input.LA(6);

                                                        if ( (LA52_8==ASSIGN||LA52_8==AT_SIGN||LA52_8==DOT||LA52_8==ID||LA52_8==ROWTYPE_ATTR||LA52_8==SEMI||LA52_8==TYPE_ATTR||LA52_8==78||LA52_8==106||LA52_8==118||LA52_8==140||LA52_8==167) ) {
                                                            alt52=1;
                                                        }
                                                        else if ( (LA52_8==LPAREN) ) {
                                                            int LA52_10 = input.LA(7);

                                                            if ( (LA52_10==NUMBER) ) {
                                                                int LA52_12 = input.LA(8);

                                                                if ( (LA52_12==RPAREN) ) {
                                                                    int LA52_13 = input.LA(9);

                                                                    if ( (LA52_13==ASSIGN||LA52_13==SEMI||LA52_13==78||LA52_13==106||LA52_13==118||LA52_13==167) ) {
                                                                        alt52=1;
                                                                    }
                                                                }
                                                            }
                                                            else if ( (LA52_10==DOUBLEQUOTED_STRING||LA52_10==ID) ) {
                                                                alt52=1;
                                                            }
                                                        }
                                                        }
                                                        break;
                                                    case DOT:
                                                        {
                                                        int LA52_9 = input.LA(6);

                                                        if ( (LA52_9==DOUBLEQUOTED_STRING||LA52_9==ID) ) {
                                                            int LA52_11 = input.LA(7);

                                                            if ( (LA52_11==86) ) {
                                                                alt52=1;
                                                            }
                                                        }
                                                        }
                                                        break;
                                                }

                                                }
                                                break;
                                            case DOUBLEQUOTED_STRING:
                                                {
                                                int LA52_7 = input.LA(5);

                                                if ( (LA52_7==DOUBLEQUOTED_STRING||LA52_7==ID||(LA52_7 >= 58 && LA52_7 <= 63)||(LA52_7 >= 66 && LA52_7 <= 68)||LA52_7==72||(LA52_7 >= 74 && LA52_7 <= 76)||LA52_7==82||LA52_7==86||LA52_7==91||(LA52_7 >= 102 && LA52_7 <= 103)||LA52_7==109||LA52_7==112||(LA52_7 >= 114 && LA52_7 <= 117)||(LA52_7 >= 121 && LA52_7 <= 124)||(LA52_7 >= 131 && LA52_7 <= 132)||(LA52_7 >= 137 && LA52_7 <= 138)||LA52_7==144||LA52_7==150||LA52_7==160||(LA52_7 >= 162 && LA52_7 <= 163)) ) {
                                                    alt52=1;
                                                }
                                                else if ( (LA52_7==DOT) ) {
                                                    int LA52_9 = input.LA(6);

                                                    if ( (LA52_9==DOUBLEQUOTED_STRING||LA52_9==ID) ) {
                                                        int LA52_11 = input.LA(7);

                                                        if ( (LA52_11==86) ) {
                                                            alt52=1;
                                                        }
                                                    }
                                                }
                                                }
                                                break;
                                        }

                                    }
                                }
                            }
                            switch (alt52) {
                                case 1 :
                                    // antlr3/PLSQL3.g:241:68: keyLOCAL
                                    {
                                    pushFollow(FOLLOW_keyLOCAL_in_datatype1362);
                                    keyLOCAL245=keyLOCAL();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOCAL245.getTree());

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_keyTIME_in_datatype1367);
                            keyTIME246=keyTIME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIME246.getTree());

                            pushFollow(FOLLOW_keyZONE_in_datatype1369);
                            keyZONE247=keyZONE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyZONE247.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 14 :
                    // antlr3/PLSQL3.g:242:4: 'INTEGER'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal248=(Token)match(input,103,FOLLOW_103_in_datatype1376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal248_tree = 
                    (Object)adaptor.create(string_literal248)
                    ;
                    adaptor.addChild(root_0, string_literal248_tree);
                    }

                    }
                    break;
                case 15 :
                    // antlr3/PLSQL3.g:243:4: 'INT'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal249=(Token)match(input,102,FOLLOW_102_in_datatype1381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal249_tree = 
                    (Object)adaptor.create(string_literal249)
                    ;
                    adaptor.addChild(root_0, string_literal249_tree);
                    }

                    }
                    break;
                case 16 :
                    // antlr3/PLSQL3.g:244:4: 'SMALLINT'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal250=(Token)match(input,150,FOLLOW_150_in_datatype1386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal250_tree = 
                    (Object)adaptor.create(string_literal250)
                    ;
                    adaptor.addChild(root_0, string_literal250_tree);
                    }

                    }
                    break;
                case 17 :
                    // antlr3/PLSQL3.g:245:4: 'FLOAT' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal251=(Token)match(input,91,FOLLOW_91_in_datatype1391); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal251_tree = 
                    (Object)adaptor.create(string_literal251)
                    ;
                    adaptor.addChild(root_0, string_literal251_tree);
                    }

                    // antlr3/PLSQL3.g:245:12: ( LPAREN NUMBER RPAREN )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==LPAREN) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // antlr3/PLSQL3.g:245:14: LPAREN NUMBER RPAREN
                            {
                            LPAREN252=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1395); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN252_tree = 
                            (Object)adaptor.create(LPAREN252)
                            ;
                            adaptor.addChild(root_0, LPAREN252_tree);
                            }

                            NUMBER253=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1397); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER253_tree = 
                            (Object)adaptor.create(NUMBER253)
                            ;
                            adaptor.addChild(root_0, NUMBER253_tree);
                            }

                            RPAREN254=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1399); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN254_tree = 
                            (Object)adaptor.create(RPAREN254)
                            ;
                            adaptor.addChild(root_0, RPAREN254_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 18 :
                    // antlr3/PLSQL3.g:246:4: 'REAL'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal255=(Token)match(input,138,FOLLOW_138_in_datatype1407); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal255_tree = 
                    (Object)adaptor.create(string_literal255)
                    ;
                    adaptor.addChild(root_0, string_literal255_tree);
                    }

                    }
                    break;
                case 19 :
                    // antlr3/PLSQL3.g:247:4: 'DOUBLE' keyPRECISION
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal256=(Token)match(input,82,FOLLOW_82_in_datatype1412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal256_tree = 
                    (Object)adaptor.create(string_literal256)
                    ;
                    adaptor.addChild(root_0, string_literal256_tree);
                    }

                    pushFollow(FOLLOW_keyPRECISION_in_datatype1414);
                    keyPRECISION257=keyPRECISION();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPRECISION257.getTree());

                    }
                    break;
                case 20 :
                    // antlr3/PLSQL3.g:248:4: 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal258=(Token)match(input,66,FOLLOW_66_in_datatype1419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal258_tree = 
                    (Object)adaptor.create(string_literal258)
                    ;
                    adaptor.addChild(root_0, string_literal258_tree);
                    }

                    // antlr3/PLSQL3.g:248:16: ( keyVARYING )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case EOF:
                            case ASSIGN:
                            case COMMA:
                            case LPAREN:
                            case RPAREN:
                            case SEMI:
                            case 53:
                            case 56:
                            case 73:
                            case 78:
                            case 85:
                            case 94:
                            case 100:
                            case 106:
                            case 118:
                            case 133:
                            case 135:
                                {
                                alt55=1;
                                }
                                break;
                            case 67:
                                {
                                int LA55_4 = input.LA(3);

                                if ( (LA55_4==148) ) {
                                    alt55=1;
                                }
                                }
                                break;
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case DOUBLEQUOTED_STRING:
                                    case MINUS:
                                    case NUMBER:
                                    case PLUS:
                                    case QUOTED_STRING:
                                    case 58:
                                    case 59:
                                    case 60:
                                    case 61:
                                    case 62:
                                    case 63:
                                    case 66:
                                    case 67:
                                    case 68:
                                    case 72:
                                    case 74:
                                    case 75:
                                    case 76:
                                    case 82:
                                    case 86:
                                    case 91:
                                    case 102:
                                    case 103:
                                    case 109:
                                    case 112:
                                    case 114:
                                    case 115:
                                    case 116:
                                    case 117:
                                    case 121:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 131:
                                    case 132:
                                    case 137:
                                    case 138:
                                    case 144:
                                    case 150:
                                    case 160:
                                    case 162:
                                    case 163:
                                        {
                                        alt55=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA55_7 = input.LA(4);

                                        if ( (LA55_7==ASSIGN||LA55_7==AT_SIGN||LA55_7==DOT||LA55_7==ID||LA55_7==ROWTYPE_ATTR||LA55_7==SEMI||LA55_7==TYPE_ATTR||LA55_7==78||LA55_7==106||LA55_7==118||LA55_7==140||LA55_7==167) ) {
                                            alt55=1;
                                        }
                                        else if ( (LA55_7==LPAREN) ) {
                                            int LA55_9 = input.LA(5);

                                            if ( (LA55_9==NUMBER) ) {
                                                int LA55_11 = input.LA(6);

                                                if ( (LA55_11==RPAREN) ) {
                                                    int LA55_12 = input.LA(7);

                                                    if ( (LA55_12==ASSIGN||LA55_12==SEMI||LA55_12==78||LA55_12==106||LA55_12==118||LA55_12==167) ) {
                                                        alt55=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA55_9==DOUBLEQUOTED_STRING||LA55_9==ID) ) {
                                                alt55=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA55_8 = input.LA(4);

                                        if ( (LA55_8==DOUBLEQUOTED_STRING||LA55_8==ID) ) {
                                            int LA55_10 = input.LA(5);

                                            if ( (LA55_10==86) ) {
                                                alt55=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA55_6 = input.LA(3);

                                if ( (LA55_6==DOUBLEQUOTED_STRING||LA55_6==ID||(LA55_6 >= 58 && LA55_6 <= 63)||(LA55_6 >= 66 && LA55_6 <= 68)||LA55_6==72||(LA55_6 >= 74 && LA55_6 <= 76)||LA55_6==82||LA55_6==86||LA55_6==91||(LA55_6 >= 102 && LA55_6 <= 103)||LA55_6==109||LA55_6==112||(LA55_6 >= 114 && LA55_6 <= 117)||(LA55_6 >= 121 && LA55_6 <= 124)||(LA55_6 >= 131 && LA55_6 <= 132)||(LA55_6 >= 137 && LA55_6 <= 138)||LA55_6==144||LA55_6==150||LA55_6==160||(LA55_6 >= 162 && LA55_6 <= 163)) ) {
                                    alt55=1;
                                }
                                else if ( (LA55_6==DOT) ) {
                                    int LA55_8 = input.LA(4);

                                    if ( (LA55_8==DOUBLEQUOTED_STRING||LA55_8==ID) ) {
                                        int LA55_10 = input.LA(5);

                                        if ( (LA55_10==86) ) {
                                            alt55=1;
                                        }
                                    }
                                }
                                }
                                break;
                        }

                    }
                    switch (alt55) {
                        case 1 :
                            // antlr3/PLSQL3.g:248:18: keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype1428);
                            keyVARYING259=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING259.getTree());

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:248:32: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==LPAREN) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // antlr3/PLSQL3.g:248:34: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                            {
                            LPAREN260=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1435); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN260_tree = 
                            (Object)adaptor.create(LPAREN260)
                            ;
                            adaptor.addChild(root_0, LPAREN260_tree);
                            }

                            NUMBER261=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1437); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER261_tree = 
                            (Object)adaptor.create(NUMBER261)
                            ;
                            adaptor.addChild(root_0, NUMBER261_tree);
                            }

                            // antlr3/PLSQL3.g:248:48: ( keyBYTE | 'CHAR' )?
                            int alt56=3;
                            int LA56_0 = input.LA(1);

                            if ( (LA56_0==ID) ) {
                                alt56=1;
                            }
                            else if ( (LA56_0==66) ) {
                                alt56=2;
                            }
                            switch (alt56) {
                                case 1 :
                                    // antlr3/PLSQL3.g:248:50: keyBYTE
                                    {
                                    pushFollow(FOLLOW_keyBYTE_in_datatype1441);
                                    keyBYTE262=keyBYTE();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBYTE262.getTree());

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:248:60: 'CHAR'
                                    {
                                    string_literal263=(Token)match(input,66,FOLLOW_66_in_datatype1445); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal263_tree = 
                                    (Object)adaptor.create(string_literal263)
                                    ;
                                    adaptor.addChild(root_0, string_literal263_tree);
                                    }

                                    }
                                    break;

                            }


                            RPAREN264=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1450); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN264_tree = 
                            (Object)adaptor.create(RPAREN264)
                            ;
                            adaptor.addChild(root_0, RPAREN264_tree);
                            }

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:248:80: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==67) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // antlr3/PLSQL3.g:248:82: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            string_literal265=(Token)match(input,67,FOLLOW_67_in_datatype1457); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal265_tree = 
                            (Object)adaptor.create(string_literal265)
                            ;
                            adaptor.addChild(root_0, string_literal265_tree);
                            }

                            string_literal266=(Token)match(input,148,FOLLOW_148_in_datatype1459); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal266_tree = 
                            (Object)adaptor.create(string_literal266)
                            ;
                            adaptor.addChild(root_0, string_literal266_tree);
                            }

                            // antlr3/PLSQL3.g:248:100: ( identifier | column_spec CHARSET_ATTR )
                            int alt58=2;
                            int LA58_0 = input.LA(1);

                            if ( (LA58_0==DOUBLEQUOTED_STRING||LA58_0==ID) ) {
                                int LA58_1 = input.LA(2);

                                if ( (LA58_1==EOF||LA58_1==ASSIGN||LA58_1==COMMA||LA58_1==DOUBLEQUOTED_STRING||LA58_1==ID||(LA58_1 >= RPAREN && LA58_1 <= SEMI)||LA58_1==53||LA58_1==56||LA58_1==73||LA58_1==78||LA58_1==85||LA58_1==94||LA58_1==100||LA58_1==106||LA58_1==118||LA58_1==133||LA58_1==135) ) {
                                    alt58=1;
                                }
                                else if ( (LA58_1==CHARSET_ATTR||LA58_1==DOT) ) {
                                    alt58=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 58, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( (LA58_0==144) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 0, input);

                                throw nvae;

                            }
                            switch (alt58) {
                                case 1 :
                                    // antlr3/PLSQL3.g:248:102: identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype1463);
                                    identifier267=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier267.getTree());

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:248:115: column_spec CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype1467);
                                    column_spec268=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec268.getTree());

                                    CHARSET_ATTR269=(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype1469); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR269_tree = 
                                    (Object)adaptor.create(CHARSET_ATTR269)
                                    ;
                                    adaptor.addChild(root_0, CHARSET_ATTR269_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 21 :
                    // antlr3/PLSQL3.g:249:4: 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal270=(Token)match(input,162,FOLLOW_162_in_datatype1479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal270_tree = 
                    (Object)adaptor.create(string_literal270)
                    ;
                    adaptor.addChild(root_0, string_literal270_tree);
                    }

                    // antlr3/PLSQL3.g:249:32: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==LPAREN) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // antlr3/PLSQL3.g:249:34: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                            {
                            LPAREN271=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1501); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN271_tree = 
                            (Object)adaptor.create(LPAREN271)
                            ;
                            adaptor.addChild(root_0, LPAREN271_tree);
                            }

                            NUMBER272=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1503); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER272_tree = 
                            (Object)adaptor.create(NUMBER272)
                            ;
                            adaptor.addChild(root_0, NUMBER272_tree);
                            }

                            // antlr3/PLSQL3.g:249:48: ( keyBYTE | 'CHAR' )?
                            int alt60=3;
                            int LA60_0 = input.LA(1);

                            if ( (LA60_0==ID) ) {
                                alt60=1;
                            }
                            else if ( (LA60_0==66) ) {
                                alt60=2;
                            }
                            switch (alt60) {
                                case 1 :
                                    // antlr3/PLSQL3.g:249:50: keyBYTE
                                    {
                                    pushFollow(FOLLOW_keyBYTE_in_datatype1507);
                                    keyBYTE273=keyBYTE();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBYTE273.getTree());

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:249:60: 'CHAR'
                                    {
                                    string_literal274=(Token)match(input,66,FOLLOW_66_in_datatype1511); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal274_tree = 
                                    (Object)adaptor.create(string_literal274)
                                    ;
                                    adaptor.addChild(root_0, string_literal274_tree);
                                    }

                                    }
                                    break;

                            }


                            RPAREN275=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1516); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN275_tree = 
                            (Object)adaptor.create(RPAREN275)
                            ;
                            adaptor.addChild(root_0, RPAREN275_tree);
                            }

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:249:80: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==67) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // antlr3/PLSQL3.g:249:82: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            string_literal276=(Token)match(input,67,FOLLOW_67_in_datatype1523); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal276_tree = 
                            (Object)adaptor.create(string_literal276)
                            ;
                            adaptor.addChild(root_0, string_literal276_tree);
                            }

                            string_literal277=(Token)match(input,148,FOLLOW_148_in_datatype1525); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal277_tree = 
                            (Object)adaptor.create(string_literal277)
                            ;
                            adaptor.addChild(root_0, string_literal277_tree);
                            }

                            // antlr3/PLSQL3.g:249:100: ( identifier | column_spec CHARSET_ATTR )
                            int alt62=2;
                            int LA62_0 = input.LA(1);

                            if ( (LA62_0==DOUBLEQUOTED_STRING||LA62_0==ID) ) {
                                int LA62_1 = input.LA(2);

                                if ( (LA62_1==EOF||LA62_1==ASSIGN||LA62_1==COMMA||LA62_1==DOUBLEQUOTED_STRING||LA62_1==ID||(LA62_1 >= RPAREN && LA62_1 <= SEMI)||LA62_1==53||LA62_1==56||LA62_1==73||LA62_1==78||LA62_1==85||LA62_1==94||LA62_1==100||LA62_1==106||LA62_1==118||LA62_1==133||LA62_1==135) ) {
                                    alt62=1;
                                }
                                else if ( (LA62_1==CHARSET_ATTR||LA62_1==DOT) ) {
                                    alt62=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 62, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( (LA62_0==144) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 0, input);

                                throw nvae;

                            }
                            switch (alt62) {
                                case 1 :
                                    // antlr3/PLSQL3.g:249:102: identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype1529);
                                    identifier278=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier278.getTree());

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:249:115: column_spec CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype1533);
                                    column_spec279=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec279.getTree());

                                    CHARSET_ATTR280=(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype1535); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR280_tree = 
                                    (Object)adaptor.create(CHARSET_ATTR280)
                                    ;
                                    adaptor.addChild(root_0, CHARSET_ATTR280_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 22 :
                    // antlr3/PLSQL3.g:250:4: 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal281=(Token)match(input,163,FOLLOW_163_in_datatype1545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal281_tree = 
                    (Object)adaptor.create(string_literal281)
                    ;
                    adaptor.addChild(root_0, string_literal281_tree);
                    }

                    // antlr3/PLSQL3.g:250:32: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==LPAREN) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // antlr3/PLSQL3.g:250:34: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                            {
                            LPAREN282=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1566); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN282_tree = 
                            (Object)adaptor.create(LPAREN282)
                            ;
                            adaptor.addChild(root_0, LPAREN282_tree);
                            }

                            NUMBER283=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1568); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER283_tree = 
                            (Object)adaptor.create(NUMBER283)
                            ;
                            adaptor.addChild(root_0, NUMBER283_tree);
                            }

                            // antlr3/PLSQL3.g:250:48: ( keyBYTE | 'CHAR' )?
                            int alt64=3;
                            int LA64_0 = input.LA(1);

                            if ( (LA64_0==ID) ) {
                                alt64=1;
                            }
                            else if ( (LA64_0==66) ) {
                                alt64=2;
                            }
                            switch (alt64) {
                                case 1 :
                                    // antlr3/PLSQL3.g:250:50: keyBYTE
                                    {
                                    pushFollow(FOLLOW_keyBYTE_in_datatype1572);
                                    keyBYTE284=keyBYTE();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBYTE284.getTree());

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:250:60: 'CHAR'
                                    {
                                    string_literal285=(Token)match(input,66,FOLLOW_66_in_datatype1576); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal285_tree = 
                                    (Object)adaptor.create(string_literal285)
                                    ;
                                    adaptor.addChild(root_0, string_literal285_tree);
                                    }

                                    }
                                    break;

                            }


                            RPAREN286=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1581); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN286_tree = 
                            (Object)adaptor.create(RPAREN286)
                            ;
                            adaptor.addChild(root_0, RPAREN286_tree);
                            }

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:250:80: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==67) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // antlr3/PLSQL3.g:250:82: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            string_literal287=(Token)match(input,67,FOLLOW_67_in_datatype1588); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal287_tree = 
                            (Object)adaptor.create(string_literal287)
                            ;
                            adaptor.addChild(root_0, string_literal287_tree);
                            }

                            string_literal288=(Token)match(input,148,FOLLOW_148_in_datatype1590); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal288_tree = 
                            (Object)adaptor.create(string_literal288)
                            ;
                            adaptor.addChild(root_0, string_literal288_tree);
                            }

                            // antlr3/PLSQL3.g:250:100: ( identifier | column_spec CHARSET_ATTR )
                            int alt66=2;
                            int LA66_0 = input.LA(1);

                            if ( (LA66_0==DOUBLEQUOTED_STRING||LA66_0==ID) ) {
                                int LA66_1 = input.LA(2);

                                if ( (LA66_1==EOF||LA66_1==ASSIGN||LA66_1==COMMA||LA66_1==DOUBLEQUOTED_STRING||LA66_1==ID||(LA66_1 >= RPAREN && LA66_1 <= SEMI)||LA66_1==53||LA66_1==56||LA66_1==73||LA66_1==78||LA66_1==85||LA66_1==94||LA66_1==100||LA66_1==106||LA66_1==118||LA66_1==133||LA66_1==135) ) {
                                    alt66=1;
                                }
                                else if ( (LA66_1==CHARSET_ATTR||LA66_1==DOT) ) {
                                    alt66=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 66, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( (LA66_0==144) ) {
                                alt66=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 66, 0, input);

                                throw nvae;

                            }
                            switch (alt66) {
                                case 1 :
                                    // antlr3/PLSQL3.g:250:102: identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype1594);
                                    identifier289=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier289.getTree());

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:250:115: column_spec CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype1598);
                                    column_spec290=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec290.getTree());

                                    CHARSET_ATTR291=(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype1600); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR291_tree = 
                                    (Object)adaptor.create(CHARSET_ATTR291)
                                    ;
                                    adaptor.addChild(root_0, CHARSET_ATTR291_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 23 :
                    // antlr3/PLSQL3.g:251:4: 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal292=(Token)match(input,67,FOLLOW_67_in_datatype1610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal292_tree = 
                    (Object)adaptor.create(string_literal292)
                    ;
                    adaptor.addChild(root_0, string_literal292_tree);
                    }

                    // antlr3/PLSQL3.g:251:16: ( keyVARYING )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case EOF:
                            case ASSIGN:
                            case COMMA:
                            case LPAREN:
                            case RPAREN:
                            case SEMI:
                            case 53:
                            case 56:
                            case 73:
                            case 78:
                            case 85:
                            case 94:
                            case 100:
                            case 106:
                            case 118:
                            case 133:
                            case 135:
                                {
                                alt68=1;
                                }
                                break;
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case DOUBLEQUOTED_STRING:
                                    case MINUS:
                                    case NUMBER:
                                    case PLUS:
                                    case QUOTED_STRING:
                                    case 58:
                                    case 59:
                                    case 60:
                                    case 61:
                                    case 62:
                                    case 63:
                                    case 66:
                                    case 67:
                                    case 68:
                                    case 72:
                                    case 74:
                                    case 75:
                                    case 76:
                                    case 82:
                                    case 86:
                                    case 91:
                                    case 102:
                                    case 103:
                                    case 109:
                                    case 112:
                                    case 114:
                                    case 115:
                                    case 116:
                                    case 117:
                                    case 121:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 131:
                                    case 132:
                                    case 137:
                                    case 138:
                                    case 144:
                                    case 150:
                                    case 160:
                                    case 162:
                                    case 163:
                                        {
                                        alt68=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA68_6 = input.LA(4);

                                        if ( (LA68_6==ASSIGN||LA68_6==AT_SIGN||LA68_6==DOT||LA68_6==ID||LA68_6==ROWTYPE_ATTR||LA68_6==SEMI||LA68_6==TYPE_ATTR||LA68_6==78||LA68_6==106||LA68_6==118||LA68_6==140||LA68_6==167) ) {
                                            alt68=1;
                                        }
                                        else if ( (LA68_6==LPAREN) ) {
                                            int LA68_8 = input.LA(5);

                                            if ( (LA68_8==NUMBER) ) {
                                                int LA68_10 = input.LA(6);

                                                if ( (LA68_10==RPAREN) ) {
                                                    int LA68_11 = input.LA(7);

                                                    if ( (LA68_11==ASSIGN||LA68_11==SEMI||LA68_11==78||LA68_11==106||LA68_11==118||LA68_11==167) ) {
                                                        alt68=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA68_8==DOUBLEQUOTED_STRING||LA68_8==ID) ) {
                                                alt68=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA68_7 = input.LA(4);

                                        if ( (LA68_7==DOUBLEQUOTED_STRING||LA68_7==ID) ) {
                                            int LA68_9 = input.LA(5);

                                            if ( (LA68_9==86) ) {
                                                alt68=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA68_5 = input.LA(3);

                                if ( (LA68_5==DOUBLEQUOTED_STRING||LA68_5==ID||(LA68_5 >= 58 && LA68_5 <= 63)||(LA68_5 >= 66 && LA68_5 <= 68)||LA68_5==72||(LA68_5 >= 74 && LA68_5 <= 76)||LA68_5==82||LA68_5==86||LA68_5==91||(LA68_5 >= 102 && LA68_5 <= 103)||LA68_5==109||LA68_5==112||(LA68_5 >= 114 && LA68_5 <= 117)||(LA68_5 >= 121 && LA68_5 <= 124)||(LA68_5 >= 131 && LA68_5 <= 132)||(LA68_5 >= 137 && LA68_5 <= 138)||LA68_5==144||LA68_5==150||LA68_5==160||(LA68_5 >= 162 && LA68_5 <= 163)) ) {
                                    alt68=1;
                                }
                                else if ( (LA68_5==DOT) ) {
                                    int LA68_7 = input.LA(4);

                                    if ( (LA68_7==DOUBLEQUOTED_STRING||LA68_7==ID) ) {
                                        int LA68_9 = input.LA(5);

                                        if ( (LA68_9==86) ) {
                                            alt68=1;
                                        }
                                    }
                                }
                                }
                                break;
                        }

                    }
                    switch (alt68) {
                        case 1 :
                            // antlr3/PLSQL3.g:251:18: keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype1614);
                            keyVARYING293=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING293.getTree());

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:251:32: ( LPAREN NUMBER RPAREN )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==LPAREN) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // antlr3/PLSQL3.g:251:34: LPAREN NUMBER RPAREN
                            {
                            LPAREN294=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1621); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN294_tree = 
                            (Object)adaptor.create(LPAREN294)
                            ;
                            adaptor.addChild(root_0, LPAREN294_tree);
                            }

                            NUMBER295=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1623); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER295_tree = 
                            (Object)adaptor.create(NUMBER295)
                            ;
                            adaptor.addChild(root_0, NUMBER295_tree);
                            }

                            RPAREN296=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1625); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN296_tree = 
                            (Object)adaptor.create(RPAREN296)
                            ;
                            adaptor.addChild(root_0, RPAREN296_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 24 :
                    // antlr3/PLSQL3.g:252:4: 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal297=(Token)match(input,116,FOLLOW_116_in_datatype1633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal297_tree = 
                    (Object)adaptor.create(string_literal297)
                    ;
                    adaptor.addChild(root_0, string_literal297_tree);
                    }

                    // antlr3/PLSQL3.g:252:16: ( keyVARYING )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case EOF:
                            case ASSIGN:
                            case COMMA:
                            case LPAREN:
                            case RPAREN:
                            case SEMI:
                            case 53:
                            case 56:
                            case 73:
                            case 78:
                            case 85:
                            case 94:
                            case 100:
                            case 106:
                            case 118:
                            case 133:
                            case 135:
                                {
                                alt70=1;
                                }
                                break;
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case DOUBLEQUOTED_STRING:
                                    case MINUS:
                                    case NUMBER:
                                    case PLUS:
                                    case QUOTED_STRING:
                                    case 58:
                                    case 59:
                                    case 60:
                                    case 61:
                                    case 62:
                                    case 63:
                                    case 66:
                                    case 67:
                                    case 68:
                                    case 72:
                                    case 74:
                                    case 75:
                                    case 76:
                                    case 82:
                                    case 86:
                                    case 91:
                                    case 102:
                                    case 103:
                                    case 109:
                                    case 112:
                                    case 114:
                                    case 115:
                                    case 116:
                                    case 117:
                                    case 121:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 131:
                                    case 132:
                                    case 137:
                                    case 138:
                                    case 144:
                                    case 150:
                                    case 160:
                                    case 162:
                                    case 163:
                                        {
                                        alt70=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA70_6 = input.LA(4);

                                        if ( (LA70_6==ASSIGN||LA70_6==AT_SIGN||LA70_6==DOT||LA70_6==ID||LA70_6==ROWTYPE_ATTR||LA70_6==SEMI||LA70_6==TYPE_ATTR||LA70_6==78||LA70_6==106||LA70_6==118||LA70_6==140||LA70_6==167) ) {
                                            alt70=1;
                                        }
                                        else if ( (LA70_6==LPAREN) ) {
                                            int LA70_8 = input.LA(5);

                                            if ( (LA70_8==NUMBER) ) {
                                                int LA70_10 = input.LA(6);

                                                if ( (LA70_10==RPAREN) ) {
                                                    int LA70_11 = input.LA(7);

                                                    if ( (LA70_11==ASSIGN||LA70_11==SEMI||LA70_11==78||LA70_11==106||LA70_11==118||LA70_11==167) ) {
                                                        alt70=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA70_8==DOUBLEQUOTED_STRING||LA70_8==ID) ) {
                                                alt70=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA70_7 = input.LA(4);

                                        if ( (LA70_7==DOUBLEQUOTED_STRING||LA70_7==ID) ) {
                                            int LA70_9 = input.LA(5);

                                            if ( (LA70_9==86) ) {
                                                alt70=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA70_5 = input.LA(3);

                                if ( (LA70_5==DOUBLEQUOTED_STRING||LA70_5==ID||(LA70_5 >= 58 && LA70_5 <= 63)||(LA70_5 >= 66 && LA70_5 <= 68)||LA70_5==72||(LA70_5 >= 74 && LA70_5 <= 76)||LA70_5==82||LA70_5==86||LA70_5==91||(LA70_5 >= 102 && LA70_5 <= 103)||LA70_5==109||LA70_5==112||(LA70_5 >= 114 && LA70_5 <= 117)||(LA70_5 >= 121 && LA70_5 <= 124)||(LA70_5 >= 131 && LA70_5 <= 132)||(LA70_5 >= 137 && LA70_5 <= 138)||LA70_5==144||LA70_5==150||LA70_5==160||(LA70_5 >= 162 && LA70_5 <= 163)) ) {
                                    alt70=1;
                                }
                                else if ( (LA70_5==DOT) ) {
                                    int LA70_7 = input.LA(4);

                                    if ( (LA70_7==DOUBLEQUOTED_STRING||LA70_7==ID) ) {
                                        int LA70_9 = input.LA(5);

                                        if ( (LA70_9==86) ) {
                                            alt70=1;
                                        }
                                    }
                                }
                                }
                                break;
                        }

                    }
                    switch (alt70) {
                        case 1 :
                            // antlr3/PLSQL3.g:252:18: keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype1641);
                            keyVARYING298=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING298.getTree());

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:252:32: ( LPAREN NUMBER RPAREN )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==LPAREN) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // antlr3/PLSQL3.g:252:34: LPAREN NUMBER RPAREN
                            {
                            LPAREN299=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1648); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN299_tree = 
                            (Object)adaptor.create(LPAREN299)
                            ;
                            adaptor.addChild(root_0, LPAREN299_tree);
                            }

                            NUMBER300=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1650); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER300_tree = 
                            (Object)adaptor.create(NUMBER300)
                            ;
                            adaptor.addChild(root_0, NUMBER300_tree);
                            }

                            RPAREN301=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1652); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN301_tree = 
                            (Object)adaptor.create(RPAREN301)
                            ;
                            adaptor.addChild(root_0, RPAREN301_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 25 :
                    // antlr3/PLSQL3.g:253:4: 'NVARCHAR' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal302=(Token)match(input,123,FOLLOW_123_in_datatype1660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal302_tree = 
                    (Object)adaptor.create(string_literal302)
                    ;
                    adaptor.addChild(root_0, string_literal302_tree);
                    }

                    // antlr3/PLSQL3.g:253:16: ( LPAREN NUMBER RPAREN )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==LPAREN) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // antlr3/PLSQL3.g:253:18: LPAREN NUMBER RPAREN
                            {
                            LPAREN303=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1665); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN303_tree = 
                            (Object)adaptor.create(LPAREN303)
                            ;
                            adaptor.addChild(root_0, LPAREN303_tree);
                            }

                            NUMBER304=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1667); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER304_tree = 
                            (Object)adaptor.create(NUMBER304)
                            ;
                            adaptor.addChild(root_0, NUMBER304_tree);
                            }

                            RPAREN305=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1669); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN305_tree = 
                            (Object)adaptor.create(RPAREN305)
                            ;
                            adaptor.addChild(root_0, RPAREN305_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 26 :
                    // antlr3/PLSQL3.g:254:4: 'NVARCHAR2' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal306=(Token)match(input,124,FOLLOW_124_in_datatype1677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal306_tree = 
                    (Object)adaptor.create(string_literal306)
                    ;
                    adaptor.addChild(root_0, string_literal306_tree);
                    }

                    // antlr3/PLSQL3.g:254:16: ( LPAREN NUMBER RPAREN )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==LPAREN) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // antlr3/PLSQL3.g:254:18: LPAREN NUMBER RPAREN
                            {
                            LPAREN307=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1681); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN307_tree = 
                            (Object)adaptor.create(LPAREN307)
                            ;
                            adaptor.addChild(root_0, LPAREN307_tree);
                            }

                            NUMBER308=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1683); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER308_tree = 
                            (Object)adaptor.create(NUMBER308)
                            ;
                            adaptor.addChild(root_0, NUMBER308_tree);
                            }

                            RPAREN309=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1685); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN309_tree = 
                            (Object)adaptor.create(RPAREN309)
                            ;
                            adaptor.addChild(root_0, RPAREN309_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 27 :
                    // antlr3/PLSQL3.g:255:4: 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal310=(Token)match(input,114,FOLLOW_114_in_datatype1693); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal310_tree = 
                    (Object)adaptor.create(string_literal310)
                    ;
                    adaptor.addChild(root_0, string_literal310_tree);
                    }

                    set311=(Token)input.LT(1);

                    if ( (input.LA(1) >= 66 && input.LA(1) <= 67) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set311)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // antlr3/PLSQL3.g:255:41: ( keyVARYING )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case EOF:
                            case ASSIGN:
                            case COMMA:
                            case LPAREN:
                            case RPAREN:
                            case SEMI:
                            case 53:
                            case 56:
                            case 73:
                            case 78:
                            case 85:
                            case 94:
                            case 100:
                            case 106:
                            case 118:
                            case 133:
                            case 135:
                                {
                                alt74=1;
                                }
                                break;
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case DOUBLEQUOTED_STRING:
                                    case MINUS:
                                    case NUMBER:
                                    case PLUS:
                                    case QUOTED_STRING:
                                    case 58:
                                    case 59:
                                    case 60:
                                    case 61:
                                    case 62:
                                    case 63:
                                    case 66:
                                    case 67:
                                    case 68:
                                    case 72:
                                    case 74:
                                    case 75:
                                    case 76:
                                    case 82:
                                    case 86:
                                    case 91:
                                    case 102:
                                    case 103:
                                    case 109:
                                    case 112:
                                    case 114:
                                    case 115:
                                    case 116:
                                    case 117:
                                    case 121:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 131:
                                    case 132:
                                    case 137:
                                    case 138:
                                    case 144:
                                    case 150:
                                    case 160:
                                    case 162:
                                    case 163:
                                        {
                                        alt74=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA74_6 = input.LA(4);

                                        if ( (LA74_6==ASSIGN||LA74_6==AT_SIGN||LA74_6==DOT||LA74_6==ID||LA74_6==ROWTYPE_ATTR||LA74_6==SEMI||LA74_6==TYPE_ATTR||LA74_6==78||LA74_6==106||LA74_6==118||LA74_6==140||LA74_6==167) ) {
                                            alt74=1;
                                        }
                                        else if ( (LA74_6==LPAREN) ) {
                                            int LA74_8 = input.LA(5);

                                            if ( (LA74_8==NUMBER) ) {
                                                int LA74_10 = input.LA(6);

                                                if ( (LA74_10==RPAREN) ) {
                                                    int LA74_11 = input.LA(7);

                                                    if ( (LA74_11==ASSIGN||LA74_11==SEMI||LA74_11==78||LA74_11==106||LA74_11==118||LA74_11==167) ) {
                                                        alt74=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA74_8==DOUBLEQUOTED_STRING||LA74_8==ID) ) {
                                                alt74=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA74_7 = input.LA(4);

                                        if ( (LA74_7==DOUBLEQUOTED_STRING||LA74_7==ID) ) {
                                            int LA74_9 = input.LA(5);

                                            if ( (LA74_9==86) ) {
                                                alt74=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA74_5 = input.LA(3);

                                if ( (LA74_5==DOUBLEQUOTED_STRING||LA74_5==ID||(LA74_5 >= 58 && LA74_5 <= 63)||(LA74_5 >= 66 && LA74_5 <= 68)||LA74_5==72||(LA74_5 >= 74 && LA74_5 <= 76)||LA74_5==82||LA74_5==86||LA74_5==91||(LA74_5 >= 102 && LA74_5 <= 103)||LA74_5==109||LA74_5==112||(LA74_5 >= 114 && LA74_5 <= 117)||(LA74_5 >= 121 && LA74_5 <= 124)||(LA74_5 >= 131 && LA74_5 <= 132)||(LA74_5 >= 137 && LA74_5 <= 138)||LA74_5==144||LA74_5==150||LA74_5==160||(LA74_5 >= 162 && LA74_5 <= 163)) ) {
                                    alt74=1;
                                }
                                else if ( (LA74_5==DOT) ) {
                                    int LA74_7 = input.LA(4);

                                    if ( (LA74_7==DOUBLEQUOTED_STRING||LA74_7==ID) ) {
                                        int LA74_9 = input.LA(5);

                                        if ( (LA74_9==86) ) {
                                            alt74=1;
                                        }
                                    }
                                }
                                }
                                break;
                        }

                    }
                    switch (alt74) {
                        case 1 :
                            // antlr3/PLSQL3.g:255:43: keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype1708);
                            keyVARYING312=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING312.getTree());

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:255:57: ( LPAREN NUMBER RPAREN )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==LPAREN) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // antlr3/PLSQL3.g:255:59: LPAREN NUMBER RPAREN
                            {
                            LPAREN313=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1715); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN313_tree = 
                            (Object)adaptor.create(LPAREN313)
                            ;
                            adaptor.addChild(root_0, LPAREN313_tree);
                            }

                            NUMBER314=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1717); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER314_tree = 
                            (Object)adaptor.create(NUMBER314)
                            ;
                            adaptor.addChild(root_0, NUMBER314_tree);
                            }

                            RPAREN315=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1719); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN315_tree = 
                            (Object)adaptor.create(RPAREN315)
                            ;
                            adaptor.addChild(root_0, RPAREN315_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 28 :
                    // antlr3/PLSQL3.g:256:4: 'MLSLABEL'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal316=(Token)match(input,112,FOLLOW_112_in_datatype1727); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal316_tree = 
                    (Object)adaptor.create(string_literal316)
                    ;
                    adaptor.addChild(root_0, string_literal316_tree);
                    }

                    }
                    break;
                case 29 :
                    // antlr3/PLSQL3.g:257:4: 'PLS_INTEGER'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal317=(Token)match(input,131,FOLLOW_131_in_datatype1732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal317_tree = 
                    (Object)adaptor.create(string_literal317)
                    ;
                    adaptor.addChild(root_0, string_literal317_tree);
                    }

                    }
                    break;
                case 30 :
                    // antlr3/PLSQL3.g:258:4: 'BLOB'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal318=(Token)match(input,62,FOLLOW_62_in_datatype1737); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal318_tree = 
                    (Object)adaptor.create(string_literal318)
                    ;
                    adaptor.addChild(root_0, string_literal318_tree);
                    }

                    }
                    break;
                case 31 :
                    // antlr3/PLSQL3.g:259:4: 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal319=(Token)match(input,68,FOLLOW_68_in_datatype1742); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal319_tree = 
                    (Object)adaptor.create(string_literal319)
                    ;
                    adaptor.addChild(root_0, string_literal319_tree);
                    }

                    // antlr3/PLSQL3.g:259:11: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==67) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // antlr3/PLSQL3.g:259:13: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            string_literal320=(Token)match(input,67,FOLLOW_67_in_datatype1746); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal320_tree = 
                            (Object)adaptor.create(string_literal320)
                            ;
                            adaptor.addChild(root_0, string_literal320_tree);
                            }

                            string_literal321=(Token)match(input,148,FOLLOW_148_in_datatype1748); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal321_tree = 
                            (Object)adaptor.create(string_literal321)
                            ;
                            adaptor.addChild(root_0, string_literal321_tree);
                            }

                            // antlr3/PLSQL3.g:259:31: ( identifier | column_spec CHARSET_ATTR )
                            int alt76=2;
                            int LA76_0 = input.LA(1);

                            if ( (LA76_0==DOUBLEQUOTED_STRING||LA76_0==ID) ) {
                                int LA76_1 = input.LA(2);

                                if ( (LA76_1==EOF||LA76_1==ASSIGN||LA76_1==COMMA||LA76_1==DOUBLEQUOTED_STRING||LA76_1==ID||(LA76_1 >= RPAREN && LA76_1 <= SEMI)||LA76_1==53||LA76_1==56||LA76_1==73||LA76_1==78||LA76_1==85||LA76_1==94||LA76_1==100||LA76_1==106||LA76_1==118||LA76_1==133||LA76_1==135) ) {
                                    alt76=1;
                                }
                                else if ( (LA76_1==CHARSET_ATTR||LA76_1==DOT) ) {
                                    alt76=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 76, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( (LA76_0==144) ) {
                                alt76=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 76, 0, input);

                                throw nvae;

                            }
                            switch (alt76) {
                                case 1 :
                                    // antlr3/PLSQL3.g:259:33: identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype1752);
                                    identifier322=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier322.getTree());

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:259:46: column_spec CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype1756);
                                    column_spec323=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec323.getTree());

                                    CHARSET_ATTR324=(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype1758); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR324_tree = 
                                    (Object)adaptor.create(CHARSET_ATTR324)
                                    ;
                                    adaptor.addChild(root_0, CHARSET_ATTR324_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 32 :
                    // antlr3/PLSQL3.g:260:4: 'NCLOB'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal325=(Token)match(input,117,FOLLOW_117_in_datatype1768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal325_tree = 
                    (Object)adaptor.create(string_literal325)
                    ;
                    adaptor.addChild(root_0, string_literal325_tree);
                    }

                    }
                    break;
                case 33 :
                    // antlr3/PLSQL3.g:261:4: 'BFILE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal326=(Token)match(input,58,FOLLOW_58_in_datatype1773); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal326_tree = 
                    (Object)adaptor.create(string_literal326)
                    ;
                    adaptor.addChild(root_0, string_literal326_tree);
                    }

                    }
                    break;
                case 34 :
                    // antlr3/PLSQL3.g:262:4: 'ROWID'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal327=(Token)match(input,144,FOLLOW_144_in_datatype1778); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal327_tree = 
                    (Object)adaptor.create(string_literal327)
                    ;
                    adaptor.addChild(root_0, string_literal327_tree);
                    }

                    }
                    break;
                case 35 :
                    // antlr3/PLSQL3.g:263:4: 'UROWID' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal328=(Token)match(input,160,FOLLOW_160_in_datatype1784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal328_tree = 
                    (Object)adaptor.create(string_literal328)
                    ;
                    adaptor.addChild(root_0, string_literal328_tree);
                    }

                    // antlr3/PLSQL3.g:263:13: ( LPAREN NUMBER RPAREN )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==LPAREN) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // antlr3/PLSQL3.g:263:15: LPAREN NUMBER RPAREN
                            {
                            LPAREN329=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype1788); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN329_tree = 
                            (Object)adaptor.create(LPAREN329)
                            ;
                            adaptor.addChild(root_0, LPAREN329_tree);
                            }

                            NUMBER330=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype1790); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER330_tree = 
                            (Object)adaptor.create(NUMBER330)
                            ;
                            adaptor.addChild(root_0, NUMBER330_tree);
                            }

                            RPAREN331=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype1792); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN331_tree = 
                            (Object)adaptor.create(RPAREN331)
                            ;
                            adaptor.addChild(root_0, RPAREN331_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 28, datatype_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "datatype"


    public static class type_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_spec"
    // antlr3/PLSQL3.g:266:1: type_spec : ( datatype | column_spec TYPE_ATTR | table_spec ROWTYPE_ATTR | type_name ( LPAREN NUMBER RPAREN )? );
    public final PLSQL3Parser.type_spec_return type_spec() throws RecognitionException {
        PLSQL3Parser.type_spec_return retval = new PLSQL3Parser.type_spec_return();
        retval.start = input.LT(1);

        int type_spec_StartIndex = input.index();

        Object root_0 = null;

        Token TYPE_ATTR334=null;
        Token ROWTYPE_ATTR336=null;
        Token LPAREN338=null;
        Token NUMBER339=null;
        Token RPAREN340=null;
        PLSQL3Parser.datatype_return datatype332 =null;

        PLSQL3Parser.column_spec_return column_spec333 =null;

        PLSQL3Parser.table_spec_return table_spec335 =null;

        PLSQL3Parser.type_name_return type_name337 =null;


        Object TYPE_ATTR334_tree=null;
        Object ROWTYPE_ATTR336_tree=null;
        Object LPAREN338_tree=null;
        Object NUMBER339_tree=null;
        Object RPAREN340_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // antlr3/PLSQL3.g:267:2: ( datatype | column_spec TYPE_ATTR | table_spec ROWTYPE_ATTR | type_name ( LPAREN NUMBER RPAREN )? )
            int alt81=4;
            switch ( input.LA(1) ) {
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 66:
            case 67:
            case 68:
            case 74:
            case 75:
            case 76:
            case 82:
            case 91:
            case 102:
            case 103:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 121:
            case 122:
            case 123:
            case 124:
            case 131:
            case 132:
            case 137:
            case 138:
            case 150:
            case 160:
            case 162:
            case 163:
                {
                alt81=1;
                }
                break;
            case ID:
                {
                int LA81_2 = input.LA(2);

                if ( (LA81_2==DOT) ) {
                    int LA81_5 = input.LA(3);

                    if ( (LA81_5==DOUBLEQUOTED_STRING||LA81_5==ID) ) {
                        int LA81_10 = input.LA(4);

                        if ( (LA81_10==DOT||LA81_10==TYPE_ATTR) ) {
                            alt81=2;
                        }
                        else if ( (LA81_10==AT_SIGN||LA81_10==ROWTYPE_ATTR) ) {
                            alt81=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 81, 10, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA81_5==144) ) {
                        int LA81_11 = input.LA(4);

                        if ( (LA81_11==DOT||LA81_11==TYPE_ATTR) ) {
                            alt81=2;
                        }
                        else if ( (LA81_11==AT_SIGN||LA81_11==ROWTYPE_ATTR) ) {
                            alt81=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 81, 11, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 5, input);

                        throw nvae;

                    }
                }
                else if ( (LA81_2==TYPE_ATTR) ) {
                    alt81=2;
                }
                else if ( (LA81_2==AT_SIGN||LA81_2==ROWTYPE_ATTR) ) {
                    alt81=3;
                }
                else if ( (((synpred172_PLSQL3()&&synpred172_PLSQL3())&&((input.LT(1).getText().equalsIgnoreCase("TIMESTAMP"))||(input.LT(1).getText().equalsIgnoreCase("TIME"))||(input.LT(1).getText().equalsIgnoreCase("INTERVAL"))))) ) {
                    alt81=1;
                }
                else if ( (true) ) {
                    alt81=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 2, input);

                    throw nvae;

                }
                }
                break;
            case 144:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case ASSIGN:
                case COMMA:
                case DOUBLEQUOTED_STRING:
                case ID:
                case RPAREN:
                case SEMI:
                case 53:
                case 56:
                case 73:
                case 78:
                case 85:
                case 94:
                case 100:
                case 106:
                case 118:
                case 133:
                case 135:
                    {
                    alt81=1;
                    }
                    break;
                case DOT:
                    {
                    int LA81_5 = input.LA(3);

                    if ( (LA81_5==DOUBLEQUOTED_STRING||LA81_5==ID) ) {
                        int LA81_10 = input.LA(4);

                        if ( (LA81_10==DOT||LA81_10==TYPE_ATTR) ) {
                            alt81=2;
                        }
                        else if ( (LA81_10==AT_SIGN||LA81_10==ROWTYPE_ATTR) ) {
                            alt81=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 81, 10, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA81_5==144) ) {
                        int LA81_11 = input.LA(4);

                        if ( (LA81_11==DOT||LA81_11==TYPE_ATTR) ) {
                            alt81=2;
                        }
                        else if ( (LA81_11==AT_SIGN||LA81_11==ROWTYPE_ATTR) ) {
                            alt81=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 81, 11, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 5, input);

                        throw nvae;

                    }
                    }
                    break;
                case TYPE_ATTR:
                    {
                    alt81=2;
                    }
                    break;
                case AT_SIGN:
                case ROWTYPE_ATTR:
                    {
                    alt81=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 3, input);

                    throw nvae;

                }

                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                switch ( input.LA(2) ) {
                case DOT:
                    {
                    int LA81_9 = input.LA(3);

                    if ( (LA81_9==DOUBLEQUOTED_STRING||LA81_9==ID) ) {
                        switch ( input.LA(4) ) {
                        case DOT:
                            {
                            int LA81_13 = input.LA(5);

                            if ( (LA81_13==DOUBLEQUOTED_STRING||LA81_13==ID) ) {
                                int LA81_14 = input.LA(6);

                                if ( (LA81_14==TYPE_ATTR) ) {
                                    alt81=2;
                                }
                                else if ( (LA81_14==EOF||LA81_14==ASSIGN||LA81_14==COMMA||LA81_14==DOT||LA81_14==DOUBLEQUOTED_STRING||LA81_14==ID||LA81_14==LPAREN||(LA81_14 >= RPAREN && LA81_14 <= SEMI)||LA81_14==53||LA81_14==56||LA81_14==73||LA81_14==78||LA81_14==85||LA81_14==94||LA81_14==100||LA81_14==106||LA81_14==118||LA81_14==133||LA81_14==135) ) {
                                    alt81=4;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 81, 14, input);

                                    throw nvae;

                                }
                            }
                            else if ( (LA81_13==144) ) {
                                alt81=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 81, 13, input);

                                throw nvae;

                            }
                            }
                            break;
                        case TYPE_ATTR:
                            {
                            alt81=2;
                            }
                            break;
                        case AT_SIGN:
                        case ROWTYPE_ATTR:
                            {
                            alt81=3;
                            }
                            break;
                        case EOF:
                        case ASSIGN:
                        case COMMA:
                        case DOUBLEQUOTED_STRING:
                        case ID:
                        case LPAREN:
                        case RPAREN:
                        case SEMI:
                        case 53:
                        case 56:
                        case 73:
                        case 78:
                        case 85:
                        case 94:
                        case 100:
                        case 106:
                        case 118:
                        case 133:
                        case 135:
                            {
                            alt81=4;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 81, 12, input);

                            throw nvae;

                        }

                    }
                    else if ( (LA81_9==144) ) {
                        int LA81_11 = input.LA(4);

                        if ( (LA81_11==DOT||LA81_11==TYPE_ATTR) ) {
                            alt81=2;
                        }
                        else if ( (LA81_11==AT_SIGN||LA81_11==ROWTYPE_ATTR) ) {
                            alt81=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 81, 11, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 9, input);

                        throw nvae;

                    }
                    }
                    break;
                case TYPE_ATTR:
                    {
                    alt81=2;
                    }
                    break;
                case AT_SIGN:
                case ROWTYPE_ATTR:
                    {
                    alt81=3;
                    }
                    break;
                case EOF:
                case ASSIGN:
                case COMMA:
                case DOUBLEQUOTED_STRING:
                case ID:
                case LPAREN:
                case RPAREN:
                case SEMI:
                case 53:
                case 56:
                case 73:
                case 78:
                case 85:
                case 94:
                case 100:
                case 106:
                case 118:
                case 133:
                case 135:
                    {
                    alt81=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 4, input);

                    throw nvae;

                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }

            switch (alt81) {
                case 1 :
                    // antlr3/PLSQL3.g:267:4: datatype
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_datatype_in_type_spec1806);
                    datatype332=datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, datatype332.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:269:4: column_spec TYPE_ATTR
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_column_spec_in_type_spec1813);
                    column_spec333=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec333.getTree());

                    TYPE_ATTR334=(Token)match(input,TYPE_ATTR,FOLLOW_TYPE_ATTR_in_type_spec1815); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPE_ATTR334_tree = 
                    (Object)adaptor.create(TYPE_ATTR334)
                    ;
                    adaptor.addChild(root_0, TYPE_ATTR334_tree);
                    }

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:271:4: table_spec ROWTYPE_ATTR
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_table_spec_in_type_spec1821);
                    table_spec335=table_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec335.getTree());

                    ROWTYPE_ATTR336=(Token)match(input,ROWTYPE_ATTR,FOLLOW_ROWTYPE_ATTR_in_type_spec1823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROWTYPE_ATTR336_tree = 
                    (Object)adaptor.create(ROWTYPE_ATTR336)
                    ;
                    adaptor.addChild(root_0, ROWTYPE_ATTR336_tree);
                    }

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:273:4: type_name ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_name_in_type_spec1829);
                    type_name337=type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name337.getTree());

                    // antlr3/PLSQL3.g:273:14: ( LPAREN NUMBER RPAREN )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==LPAREN) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // antlr3/PLSQL3.g:273:16: LPAREN NUMBER RPAREN
                            {
                            LPAREN338=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_type_spec1833); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN338_tree = 
                            (Object)adaptor.create(LPAREN338)
                            ;
                            adaptor.addChild(root_0, LPAREN338_tree);
                            }

                            NUMBER339=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_type_spec1835); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER339_tree = 
                            (Object)adaptor.create(NUMBER339)
                            ;
                            adaptor.addChild(root_0, NUMBER339_tree);
                            }

                            RPAREN340=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_type_spec1837); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN340_tree = 
                            (Object)adaptor.create(RPAREN340)
                            ;
                            adaptor.addChild(root_0, RPAREN340_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 29, type_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_spec"


    public static class type_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_name"
    // antlr3/PLSQL3.g:276:1: type_name : identifier ( DOT identifier )* ;
    public final PLSQL3Parser.type_name_return type_name() throws RecognitionException {
        PLSQL3Parser.type_name_return retval = new PLSQL3Parser.type_name_return();
        retval.start = input.LT(1);

        int type_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT342=null;
        PLSQL3Parser.identifier_return identifier341 =null;

        PLSQL3Parser.identifier_return identifier343 =null;


        Object DOT342_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // antlr3/PLSQL3.g:277:2: ( identifier ( DOT identifier )* )
            // antlr3/PLSQL3.g:277:4: identifier ( DOT identifier )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_type_name1851);
            identifier341=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier341.getTree());

            // antlr3/PLSQL3.g:277:15: ( DOT identifier )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==DOT) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // antlr3/PLSQL3.g:277:17: DOT identifier
            	    {
            	    DOT342=(Token)match(input,DOT,FOLLOW_DOT_in_type_name1855); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT342_tree = 
            	    (Object)adaptor.create(DOT342)
            	    ;
            	    adaptor.addChild(root_0, DOT342_tree);
            	    }

            	    pushFollow(FOLLOW_identifier_in_type_name1857);
            	    identifier343=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier343.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 30, type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_name"


    public static class parameter_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter_specs"
    // antlr3/PLSQL3.g:280:1: parameter_specs : parameter_spec ( COMMA parameter_spec )* ;
    public final PLSQL3Parser.parameter_specs_return parameter_specs() throws RecognitionException {
        PLSQL3Parser.parameter_specs_return retval = new PLSQL3Parser.parameter_specs_return();
        retval.start = input.LT(1);

        int parameter_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA345=null;
        PLSQL3Parser.parameter_spec_return parameter_spec344 =null;

        PLSQL3Parser.parameter_spec_return parameter_spec346 =null;


        Object COMMA345_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // antlr3/PLSQL3.g:281:2: ( parameter_spec ( COMMA parameter_spec )* )
            // antlr3/PLSQL3.g:281:4: parameter_spec ( COMMA parameter_spec )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_parameter_spec_in_parameter_specs1871);
            parameter_spec344=parameter_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_spec344.getTree());

            // antlr3/PLSQL3.g:281:19: ( COMMA parameter_spec )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // antlr3/PLSQL3.g:281:21: COMMA parameter_spec
            	    {
            	    COMMA345=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameter_specs1875); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA345_tree = 
            	    (Object)adaptor.create(COMMA345)
            	    ;
            	    adaptor.addChild(root_0, COMMA345_tree);
            	    }

            	    pushFollow(FOLLOW_parameter_spec_in_parameter_specs1877);
            	    parameter_spec346=parameter_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_spec346.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 31, parameter_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_specs"


    public static class parameter_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter_spec"
    // antlr3/PLSQL3.g:284:1: parameter_spec : parameter_name ( 'IN' )? ( type_spec )? ;
    public final PLSQL3Parser.parameter_spec_return parameter_spec() throws RecognitionException {
        PLSQL3Parser.parameter_spec_return retval = new PLSQL3Parser.parameter_spec_return();
        retval.start = input.LT(1);

        int parameter_spec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal348=null;
        PLSQL3Parser.parameter_name_return parameter_name347 =null;

        PLSQL3Parser.type_spec_return type_spec349 =null;


        Object string_literal348_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // antlr3/PLSQL3.g:285:2: ( parameter_name ( 'IN' )? ( type_spec )? )
            // antlr3/PLSQL3.g:285:4: parameter_name ( 'IN' )? ( type_spec )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_parameter_name_in_parameter_spec1891);
            parameter_name347=parameter_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_name347.getTree());

            // antlr3/PLSQL3.g:285:19: ( 'IN' )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==99) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // antlr3/PLSQL3.g:285:21: 'IN'
                    {
                    string_literal348=(Token)match(input,99,FOLLOW_99_in_parameter_spec1895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal348_tree = 
                    (Object)adaptor.create(string_literal348)
                    ;
                    adaptor.addChild(root_0, string_literal348_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:285:29: ( type_spec )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==DOUBLEQUOTED_STRING||LA85_0==ID||(LA85_0 >= 58 && LA85_0 <= 63)||(LA85_0 >= 66 && LA85_0 <= 68)||(LA85_0 >= 74 && LA85_0 <= 76)||LA85_0==82||LA85_0==91||(LA85_0 >= 102 && LA85_0 <= 103)||LA85_0==109||LA85_0==112||(LA85_0 >= 114 && LA85_0 <= 117)||(LA85_0 >= 121 && LA85_0 <= 124)||(LA85_0 >= 131 && LA85_0 <= 132)||(LA85_0 >= 137 && LA85_0 <= 138)||LA85_0==144||LA85_0==150||LA85_0==160||(LA85_0 >= 162 && LA85_0 <= 163)) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // antlr3/PLSQL3.g:285:31: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_parameter_spec1902);
                    type_spec349=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec349.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 32, parameter_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_spec"


    public static class parameter_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter_name"
    // antlr3/PLSQL3.g:288:1: parameter_name : identifier ;
    public final PLSQL3Parser.parameter_name_return parameter_name() throws RecognitionException {
        PLSQL3Parser.parameter_name_return retval = new PLSQL3Parser.parameter_name_return();
        retval.start = input.LT(1);

        int parameter_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier350 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // antlr3/PLSQL3.g:289:2: ( identifier )
            // antlr3/PLSQL3.g:289:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_parameter_name1917);
            identifier350=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier350.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 33, parameter_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_name"


    public static class cursor_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_spec"
    // antlr3/PLSQL3.g:292:1: cursor_spec : keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMI !;
    public final PLSQL3Parser.cursor_spec_return cursor_spec() throws RecognitionException {
        PLSQL3Parser.cursor_spec_return retval = new PLSQL3Parser.cursor_spec_return();
        retval.start = input.LT(1);

        int cursor_spec_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN353=null;
        Token RPAREN355=null;
        Token SEMI358=null;
        PLSQL3Parser.keyCURSOR_return keyCURSOR351 =null;

        PLSQL3Parser.cursor_name_return cursor_name352 =null;

        PLSQL3Parser.parameter_specs_return parameter_specs354 =null;

        PLSQL3Parser.keyRETURN_return keyRETURN356 =null;

        PLSQL3Parser.return_type_return return_type357 =null;


        Object LPAREN353_tree=null;
        Object RPAREN355_tree=null;
        Object SEMI358_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // antlr3/PLSQL3.g:293:2: ( keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMI !)
            // antlr3/PLSQL3.g:293:4: keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMI !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyCURSOR_in_cursor_spec1928);
            keyCURSOR351=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURSOR351.getTree());

            pushFollow(FOLLOW_cursor_name_in_cursor_spec1930);
            cursor_name352=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name352.getTree());

            // antlr3/PLSQL3.g:294:3: ( LPAREN parameter_specs RPAREN )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==LPAREN) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // antlr3/PLSQL3.g:294:5: LPAREN parameter_specs RPAREN
                    {
                    LPAREN353=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_spec1937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN353_tree = 
                    (Object)adaptor.create(LPAREN353)
                    ;
                    adaptor.addChild(root_0, LPAREN353_tree);
                    }

                    pushFollow(FOLLOW_parameter_specs_in_cursor_spec1939);
                    parameter_specs354=parameter_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_specs354.getTree());

                    RPAREN355=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_spec1941); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN355_tree = 
                    (Object)adaptor.create(RPAREN355)
                    ;
                    adaptor.addChild(root_0, RPAREN355_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_keyRETURN_in_cursor_spec1948);
            keyRETURN356=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN356.getTree());

            pushFollow(FOLLOW_return_type_in_cursor_spec1950);
            return_type357=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type357.getTree());

            SEMI358=(Token)match(input,SEMI,FOLLOW_SEMI_in_cursor_spec1952); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 34, cursor_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_spec"


    public static class procedure_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_spec"
    // antlr3/PLSQL3.g:298:1: procedure_spec : 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMI ;
    public final PLSQL3Parser.procedure_spec_return procedure_spec() throws RecognitionException {
        PLSQL3Parser.procedure_spec_return retval = new PLSQL3Parser.procedure_spec_return();
        retval.start = input.LT(1);

        int procedure_spec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal359=null;
        Token LPAREN361=null;
        Token RPAREN363=null;
        Token SEMI364=null;
        PLSQL3Parser.procedure_name_return procedure_name360 =null;

        PLSQL3Parser.arguments_return arguments362 =null;


        Object string_literal359_tree=null;
        Object LPAREN361_tree=null;
        Object RPAREN363_tree=null;
        Object SEMI364_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // antlr3/PLSQL3.g:298:15: ( 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMI )
            // antlr3/PLSQL3.g:299:2: 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMI
            {
            root_0 = (Object)adaptor.nil();


            string_literal359=(Token)match(input,135,FOLLOW_135_in_procedure_spec1965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal359_tree = 
            (Object)adaptor.create(string_literal359)
            ;
            adaptor.addChild(root_0, string_literal359_tree);
            }

            pushFollow(FOLLOW_procedure_name_in_procedure_spec1967);
            procedure_name360=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name360.getTree());

            // antlr3/PLSQL3.g:300:2: ( LPAREN arguments RPAREN )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==LPAREN) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // antlr3/PLSQL3.g:300:4: LPAREN arguments RPAREN
                    {
                    LPAREN361=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_procedure_spec1973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN361_tree = 
                    (Object)adaptor.create(LPAREN361)
                    ;
                    adaptor.addChild(root_0, LPAREN361_tree);
                    }

                    pushFollow(FOLLOW_arguments_in_procedure_spec1975);
                    arguments362=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments362.getTree());

                    RPAREN363=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_procedure_spec1977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN363_tree = 
                    (Object)adaptor.create(RPAREN363)
                    ;
                    adaptor.addChild(root_0, RPAREN363_tree);
                    }

                    }
                    break;

            }


            SEMI364=(Token)match(input,SEMI,FOLLOW_SEMI_in_procedure_spec1982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI364_tree = 
            (Object)adaptor.create(SEMI364)
            ;
            adaptor.addChild(root_0, SEMI364_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 35, procedure_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "procedure_spec"


    public static class function_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_spec"
    // antlr3/PLSQL3.g:303:1: function_spec : 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMI ;
    public final PLSQL3Parser.function_spec_return function_spec() throws RecognitionException {
        PLSQL3Parser.function_spec_return retval = new PLSQL3Parser.function_spec_return();
        retval.start = input.LT(1);

        int function_spec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal365=null;
        Token LPAREN367=null;
        Token RPAREN369=null;
        Token SEMI372=null;
        PLSQL3Parser.function_name_return function_name366 =null;

        PLSQL3Parser.arguments_return arguments368 =null;

        PLSQL3Parser.keyRETURN_return keyRETURN370 =null;

        PLSQL3Parser.return_type_return return_type371 =null;


        Object string_literal365_tree=null;
        Object LPAREN367_tree=null;
        Object RPAREN369_tree=null;
        Object SEMI372_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // antlr3/PLSQL3.g:304:2: ( 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMI )
            // antlr3/PLSQL3.g:304:4: 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMI
            {
            root_0 = (Object)adaptor.nil();


            string_literal365=(Token)match(input,94,FOLLOW_94_in_function_spec1993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal365_tree = 
            (Object)adaptor.create(string_literal365)
            ;
            adaptor.addChild(root_0, string_literal365_tree);
            }

            pushFollow(FOLLOW_function_name_in_function_spec1995);
            function_name366=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name366.getTree());

            // antlr3/PLSQL3.g:305:3: ( LPAREN arguments RPAREN )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==LPAREN) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // antlr3/PLSQL3.g:305:5: LPAREN arguments RPAREN
                    {
                    LPAREN367=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_spec2002); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN367_tree = 
                    (Object)adaptor.create(LPAREN367)
                    ;
                    adaptor.addChild(root_0, LPAREN367_tree);
                    }

                    pushFollow(FOLLOW_arguments_in_function_spec2004);
                    arguments368=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments368.getTree());

                    RPAREN369=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_spec2006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN369_tree = 
                    (Object)adaptor.create(RPAREN369)
                    ;
                    adaptor.addChild(root_0, RPAREN369_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_keyRETURN_in_function_spec2013);
            keyRETURN370=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN370.getTree());

            pushFollow(FOLLOW_return_type_in_function_spec2015);
            return_type371=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type371.getTree());

            SEMI372=(Token)match(input,SEMI,FOLLOW_SEMI_in_function_spec2017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI372_tree = 
            (Object)adaptor.create(SEMI372)
            ;
            adaptor.addChild(root_0, SEMI372_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 36, function_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_spec"


    public static class exception_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_declaration"
    // antlr3/PLSQL3.g:309:1: exception_declaration : exception_name 'EXCEPTION' SEMI ;
    public final PLSQL3Parser.exception_declaration_return exception_declaration() throws RecognitionException {
        PLSQL3Parser.exception_declaration_return retval = new PLSQL3Parser.exception_declaration_return();
        retval.start = input.LT(1);

        int exception_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal374=null;
        Token SEMI375=null;
        PLSQL3Parser.exception_name_return exception_name373 =null;


        Object string_literal374_tree=null;
        Object SEMI375_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // antlr3/PLSQL3.g:310:2: ( exception_name 'EXCEPTION' SEMI )
            // antlr3/PLSQL3.g:310:4: exception_name 'EXCEPTION' SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_exception_name_in_exception_declaration2028);
            exception_name373=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name373.getTree());

            string_literal374=(Token)match(input,86,FOLLOW_86_in_exception_declaration2030); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal374_tree = 
            (Object)adaptor.create(string_literal374)
            ;
            adaptor.addChild(root_0, string_literal374_tree);
            }

            SEMI375=(Token)match(input,SEMI,FOLLOW_SEMI_in_exception_declaration2032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI375_tree = 
            (Object)adaptor.create(SEMI375)
            ;
            adaptor.addChild(root_0, SEMI375_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 37, exception_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_declaration"


    public static class exception_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_names"
    // antlr3/PLSQL3.g:313:1: exception_names : exception_name ( 'OR' exception_name )* ;
    public final PLSQL3Parser.exception_names_return exception_names() throws RecognitionException {
        PLSQL3Parser.exception_names_return retval = new PLSQL3Parser.exception_names_return();
        retval.start = input.LT(1);

        int exception_names_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal377=null;
        PLSQL3Parser.exception_name_return exception_name376 =null;

        PLSQL3Parser.exception_name_return exception_name378 =null;


        Object string_literal377_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // antlr3/PLSQL3.g:314:2: ( exception_name ( 'OR' exception_name )* )
            // antlr3/PLSQL3.g:314:4: exception_name ( 'OR' exception_name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_exception_name_in_exception_names2043);
            exception_name376=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name376.getTree());

            // antlr3/PLSQL3.g:314:19: ( 'OR' exception_name )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==127) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // antlr3/PLSQL3.g:314:21: 'OR' exception_name
            	    {
            	    string_literal377=(Token)match(input,127,FOLLOW_127_in_exception_names2047); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal377_tree = 
            	    (Object)adaptor.create(string_literal377)
            	    ;
            	    adaptor.addChild(root_0, string_literal377_tree);
            	    }

            	    pushFollow(FOLLOW_exception_name_in_exception_names2049);
            	    exception_name378=exception_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name378.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 38, exception_names_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_names"


    public static class exception_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_name"
    // antlr3/PLSQL3.g:317:1: exception_name : ( exception_package_name DOT )? identifier ;
    public final PLSQL3Parser.exception_name_return exception_name() throws RecognitionException {
        PLSQL3Parser.exception_name_return retval = new PLSQL3Parser.exception_name_return();
        retval.start = input.LT(1);

        int exception_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT380=null;
        PLSQL3Parser.exception_package_name_return exception_package_name379 =null;

        PLSQL3Parser.identifier_return identifier381 =null;


        Object DOT380_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // antlr3/PLSQL3.g:318:2: ( ( exception_package_name DOT )? identifier )
            // antlr3/PLSQL3.g:318:4: ( exception_package_name DOT )? identifier
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:318:4: ( exception_package_name DOT )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==DOUBLEQUOTED_STRING||LA90_0==ID) ) {
                int LA90_1 = input.LA(2);

                if ( (LA90_1==DOT) ) {
                    alt90=1;
                }
            }
            switch (alt90) {
                case 1 :
                    // antlr3/PLSQL3.g:318:6: exception_package_name DOT
                    {
                    pushFollow(FOLLOW_exception_package_name_in_exception_name2065);
                    exception_package_name379=exception_package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_package_name379.getTree());

                    DOT380=(Token)match(input,DOT,FOLLOW_DOT_in_exception_name2067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT380_tree = 
                    (Object)adaptor.create(DOT380)
                    ;
                    adaptor.addChild(root_0, DOT380_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_exception_name2072);
            identifier381=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier381.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 39, exception_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_name"


    public static class exception_package_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_package_name"
    // antlr3/PLSQL3.g:321:1: exception_package_name : identifier ;
    public final PLSQL3Parser.exception_package_name_return exception_package_name() throws RecognitionException {
        PLSQL3Parser.exception_package_name_return retval = new PLSQL3Parser.exception_package_name_return();
        retval.start = input.LT(1);

        int exception_package_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier382 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // antlr3/PLSQL3.g:322:2: ( identifier )
            // antlr3/PLSQL3.g:322:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_exception_package_name2083);
            identifier382=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier382.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 40, exception_package_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_package_name"


    public static class record_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_declaration"
    // antlr3/PLSQL3.g:331:1: record_declaration : record_type_dec ;
    public final PLSQL3Parser.record_declaration_return record_declaration() throws RecognitionException {
        PLSQL3Parser.record_declaration_return retval = new PLSQL3Parser.record_declaration_return();
        retval.start = input.LT(1);

        int record_declaration_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.record_type_dec_return record_type_dec383 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // antlr3/PLSQL3.g:332:2: ( record_type_dec )
            // antlr3/PLSQL3.g:332:4: record_type_dec
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_record_type_dec_in_record_declaration2102);
            record_type_dec383=record_type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_type_dec383.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 41, record_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "record_declaration"


    public static class record_type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_type_dec"
    // antlr3/PLSQL3.g:336:1: record_type_dec : keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMI ;
    public final PLSQL3Parser.record_type_dec_return record_type_dec() throws RecognitionException {
        PLSQL3Parser.record_type_dec_return retval = new PLSQL3Parser.record_type_dec_return();
        retval.start = input.LT(1);

        int record_type_dec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal386=null;
        Token LPAREN388=null;
        Token RPAREN390=null;
        Token SEMI391=null;
        PLSQL3Parser.keyTYPE_return keyTYPE384 =null;

        PLSQL3Parser.type_name_return type_name385 =null;

        PLSQL3Parser.keyRECORD_return keyRECORD387 =null;

        PLSQL3Parser.field_specs_return field_specs389 =null;


        Object string_literal386_tree=null;
        Object LPAREN388_tree=null;
        Object RPAREN390_tree=null;
        Object SEMI391_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // antlr3/PLSQL3.g:337:2: ( keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMI )
            // antlr3/PLSQL3.g:337:4: keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyTYPE_in_record_type_dec2115);
            keyTYPE384=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE384.getTree());

            pushFollow(FOLLOW_type_name_in_record_type_dec2117);
            type_name385=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name385.getTree());

            string_literal386=(Token)match(input,106,FOLLOW_106_in_record_type_dec2119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal386_tree = 
            (Object)adaptor.create(string_literal386)
            ;
            adaptor.addChild(root_0, string_literal386_tree);
            }

            pushFollow(FOLLOW_keyRECORD_in_record_type_dec2121);
            keyRECORD387=keyRECORD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRECORD387.getTree());

            LPAREN388=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_record_type_dec2126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN388_tree = 
            (Object)adaptor.create(LPAREN388)
            ;
            adaptor.addChild(root_0, LPAREN388_tree);
            }

            pushFollow(FOLLOW_field_specs_in_record_type_dec2128);
            field_specs389=field_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_specs389.getTree());

            RPAREN390=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_record_type_dec2130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN390_tree = 
            (Object)adaptor.create(RPAREN390)
            ;
            adaptor.addChild(root_0, RPAREN390_tree);
            }

            SEMI391=(Token)match(input,SEMI,FOLLOW_SEMI_in_record_type_dec2132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI391_tree = 
            (Object)adaptor.create(SEMI391)
            ;
            adaptor.addChild(root_0, SEMI391_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 42, record_type_dec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "record_type_dec"


    public static class field_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_specs"
    // antlr3/PLSQL3.g:345:1: field_specs : field_spec ( COMMA field_spec )* ;
    public final PLSQL3Parser.field_specs_return field_specs() throws RecognitionException {
        PLSQL3Parser.field_specs_return retval = new PLSQL3Parser.field_specs_return();
        retval.start = input.LT(1);

        int field_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA393=null;
        PLSQL3Parser.field_spec_return field_spec392 =null;

        PLSQL3Parser.field_spec_return field_spec394 =null;


        Object COMMA393_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // antlr3/PLSQL3.g:346:2: ( field_spec ( COMMA field_spec )* )
            // antlr3/PLSQL3.g:346:4: field_spec ( COMMA field_spec )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_spec_in_field_specs2147);
            field_spec392=field_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_spec392.getTree());

            // antlr3/PLSQL3.g:346:15: ( COMMA field_spec )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // antlr3/PLSQL3.g:346:17: COMMA field_spec
            	    {
            	    COMMA393=(Token)match(input,COMMA,FOLLOW_COMMA_in_field_specs2151); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA393_tree = 
            	    (Object)adaptor.create(COMMA393)
            	    ;
            	    adaptor.addChild(root_0, COMMA393_tree);
            	    }

            	    pushFollow(FOLLOW_field_spec_in_field_specs2153);
            	    field_spec394=field_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_spec394.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 43, field_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "field_specs"


    public static class field_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_spec"
    // antlr3/PLSQL3.g:348:1: field_spec : column_name type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? ;
    public final PLSQL3Parser.field_spec_return field_spec() throws RecognitionException {
        PLSQL3Parser.field_spec_return retval = new PLSQL3Parser.field_spec_return();
        retval.start = input.LT(1);

        int field_spec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal397=null;
        Token string_literal398=null;
        Token set399=null;
        PLSQL3Parser.column_name_return column_name395 =null;

        PLSQL3Parser.type_spec_return type_spec396 =null;

        PLSQL3Parser.plsql_expression_return plsql_expression400 =null;


        Object string_literal397_tree=null;
        Object string_literal398_tree=null;
        Object set399_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // antlr3/PLSQL3.g:349:2: ( column_name type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? )
            // antlr3/PLSQL3.g:349:4: column_name type_spec ( 'NOT' 'NULL' )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_column_name_in_field_spec2166);
            column_name395=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name395.getTree());

            pushFollow(FOLLOW_type_spec_in_field_spec2168);
            type_spec396=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec396.getTree());

            // antlr3/PLSQL3.g:350:3: ( 'NOT' 'NULL' )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==118) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // antlr3/PLSQL3.g:350:4: 'NOT' 'NULL'
                    {
                    string_literal397=(Token)match(input,118,FOLLOW_118_in_field_spec2173); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal397_tree = 
                    (Object)adaptor.create(string_literal397)
                    ;
                    adaptor.addChild(root_0, string_literal397_tree);
                    }

                    string_literal398=(Token)match(input,120,FOLLOW_120_in_field_spec2175); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal398_tree = 
                    (Object)adaptor.create(string_literal398)
                    ;
                    adaptor.addChild(root_0, string_literal398_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:351:3: ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==ASSIGN||LA93_0==78) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // antlr3/PLSQL3.g:351:5: ( ASSIGN | 'DEFAULT' ) plsql_expression
                    {
                    set399=(Token)input.LT(1);

                    if ( input.LA(1)==ASSIGN||input.LA(1)==78 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set399)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_plsql_expression_in_field_spec2194);
                    plsql_expression400=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression400.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 44, field_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "field_spec"


    public static class plsql_table_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_table_declaration"
    // antlr3/PLSQL3.g:354:1: plsql_table_declaration : table_type_dec ;
    public final PLSQL3Parser.plsql_table_declaration_return plsql_table_declaration() throws RecognitionException {
        PLSQL3Parser.plsql_table_declaration_return retval = new PLSQL3Parser.plsql_table_declaration_return();
        retval.start = input.LT(1);

        int plsql_table_declaration_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.table_type_dec_return table_type_dec401 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // antlr3/PLSQL3.g:355:2: ( table_type_dec )
            // antlr3/PLSQL3.g:355:4: table_type_dec
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_table_type_dec_in_plsql_table_declaration2207);
            table_type_dec401=table_type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_type_dec401.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 45, plsql_table_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_table_declaration"


    public static class table_type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_type_dec"
    // antlr3/PLSQL3.g:359:1: table_type_dec : keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMI ;
    public final PLSQL3Parser.table_type_dec_return table_type_dec() throws RecognitionException {
        PLSQL3Parser.table_type_dec_return retval = new PLSQL3Parser.table_type_dec_return();
        retval.start = input.LT(1);

        int table_type_dec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal404=null;
        Token string_literal405=null;
        Token string_literal406=null;
        Token string_literal408=null;
        Token string_literal409=null;
        Token string_literal410=null;
        Token string_literal411=null;
        Token string_literal412=null;
        Token string_literal413=null;
        Token string_literal414=null;
        Token LPAREN415=null;
        Token RPAREN417=null;
        Token SEMI418=null;
        PLSQL3Parser.keyTYPE_return keyTYPE402 =null;

        PLSQL3Parser.type_name_return type_name403 =null;

        PLSQL3Parser.type_spec_return type_spec407 =null;

        PLSQL3Parser.integer_return integer416 =null;


        Object string_literal404_tree=null;
        Object string_literal405_tree=null;
        Object string_literal406_tree=null;
        Object string_literal408_tree=null;
        Object string_literal409_tree=null;
        Object string_literal410_tree=null;
        Object string_literal411_tree=null;
        Object string_literal412_tree=null;
        Object string_literal413_tree=null;
        Object string_literal414_tree=null;
        Object LPAREN415_tree=null;
        Object RPAREN417_tree=null;
        Object SEMI418_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // antlr3/PLSQL3.g:360:2: ( keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMI )
            // antlr3/PLSQL3.g:360:4: keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyTYPE_in_table_type_dec2219);
            keyTYPE402=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE402.getTree());

            pushFollow(FOLLOW_type_name_in_table_type_dec2221);
            type_name403=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name403.getTree());

            string_literal404=(Token)match(input,106,FOLLOW_106_in_table_type_dec2223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal404_tree = 
            (Object)adaptor.create(string_literal404)
            ;
            adaptor.addChild(root_0, string_literal404_tree);
            }

            string_literal405=(Token)match(input,153,FOLLOW_153_in_table_type_dec2225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal405_tree = 
            (Object)adaptor.create(string_literal405)
            ;
            adaptor.addChild(root_0, string_literal405_tree);
            }

            string_literal406=(Token)match(input,125,FOLLOW_125_in_table_type_dec2230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal406_tree = 
            (Object)adaptor.create(string_literal406)
            ;
            adaptor.addChild(root_0, string_literal406_tree);
            }

            pushFollow(FOLLOW_type_spec_in_table_type_dec2232);
            type_spec407=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec407.getTree());

            // antlr3/PLSQL3.g:361:18: ( 'NOT' 'NULL' )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==118) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // antlr3/PLSQL3.g:361:20: 'NOT' 'NULL'
                    {
                    string_literal408=(Token)match(input,118,FOLLOW_118_in_table_type_dec2236); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal408_tree = 
                    (Object)adaptor.create(string_literal408)
                    ;
                    adaptor.addChild(root_0, string_literal408_tree);
                    }

                    string_literal409=(Token)match(input,120,FOLLOW_120_in_table_type_dec2238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal409_tree = 
                    (Object)adaptor.create(string_literal409)
                    ;
                    adaptor.addChild(root_0, string_literal409_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:362:3: ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==100) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // antlr3/PLSQL3.g:362:5: 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN )
                    {
                    string_literal410=(Token)match(input,100,FOLLOW_100_in_table_type_dec2247); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal410_tree = 
                    (Object)adaptor.create(string_literal410)
                    ;
                    adaptor.addChild(root_0, string_literal410_tree);
                    }

                    string_literal411=(Token)match(input,64,FOLLOW_64_in_table_type_dec2249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal411_tree = 
                    (Object)adaptor.create(string_literal411)
                    ;
                    adaptor.addChild(root_0, string_literal411_tree);
                    }

                    // antlr3/PLSQL3.g:363:4: ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN )
                    int alt95=3;
                    switch ( input.LA(1) ) {
                    case 61:
                        {
                        alt95=1;
                        }
                        break;
                    case 131:
                        {
                        alt95=2;
                        }
                        break;
                    case 163:
                        {
                        alt95=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 95, 0, input);

                        throw nvae;

                    }

                    switch (alt95) {
                        case 1 :
                            // antlr3/PLSQL3.g:363:6: 'BINARY_INTEGER'
                            {
                            string_literal412=(Token)match(input,61,FOLLOW_61_in_table_type_dec2257); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal412_tree = 
                            (Object)adaptor.create(string_literal412)
                            ;
                            adaptor.addChild(root_0, string_literal412_tree);
                            }

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:364:6: 'PLS_INTEGER'
                            {
                            string_literal413=(Token)match(input,131,FOLLOW_131_in_table_type_dec2264); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal413_tree = 
                            (Object)adaptor.create(string_literal413)
                            ;
                            adaptor.addChild(root_0, string_literal413_tree);
                            }

                            }
                            break;
                        case 3 :
                            // antlr3/PLSQL3.g:365:6: 'VARCHAR2' LPAREN integer RPAREN
                            {
                            string_literal414=(Token)match(input,163,FOLLOW_163_in_table_type_dec2271); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal414_tree = 
                            (Object)adaptor.create(string_literal414)
                            ;
                            adaptor.addChild(root_0, string_literal414_tree);
                            }

                            LPAREN415=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_type_dec2273); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN415_tree = 
                            (Object)adaptor.create(LPAREN415)
                            ;
                            adaptor.addChild(root_0, LPAREN415_tree);
                            }

                            pushFollow(FOLLOW_integer_in_table_type_dec2275);
                            integer416=integer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer416.getTree());

                            RPAREN417=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_type_dec2277); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN417_tree = 
                            (Object)adaptor.create(RPAREN417)
                            ;
                            adaptor.addChild(root_0, RPAREN417_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            SEMI418=(Token)match(input,SEMI,FOLLOW_SEMI_in_table_type_dec2291); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI418_tree = 
            (Object)adaptor.create(SEMI418)
            ;
            adaptor.addChild(root_0, SEMI418_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 46, table_type_dec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_type_dec"


    public static class table_var_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_var_dec"
    // antlr3/PLSQL3.g:371:1: table_var_dec : plsql_table_name type_name SEMI ;
    public final PLSQL3Parser.table_var_dec_return table_var_dec() throws RecognitionException {
        PLSQL3Parser.table_var_dec_return retval = new PLSQL3Parser.table_var_dec_return();
        retval.start = input.LT(1);

        int table_var_dec_StartIndex = input.index();

        Object root_0 = null;

        Token SEMI421=null;
        PLSQL3Parser.plsql_table_name_return plsql_table_name419 =null;

        PLSQL3Parser.type_name_return type_name420 =null;


        Object SEMI421_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // antlr3/PLSQL3.g:372:2: ( plsql_table_name type_name SEMI )
            // antlr3/PLSQL3.g:372:4: plsql_table_name type_name SEMI
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_table_name_in_table_var_dec2302);
            plsql_table_name419=plsql_table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_name419.getTree());

            pushFollow(FOLLOW_type_name_in_table_var_dec2304);
            type_name420=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name420.getTree());

            SEMI421=(Token)match(input,SEMI,FOLLOW_SEMI_in_table_var_dec2306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI421_tree = 
            (Object)adaptor.create(SEMI421)
            ;
            adaptor.addChild(root_0, SEMI421_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 47, table_var_dec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_var_dec"


    public static class plsql_table_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_table_name"
    // antlr3/PLSQL3.g:375:1: plsql_table_name : identifier ( DOT identifier )* ;
    public final PLSQL3Parser.plsql_table_name_return plsql_table_name() throws RecognitionException {
        PLSQL3Parser.plsql_table_name_return retval = new PLSQL3Parser.plsql_table_name_return();
        retval.start = input.LT(1);

        int plsql_table_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT423=null;
        PLSQL3Parser.identifier_return identifier422 =null;

        PLSQL3Parser.identifier_return identifier424 =null;


        Object DOT423_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // antlr3/PLSQL3.g:376:2: ( identifier ( DOT identifier )* )
            // antlr3/PLSQL3.g:376:4: identifier ( DOT identifier )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_plsql_table_name2317);
            identifier422=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier422.getTree());

            // antlr3/PLSQL3.g:376:15: ( DOT identifier )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==DOT) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // antlr3/PLSQL3.g:376:17: DOT identifier
            	    {
            	    DOT423=(Token)match(input,DOT,FOLLOW_DOT_in_plsql_table_name2321); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT423_tree = 
            	    (Object)adaptor.create(DOT423)
            	    ;
            	    adaptor.addChild(root_0, DOT423_tree);
            	    }

            	    pushFollow(FOLLOW_identifier_in_plsql_table_name2323);
            	    identifier424=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier424.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 48, plsql_table_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_table_name"


    public static class varray_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varray_declaration"
    // antlr3/PLSQL3.g:379:1: varray_declaration : keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )? ;
    public final PLSQL3Parser.varray_declaration_return varray_declaration() throws RecognitionException {
        PLSQL3Parser.varray_declaration_return retval = new PLSQL3Parser.varray_declaration_return();
        retval.start = input.LT(1);

        int varray_declaration_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal427=null;
        Token LPAREN431=null;
        Token RPAREN433=null;
        Token string_literal434=null;
        Token string_literal436=null;
        Token string_literal437=null;
        PLSQL3Parser.keyTYPE_return keyTYPE425 =null;

        PLSQL3Parser.type_name_return type_name426 =null;

        PLSQL3Parser.keyVARRAY_return keyVARRAY428 =null;

        PLSQL3Parser.keyVARYING_return keyVARYING429 =null;

        PLSQL3Parser.keyARRAY_return keyARRAY430 =null;

        PLSQL3Parser.integer_return integer432 =null;

        PLSQL3Parser.type_spec_return type_spec435 =null;


        Object string_literal427_tree=null;
        Object LPAREN431_tree=null;
        Object RPAREN433_tree=null;
        Object string_literal434_tree=null;
        Object string_literal436_tree=null;
        Object string_literal437_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // antlr3/PLSQL3.g:380:2: ( keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )? )
            // antlr3/PLSQL3.g:380:4: keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyTYPE_in_varray_declaration2337);
            keyTYPE425=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE425.getTree());

            pushFollow(FOLLOW_type_name_in_varray_declaration2339);
            type_name426=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name426.getTree());

            string_literal427=(Token)match(input,106,FOLLOW_106_in_varray_declaration2341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal427_tree = 
            (Object)adaptor.create(string_literal427)
            ;
            adaptor.addChild(root_0, string_literal427_tree);
            }

            // antlr3/PLSQL3.g:381:3: ( keyVARRAY | keyVARYING keyARRAY )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==ID) ) {
                int LA98_1 = input.LA(2);

                if ( (LA98_1==LPAREN) ) {
                    alt98=1;
                }
                else if ( (LA98_1==ID) ) {
                    alt98=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }
            switch (alt98) {
                case 1 :
                    // antlr3/PLSQL3.g:381:5: keyVARRAY
                    {
                    pushFollow(FOLLOW_keyVARRAY_in_varray_declaration2348);
                    keyVARRAY428=keyVARRAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARRAY428.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:381:17: keyVARYING keyARRAY
                    {
                    pushFollow(FOLLOW_keyVARYING_in_varray_declaration2352);
                    keyVARYING429=keyVARYING();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING429.getTree());

                    pushFollow(FOLLOW_keyARRAY_in_varray_declaration2354);
                    keyARRAY430=keyARRAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyARRAY430.getTree());

                    }
                    break;

            }


            LPAREN431=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_varray_declaration2358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN431_tree = 
            (Object)adaptor.create(LPAREN431)
            ;
            adaptor.addChild(root_0, LPAREN431_tree);
            }

            pushFollow(FOLLOW_integer_in_varray_declaration2360);
            integer432=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer432.getTree());

            RPAREN433=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_varray_declaration2362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN433_tree = 
            (Object)adaptor.create(RPAREN433)
            ;
            adaptor.addChild(root_0, RPAREN433_tree);
            }

            string_literal434=(Token)match(input,125,FOLLOW_125_in_varray_declaration2366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal434_tree = 
            (Object)adaptor.create(string_literal434)
            ;
            adaptor.addChild(root_0, string_literal434_tree);
            }

            pushFollow(FOLLOW_type_spec_in_varray_declaration2368);
            type_spec435=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec435.getTree());

            // antlr3/PLSQL3.g:382:18: ( 'NOT' 'NULL' )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==118) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // antlr3/PLSQL3.g:382:20: 'NOT' 'NULL'
                    {
                    string_literal436=(Token)match(input,118,FOLLOW_118_in_varray_declaration2372); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal436_tree = 
                    (Object)adaptor.create(string_literal436)
                    ;
                    adaptor.addChild(root_0, string_literal436_tree);
                    }

                    string_literal437=(Token)match(input,120,FOLLOW_120_in_varray_declaration2374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal437_tree = 
                    (Object)adaptor.create(string_literal437)
                    ;
                    adaptor.addChild(root_0, string_literal437_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 49, varray_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varray_declaration"


    public static class procedure_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_declaration"
    // antlr3/PLSQL3.g:385:1: procedure_declaration : procedure_body ;
    public final PLSQL3Parser.procedure_declaration_return procedure_declaration() throws RecognitionException {
        PLSQL3Parser.procedure_declaration_return retval = new PLSQL3Parser.procedure_declaration_return();
        retval.start = input.LT(1);

        int procedure_declaration_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.procedure_body_return procedure_body438 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // antlr3/PLSQL3.g:386:2: ( procedure_body )
            // antlr3/PLSQL3.g:386:4: procedure_body
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_procedure_body_in_procedure_declaration2388);
            procedure_body438=procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_body438.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 50, procedure_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"


    public static class procedure_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_body"
    // antlr3/PLSQL3.g:389:1: procedure_body : ( proc_fun_start )? 'PROCEDURE' ^ procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMI ;
    public final PLSQL3Parser.procedure_body_return procedure_body() throws RecognitionException {
        PLSQL3Parser.procedure_body_return retval = new PLSQL3Parser.procedure_body_return();
        retval.start = input.LT(1);

        int procedure_body_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal440=null;
        Token LPAREN442=null;
        Token COMMA444=null;
        Token RPAREN446=null;
        Token set447=null;
        Token string_literal449=null;
        Token string_literal451=null;
        Token string_literal453=null;
        Token SEMI455=null;
        PLSQL3Parser.proc_fun_start_return proc_fun_start439 =null;

        PLSQL3Parser.procedure_name_return procedure_name441 =null;

        PLSQL3Parser.argument_return argument443 =null;

        PLSQL3Parser.argument_return argument445 =null;

        PLSQL3Parser.declare_spec_return declare_spec448 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements450 =null;

        PLSQL3Parser.exception_handler_return exception_handler452 =null;

        PLSQL3Parser.procedure_name_return procedure_name454 =null;


        Object string_literal440_tree=null;
        Object LPAREN442_tree=null;
        Object COMMA444_tree=null;
        Object RPAREN446_tree=null;
        Object set447_tree=null;
        Object string_literal449_tree=null;
        Object string_literal451_tree=null;
        Object string_literal453_tree=null;
        Object SEMI455_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // antlr3/PLSQL3.g:390:2: ( ( proc_fun_start )? 'PROCEDURE' ^ procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMI )
            // antlr3/PLSQL3.g:390:4: ( proc_fun_start )? 'PROCEDURE' ^ procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMI
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:390:4: ( proc_fun_start )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==73) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // antlr3/PLSQL3.g:390:6: proc_fun_start
                    {
                    pushFollow(FOLLOW_proc_fun_start_in_procedure_body2401);
                    proc_fun_start439=proc_fun_start();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, proc_fun_start439.getTree());

                    }
                    break;

            }


            string_literal440=(Token)match(input,135,FOLLOW_135_in_procedure_body2406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal440_tree = 
            (Object)adaptor.create(string_literal440)
            ;
            root_0 = (Object)adaptor.becomeRoot(string_literal440_tree, root_0);
            }

            pushFollow(FOLLOW_procedure_name_in_procedure_body2409);
            procedure_name441=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name441.getTree());

            // antlr3/PLSQL3.g:391:3: ( LPAREN argument ( COMMA argument )* RPAREN )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==LPAREN) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // antlr3/PLSQL3.g:391:5: LPAREN argument ( COMMA argument )* RPAREN
                    {
                    LPAREN442=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_procedure_body2416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN442_tree = 
                    (Object)adaptor.create(LPAREN442)
                    ;
                    adaptor.addChild(root_0, LPAREN442_tree);
                    }

                    pushFollow(FOLLOW_argument_in_procedure_body2418);
                    argument443=argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument443.getTree());

                    // antlr3/PLSQL3.g:391:21: ( COMMA argument )*
                    loop101:
                    do {
                        int alt101=2;
                        int LA101_0 = input.LA(1);

                        if ( (LA101_0==COMMA) ) {
                            alt101=1;
                        }


                        switch (alt101) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:391:23: COMMA argument
                    	    {
                    	    COMMA444=(Token)match(input,COMMA,FOLLOW_COMMA_in_procedure_body2422); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA444_tree = 
                    	    (Object)adaptor.create(COMMA444)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA444_tree);
                    	    }

                    	    pushFollow(FOLLOW_argument_in_procedure_body2424);
                    	    argument445=argument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument445.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop101;
                        }
                    } while (true);


                    RPAREN446=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_procedure_body2429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN446_tree = 
                    (Object)adaptor.create(RPAREN446)
                    ;
                    adaptor.addChild(root_0, RPAREN446_tree);
                    }

                    }
                    break;

            }


            set447=(Token)input.LT(1);

            if ( input.LA(1)==53||input.LA(1)==106 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set447)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // antlr3/PLSQL3.g:394:3: ( ( declare_spec )=> ( declare_spec )* )
            // antlr3/PLSQL3.g:394:5: ( declare_spec )=> ( declare_spec )*
            {
            // antlr3/PLSQL3.g:394:25: ( declare_spec )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==DOUBLEQUOTED_STRING||LA103_0==ID||LA103_0==73||LA103_0==94||LA103_0==133||LA103_0==135) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // antlr3/PLSQL3.g:394:27: declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_procedure_body2464);
            	    declare_spec448=declare_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declare_spec448.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }


            // antlr3/PLSQL3.g:395:3: ( 'BEGIN' )
            // antlr3/PLSQL3.g:395:5: 'BEGIN'
            {
            string_literal449=(Token)match(input,56,FOLLOW_56_in_procedure_body2475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal449_tree = 
            (Object)adaptor.create(string_literal449)
            ;
            adaptor.addChild(root_0, string_literal449_tree);
            }

            }


            // antlr3/PLSQL3.g:396:3: ( seq_of_statements )
            // antlr3/PLSQL3.g:396:5: seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_procedure_body2483);
            seq_of_statements450=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements450.getTree());

            }


            // antlr3/PLSQL3.g:397:3: ( 'EXCEPTION' ( exception_handler )* )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==86) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // antlr3/PLSQL3.g:397:5: 'EXCEPTION' ( exception_handler )*
                    {
                    string_literal451=(Token)match(input,86,FOLLOW_86_in_procedure_body2491); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal451_tree = 
                    (Object)adaptor.create(string_literal451)
                    ;
                    adaptor.addChild(root_0, string_literal451_tree);
                    }

                    // antlr3/PLSQL3.g:397:17: ( exception_handler )*
                    loop104:
                    do {
                        int alt104=2;
                        int LA104_0 = input.LA(1);

                        if ( (LA104_0==164) ) {
                            alt104=1;
                        }


                        switch (alt104) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:397:19: exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_procedure_body2495);
                    	    exception_handler452=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler452.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop104;
                        }
                    } while (true);


                    }
                    break;

            }


            string_literal453=(Token)match(input,85,FOLLOW_85_in_procedure_body2505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal453_tree = 
            (Object)adaptor.create(string_literal453)
            ;
            adaptor.addChild(root_0, string_literal453_tree);
            }

            // antlr3/PLSQL3.g:398:9: ( procedure_name )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==DOUBLEQUOTED_STRING||LA106_0==ID||LA106_0==QUOTED_STRING) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // antlr3/PLSQL3.g:398:11: procedure_name
                    {
                    pushFollow(FOLLOW_procedure_name_in_procedure_body2509);
                    procedure_name454=procedure_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name454.getTree());

                    }
                    break;

            }


            SEMI455=(Token)match(input,SEMI,FOLLOW_SEMI_in_procedure_body2514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI455_tree = 
            (Object)adaptor.create(SEMI455)
            ;
            adaptor.addChild(root_0, SEMI455_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 51, procedure_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "procedure_body"


    public static class begin_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "begin_block"
    // antlr3/PLSQL3.g:401:1: begin_block : 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ;
    public final PLSQL3Parser.begin_block_return begin_block() throws RecognitionException {
        PLSQL3Parser.begin_block_return retval = new PLSQL3Parser.begin_block_return();
        retval.start = input.LT(1);

        int begin_block_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal456=null;
        Token string_literal458=null;
        Token string_literal460=null;
        PLSQL3Parser.seq_of_statements_return seq_of_statements457 =null;

        PLSQL3Parser.exception_handler_return exception_handler459 =null;


        Object string_literal456_tree=null;
        Object string_literal458_tree=null;
        Object string_literal460_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // antlr3/PLSQL3.g:402:2: ( 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' )
            // antlr3/PLSQL3.g:402:4: 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END'
            {
            root_0 = (Object)adaptor.nil();


            string_literal456=(Token)match(input,56,FOLLOW_56_in_begin_block2525); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal456_tree = 
            (Object)adaptor.create(string_literal456)
            ;
            adaptor.addChild(root_0, string_literal456_tree);
            }

            // antlr3/PLSQL3.g:403:3: ( seq_of_statements )
            // antlr3/PLSQL3.g:403:5: seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_begin_block2531);
            seq_of_statements457=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements457.getTree());

            }


            // antlr3/PLSQL3.g:404:3: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==86) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // antlr3/PLSQL3.g:404:5: 'EXCEPTION' ( exception_handler )+
                    {
                    string_literal458=(Token)match(input,86,FOLLOW_86_in_begin_block2539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal458_tree = 
                    (Object)adaptor.create(string_literal458)
                    ;
                    adaptor.addChild(root_0, string_literal458_tree);
                    }

                    // antlr3/PLSQL3.g:404:17: ( exception_handler )+
                    int cnt107=0;
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==164) ) {
                            alt107=1;
                        }


                        switch (alt107) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:404:19: exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_begin_block2543);
                    	    exception_handler459=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler459.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt107 >= 1 ) break loop107;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(107, input);
                                throw eee;
                        }
                        cnt107++;
                    } while (true);


                    }
                    break;

            }


            string_literal460=(Token)match(input,85,FOLLOW_85_in_begin_block2553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal460_tree = 
            (Object)adaptor.create(string_literal460)
            ;
            adaptor.addChild(root_0, string_literal460_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 52, begin_block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "begin_block"


    public static class exception_handler_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_handler"
    // antlr3/PLSQL3.g:409:1: exception_handler : 'WHEN' exception_names 'THEN' seq_of_statements ;
    public final PLSQL3Parser.exception_handler_return exception_handler() throws RecognitionException {
        PLSQL3Parser.exception_handler_return retval = new PLSQL3Parser.exception_handler_return();
        retval.start = input.LT(1);

        int exception_handler_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal461=null;
        Token string_literal463=null;
        PLSQL3Parser.exception_names_return exception_names462 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements464 =null;


        Object string_literal461_tree=null;
        Object string_literal463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // antlr3/PLSQL3.g:410:2: ( 'WHEN' exception_names 'THEN' seq_of_statements )
            // antlr3/PLSQL3.g:410:4: 'WHEN' exception_names 'THEN' seq_of_statements
            {
            root_0 = (Object)adaptor.nil();


            string_literal461=(Token)match(input,164,FOLLOW_164_in_exception_handler2565); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal461_tree = 
            (Object)adaptor.create(string_literal461)
            ;
            adaptor.addChild(root_0, string_literal461_tree);
            }

            pushFollow(FOLLOW_exception_names_in_exception_handler2567);
            exception_names462=exception_names();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_names462.getTree());

            string_literal463=(Token)match(input,154,FOLLOW_154_in_exception_handler2569); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal463_tree = 
            (Object)adaptor.create(string_literal463)
            ;
            adaptor.addChild(root_0, string_literal463_tree);
            }

            pushFollow(FOLLOW_seq_of_statements_in_exception_handler2573);
            seq_of_statements464=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements464.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 53, exception_handler_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exception_handler"


    public static class proc_fun_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "proc_fun_start"
    // antlr3/PLSQL3.g:414:1: proc_fun_start : 'CREATE' ( 'OR' keyREPLACE )? ;
    public final PLSQL3Parser.proc_fun_start_return proc_fun_start() throws RecognitionException {
        PLSQL3Parser.proc_fun_start_return retval = new PLSQL3Parser.proc_fun_start_return();
        retval.start = input.LT(1);

        int proc_fun_start_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal465=null;
        Token string_literal466=null;
        PLSQL3Parser.keyREPLACE_return keyREPLACE467 =null;


        Object string_literal465_tree=null;
        Object string_literal466_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // antlr3/PLSQL3.g:415:2: ( 'CREATE' ( 'OR' keyREPLACE )? )
            // antlr3/PLSQL3.g:415:4: 'CREATE' ( 'OR' keyREPLACE )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal465=(Token)match(input,73,FOLLOW_73_in_proc_fun_start2584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal465_tree = 
            (Object)adaptor.create(string_literal465)
            ;
            adaptor.addChild(root_0, string_literal465_tree);
            }

            // antlr3/PLSQL3.g:415:13: ( 'OR' keyREPLACE )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==127) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // antlr3/PLSQL3.g:415:15: 'OR' keyREPLACE
                    {
                    string_literal466=(Token)match(input,127,FOLLOW_127_in_proc_fun_start2588); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal466_tree = 
                    (Object)adaptor.create(string_literal466)
                    ;
                    adaptor.addChild(root_0, string_literal466_tree);
                    }

                    pushFollow(FOLLOW_keyREPLACE_in_proc_fun_start2590);
                    keyREPLACE467=keyREPLACE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREPLACE467.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 54, proc_fun_start_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "proc_fun_start"


    public static class function_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_body"
    // antlr3/PLSQL3.g:418:1: function_body : ( proc_fun_start )? 'FUNCTION' ^ function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMI ;
    public final PLSQL3Parser.function_body_return function_body() throws RecognitionException {
        PLSQL3Parser.function_body_return retval = new PLSQL3Parser.function_body_return();
        retval.start = input.LT(1);

        int function_body_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal469=null;
        Token LPAREN471=null;
        Token RPAREN473=null;
        Token set476=null;
        Token string_literal478=null;
        Token string_literal480=null;
        Token string_literal482=null;
        Token SEMI484=null;
        PLSQL3Parser.proc_fun_start_return proc_fun_start468 =null;

        PLSQL3Parser.function_name_return function_name470 =null;

        PLSQL3Parser.arguments_return arguments472 =null;

        PLSQL3Parser.keyRETURN_return keyRETURN474 =null;

        PLSQL3Parser.return_type_return return_type475 =null;

        PLSQL3Parser.declare_spec_return declare_spec477 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements479 =null;

        PLSQL3Parser.exception_handler_return exception_handler481 =null;

        PLSQL3Parser.function_name_return function_name483 =null;


        Object string_literal469_tree=null;
        Object LPAREN471_tree=null;
        Object RPAREN473_tree=null;
        Object set476_tree=null;
        Object string_literal478_tree=null;
        Object string_literal480_tree=null;
        Object string_literal482_tree=null;
        Object SEMI484_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // antlr3/PLSQL3.g:419:2: ( ( proc_fun_start )? 'FUNCTION' ^ function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMI )
            // antlr3/PLSQL3.g:419:4: ( proc_fun_start )? 'FUNCTION' ^ function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMI
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:419:4: ( proc_fun_start )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==73) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // antlr3/PLSQL3.g:419:6: proc_fun_start
                    {
                    pushFollow(FOLLOW_proc_fun_start_in_function_body2606);
                    proc_fun_start468=proc_fun_start();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, proc_fun_start468.getTree());

                    }
                    break;

            }


            string_literal469=(Token)match(input,94,FOLLOW_94_in_function_body2611); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal469_tree = 
            (Object)adaptor.create(string_literal469)
            ;
            root_0 = (Object)adaptor.becomeRoot(string_literal469_tree, root_0);
            }

            pushFollow(FOLLOW_function_name_in_function_body2614);
            function_name470=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name470.getTree());

            // antlr3/PLSQL3.g:420:3: ( LPAREN arguments RPAREN )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==LPAREN) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // antlr3/PLSQL3.g:420:5: LPAREN arguments RPAREN
                    {
                    LPAREN471=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_body2621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN471_tree = 
                    (Object)adaptor.create(LPAREN471)
                    ;
                    adaptor.addChild(root_0, LPAREN471_tree);
                    }

                    pushFollow(FOLLOW_arguments_in_function_body2623);
                    arguments472=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments472.getTree());

                    RPAREN473=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_body2625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN473_tree = 
                    (Object)adaptor.create(RPAREN473)
                    ;
                    adaptor.addChild(root_0, RPAREN473_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_keyRETURN_in_function_body2633);
            keyRETURN474=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN474.getTree());

            pushFollow(FOLLOW_return_type_in_function_body2635);
            return_type475=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type475.getTree());

            set476=(Token)input.LT(1);

            if ( input.LA(1)==53||input.LA(1)==106 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set476)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // antlr3/PLSQL3.g:423:3: ( ( declare_spec )=> ( declare_spec )* )
            // antlr3/PLSQL3.g:423:5: ( declare_spec )=> ( declare_spec )*
            {
            // antlr3/PLSQL3.g:423:25: ( declare_spec )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==DOUBLEQUOTED_STRING||LA112_0==ID||LA112_0==73||LA112_0==94||LA112_0==133||LA112_0==135) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // antlr3/PLSQL3.g:423:27: declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_function_body2664);
            	    declare_spec477=declare_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declare_spec477.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }


            // antlr3/PLSQL3.g:424:3: ( 'BEGIN' )
            // antlr3/PLSQL3.g:424:5: 'BEGIN'
            {
            string_literal478=(Token)match(input,56,FOLLOW_56_in_function_body2675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal478_tree = 
            (Object)adaptor.create(string_literal478)
            ;
            adaptor.addChild(root_0, string_literal478_tree);
            }

            }


            // antlr3/PLSQL3.g:425:3: ( seq_of_statements )
            // antlr3/PLSQL3.g:425:5: seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_function_body2683);
            seq_of_statements479=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements479.getTree());

            }


            // antlr3/PLSQL3.g:426:3: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==86) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // antlr3/PLSQL3.g:426:5: 'EXCEPTION' ( exception_handler )+
                    {
                    string_literal480=(Token)match(input,86,FOLLOW_86_in_function_body2691); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal480_tree = 
                    (Object)adaptor.create(string_literal480)
                    ;
                    adaptor.addChild(root_0, string_literal480_tree);
                    }

                    // antlr3/PLSQL3.g:426:17: ( exception_handler )+
                    int cnt113=0;
                    loop113:
                    do {
                        int alt113=2;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==164) ) {
                            alt113=1;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:426:19: exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_function_body2695);
                    	    exception_handler481=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler481.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt113 >= 1 ) break loop113;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(113, input);
                                throw eee;
                        }
                        cnt113++;
                    } while (true);


                    }
                    break;

            }


            string_literal482=(Token)match(input,85,FOLLOW_85_in_function_body2705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal482_tree = 
            (Object)adaptor.create(string_literal482)
            ;
            adaptor.addChild(root_0, string_literal482_tree);
            }

            // antlr3/PLSQL3.g:427:9: ( function_name )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==DOUBLEQUOTED_STRING||LA115_0==ID||LA115_0==QUOTED_STRING) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // antlr3/PLSQL3.g:427:11: function_name
                    {
                    pushFollow(FOLLOW_function_name_in_function_body2709);
                    function_name483=function_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name483.getTree());

                    }
                    break;

            }


            SEMI484=(Token)match(input,SEMI,FOLLOW_SEMI_in_function_body2714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI484_tree = 
            (Object)adaptor.create(SEMI484)
            ;
            adaptor.addChild(root_0, SEMI484_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 55, function_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_body"


    public static class function_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_name"
    // antlr3/PLSQL3.g:430:1: function_name : ( identifier | QUOTED_STRING );
    public final PLSQL3Parser.function_name_return function_name() throws RecognitionException {
        PLSQL3Parser.function_name_return retval = new PLSQL3Parser.function_name_return();
        retval.start = input.LT(1);

        int function_name_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING486=null;
        PLSQL3Parser.identifier_return identifier485 =null;


        Object QUOTED_STRING486_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // antlr3/PLSQL3.g:431:2: ( identifier | QUOTED_STRING )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==DOUBLEQUOTED_STRING||LA116_0==ID) ) {
                alt116=1;
            }
            else if ( (LA116_0==QUOTED_STRING) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // antlr3/PLSQL3.g:431:4: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_function_name2725);
                    identifier485=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier485.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:431:17: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTED_STRING486=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_function_name2729); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING486_tree = 
                    (Object)adaptor.create(QUOTED_STRING486)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING486_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 56, function_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_name"


    public static class procedure_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_name"
    // antlr3/PLSQL3.g:434:1: procedure_name : ( identifier | QUOTED_STRING );
    public final PLSQL3Parser.procedure_name_return procedure_name() throws RecognitionException {
        PLSQL3Parser.procedure_name_return retval = new PLSQL3Parser.procedure_name_return();
        retval.start = input.LT(1);

        int procedure_name_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING488=null;
        PLSQL3Parser.identifier_return identifier487 =null;


        Object QUOTED_STRING488_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // antlr3/PLSQL3.g:435:2: ( identifier | QUOTED_STRING )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==DOUBLEQUOTED_STRING||LA117_0==ID) ) {
                alt117=1;
            }
            else if ( (LA117_0==QUOTED_STRING) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }
            switch (alt117) {
                case 1 :
                    // antlr3/PLSQL3.g:435:4: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_procedure_name2741);
                    identifier487=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier487.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:435:17: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTED_STRING488=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_procedure_name2745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING488_tree = 
                    (Object)adaptor.create(QUOTED_STRING488)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING488_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 57, procedure_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "procedure_name"


    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arguments"
    // antlr3/PLSQL3.g:438:1: arguments : argument ( COMMA argument )* ;
    public final PLSQL3Parser.arguments_return arguments() throws RecognitionException {
        PLSQL3Parser.arguments_return retval = new PLSQL3Parser.arguments_return();
        retval.start = input.LT(1);

        int arguments_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA490=null;
        PLSQL3Parser.argument_return argument489 =null;

        PLSQL3Parser.argument_return argument491 =null;


        Object COMMA490_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // antlr3/PLSQL3.g:439:2: ( argument ( COMMA argument )* )
            // antlr3/PLSQL3.g:439:4: argument ( COMMA argument )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_argument_in_arguments2757);
            argument489=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument489.getTree());

            // antlr3/PLSQL3.g:439:13: ( COMMA argument )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==COMMA) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // antlr3/PLSQL3.g:439:15: COMMA argument
            	    {
            	    COMMA490=(Token)match(input,COMMA,FOLLOW_COMMA_in_arguments2761); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA490_tree = 
            	    (Object)adaptor.create(COMMA490)
            	    ;
            	    adaptor.addChild(root_0, COMMA490_tree);
            	    }

            	    pushFollow(FOLLOW_argument_in_arguments2763);
            	    argument491=argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument491.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 58, arguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arguments"


    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument"
    // antlr3/PLSQL3.g:442:1: argument : argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? ;
    public final PLSQL3Parser.argument_return argument() throws RecognitionException {
        PLSQL3Parser.argument_return retval = new PLSQL3Parser.argument_return();
        retval.start = input.LT(1);

        int argument_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal494=null;
        Token string_literal496=null;
        Token set498=null;
        PLSQL3Parser.argument_name_return argument_name492 =null;

        PLSQL3Parser.keyOUT_return keyOUT493 =null;

        PLSQL3Parser.keyOUT_return keyOUT495 =null;

        PLSQL3Parser.argument_type_return argument_type497 =null;

        PLSQL3Parser.plsql_expression_return plsql_expression499 =null;


        Object string_literal494_tree=null;
        Object string_literal496_tree=null;
        Object set498_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // antlr3/PLSQL3.g:443:2: ( argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )? )
            // antlr3/PLSQL3.g:443:4: argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_argument_name_in_argument2777);
            argument_name492=argument_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_name492.getTree());

            // antlr3/PLSQL3.g:443:18: ( keyOUT | 'IN' keyOUT | 'IN' )?
            int alt119=4;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==129) ) {
                alt119=1;
            }
            else if ( (LA119_0==99) ) {
                int LA119_2 = input.LA(2);

                if ( (LA119_2==129) ) {
                    alt119=2;
                }
                else if ( (LA119_2==EOF||LA119_2==ASSIGN||LA119_2==COMMA||LA119_2==DOUBLEQUOTED_STRING||LA119_2==ID||LA119_2==RPAREN||(LA119_2 >= 58 && LA119_2 <= 63)||(LA119_2 >= 66 && LA119_2 <= 68)||(LA119_2 >= 74 && LA119_2 <= 76)||LA119_2==78||LA119_2==82||LA119_2==91||(LA119_2 >= 102 && LA119_2 <= 103)||LA119_2==109||LA119_2==112||(LA119_2 >= 114 && LA119_2 <= 117)||(LA119_2 >= 121 && LA119_2 <= 124)||(LA119_2 >= 131 && LA119_2 <= 132)||(LA119_2 >= 137 && LA119_2 <= 138)||LA119_2==144||LA119_2==150||LA119_2==160||(LA119_2 >= 162 && LA119_2 <= 163)) ) {
                    alt119=3;
                }
            }
            switch (alt119) {
                case 1 :
                    // antlr3/PLSQL3.g:443:20: keyOUT
                    {
                    pushFollow(FOLLOW_keyOUT_in_argument2781);
                    keyOUT493=keyOUT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOUT493.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:443:29: 'IN' keyOUT
                    {
                    string_literal494=(Token)match(input,99,FOLLOW_99_in_argument2785); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal494_tree = 
                    (Object)adaptor.create(string_literal494)
                    ;
                    adaptor.addChild(root_0, string_literal494_tree);
                    }

                    pushFollow(FOLLOW_keyOUT_in_argument2787);
                    keyOUT495=keyOUT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOUT495.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:443:43: 'IN'
                    {
                    string_literal496=(Token)match(input,99,FOLLOW_99_in_argument2791); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal496_tree = 
                    (Object)adaptor.create(string_literal496)
                    ;
                    adaptor.addChild(root_0, string_literal496_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:443:51: ( argument_type )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==DOUBLEQUOTED_STRING||LA120_0==ID||(LA120_0 >= 58 && LA120_0 <= 63)||(LA120_0 >= 66 && LA120_0 <= 68)||(LA120_0 >= 74 && LA120_0 <= 76)||LA120_0==82||LA120_0==91||(LA120_0 >= 102 && LA120_0 <= 103)||LA120_0==109||LA120_0==112||(LA120_0 >= 114 && LA120_0 <= 117)||(LA120_0 >= 121 && LA120_0 <= 124)||(LA120_0 >= 131 && LA120_0 <= 132)||(LA120_0 >= 137 && LA120_0 <= 138)||LA120_0==144||LA120_0==150||LA120_0==160||(LA120_0 >= 162 && LA120_0 <= 163)) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // antlr3/PLSQL3.g:443:52: argument_type
                    {
                    pushFollow(FOLLOW_argument_type_in_argument2797);
                    argument_type497=argument_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_type497.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:444:3: ( ( ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==ASSIGN||LA121_0==78) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // antlr3/PLSQL3.g:444:5: ( ASSIGN | 'DEFAULT' ) plsql_expression
                    {
                    set498=(Token)input.LT(1);

                    if ( input.LA(1)==ASSIGN||input.LA(1)==78 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set498)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_plsql_expression_in_argument2816);
                    plsql_expression499=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression499.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 59, argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument"


    public static class argument_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument_name"
    // antlr3/PLSQL3.g:447:1: argument_name : identifier ;
    public final PLSQL3Parser.argument_name_return argument_name() throws RecognitionException {
        PLSQL3Parser.argument_name_return retval = new PLSQL3Parser.argument_name_return();
        retval.start = input.LT(1);

        int argument_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier500 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // antlr3/PLSQL3.g:448:2: ( identifier )
            // antlr3/PLSQL3.g:448:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_argument_name2830);
            identifier500=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier500.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 60, argument_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_name"


    public static class argument_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument_type"
    // antlr3/PLSQL3.g:451:1: argument_type : type_spec ;
    public final PLSQL3Parser.argument_type_return argument_type() throws RecognitionException {
        PLSQL3Parser.argument_type_return retval = new PLSQL3Parser.argument_type_return();
        retval.start = input.LT(1);

        int argument_type_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.type_spec_return type_spec501 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // antlr3/PLSQL3.g:452:2: ( type_spec )
            // antlr3/PLSQL3.g:452:4: type_spec
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_spec_in_argument_type2841);
            type_spec501=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec501.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 61, argument_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_type"


    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // antlr3/PLSQL3.g:455:1: value : ( ( PLUS | MINUS )? NUMBER | quoted_string | 'TRUE' | 'FALSE' | 'NULL' );
    public final PLSQL3Parser.value_return value() throws RecognitionException {
        PLSQL3Parser.value_return retval = new PLSQL3Parser.value_return();
        retval.start = input.LT(1);

        int value_StartIndex = input.index();

        Object root_0 = null;

        Token set502=null;
        Token NUMBER503=null;
        Token string_literal505=null;
        Token string_literal506=null;
        Token string_literal507=null;
        PLSQL3Parser.quoted_string_return quoted_string504 =null;


        Object set502_tree=null;
        Object NUMBER503_tree=null;
        Object string_literal505_tree=null;
        Object string_literal506_tree=null;
        Object string_literal507_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // antlr3/PLSQL3.g:456:2: ( ( PLUS | MINUS )? NUMBER | quoted_string | 'TRUE' | 'FALSE' | 'NULL' )
            int alt123=5;
            switch ( input.LA(1) ) {
            case MINUS:
            case NUMBER:
            case PLUS:
                {
                alt123=1;
                }
                break;
            case QUOTED_STRING:
                {
                alt123=2;
                }
                break;
            case 156:
                {
                alt123=3;
                }
                break;
            case 89:
                {
                alt123=4;
                }
                break;
            case 120:
                {
                alt123=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }

            switch (alt123) {
                case 1 :
                    // antlr3/PLSQL3.g:456:4: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    // antlr3/PLSQL3.g:456:4: ( PLUS | MINUS )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==MINUS||LA122_0==PLUS) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // antlr3/PLSQL3.g:
                            {
                            set502=(Token)input.LT(1);

                            if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set502)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    NUMBER503=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value2863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER503_tree = 
                    (Object)adaptor.create(NUMBER503)
                    ;
                    adaptor.addChild(root_0, NUMBER503_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:457:4: quoted_string
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_quoted_string_in_value2868);
                    quoted_string504=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quoted_string504.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:458:4: 'TRUE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal505=(Token)match(input,156,FOLLOW_156_in_value2873); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal505_tree = 
                    (Object)adaptor.create(string_literal505)
                    ;
                    adaptor.addChild(root_0, string_literal505_tree);
                    }

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:458:13: 'FALSE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal506=(Token)match(input,89,FOLLOW_89_in_value2877); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal506_tree = 
                    (Object)adaptor.create(string_literal506)
                    ;
                    adaptor.addChild(root_0, string_literal506_tree);
                    }

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:459:4: 'NULL'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal507=(Token)match(input,120,FOLLOW_120_in_value2882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal507_tree = 
                    (Object)adaptor.create(string_literal507)
                    ;
                    adaptor.addChild(root_0, string_literal507_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 62, value_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "value"


    public static class return_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_type"
    // antlr3/PLSQL3.g:462:1: return_type : type_spec ;
    public final PLSQL3Parser.return_type_return return_type() throws RecognitionException {
        PLSQL3Parser.return_type_return retval = new PLSQL3Parser.return_type_return();
        retval.start = input.LT(1);

        int return_type_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.type_spec_return type_spec508 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // antlr3/PLSQL3.g:463:2: ( type_spec )
            // antlr3/PLSQL3.g:463:4: type_spec
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_spec_in_return_type2893);
            type_spec508=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec508.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 63, return_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_type"


    public static class function_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_declaration"
    // antlr3/PLSQL3.g:466:1: function_declaration : function_body ;
    public final PLSQL3Parser.function_declaration_return function_declaration() throws RecognitionException {
        PLSQL3Parser.function_declaration_return retval = new PLSQL3Parser.function_declaration_return();
        retval.start = input.LT(1);

        int function_declaration_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.function_body_return function_body509 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // antlr3/PLSQL3.g:467:2: ( function_body )
            // antlr3/PLSQL3.g:467:4: function_body
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_function_body_in_function_declaration2904);
            function_body509=function_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_body509.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 64, function_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_declaration"


    public static class function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_call"
    // antlr3/PLSQL3.g:470:1: function_call : user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )? ;
    public final PLSQL3Parser.function_call_return function_call() throws RecognitionException {
        PLSQL3Parser.function_call_return retval = new PLSQL3Parser.function_call_return();
        retval.start = input.LT(1);

        int function_call_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN511=null;
        Token RPAREN513=null;
        PLSQL3Parser.user_defined_function_return user_defined_function510 =null;

        PLSQL3Parser.call_parameters_return call_parameters512 =null;


        Object LPAREN511_tree=null;
        Object RPAREN513_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // antlr3/PLSQL3.g:471:2: ( user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )? )
            // antlr3/PLSQL3.g:471:4: user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_user_defined_function_in_function_call2915);
            user_defined_function510=user_defined_function();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, user_defined_function510.getTree());

            // antlr3/PLSQL3.g:471:26: ({...}? LPAREN ( call_parameters )? RPAREN )?
            int alt125=2;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // antlr3/PLSQL3.g:471:28: {...}? LPAREN ( call_parameters )? RPAREN
                    {
                    if ( !(( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_call", " input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ");
                    }

                    LPAREN511=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call2921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN511_tree = 
                    (Object)adaptor.create(LPAREN511)
                    ;
                    adaptor.addChild(root_0, LPAREN511_tree);
                    }

                    // antlr3/PLSQL3.g:471:110: ( call_parameters )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==DOUBLEQUOTED_STRING||LA124_0==ID||LA124_0==LPAREN||LA124_0==MINUS||LA124_0==NUMBER||LA124_0==PLUS||LA124_0==QUOTED_STRING||LA124_0==65||LA124_0==81||LA124_0==89||LA124_0==118||LA124_0==120||LA124_0==144||LA124_0==147||LA124_0==151||LA124_0==156) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // antlr3/PLSQL3.g:471:112: call_parameters
                            {
                            pushFollow(FOLLOW_call_parameters_in_function_call2925);
                            call_parameters512=call_parameters();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameters512.getTree());

                            }
                            break;

                    }


                    RPAREN513=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call2930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN513_tree = 
                    (Object)adaptor.create(RPAREN513)
                    ;
                    adaptor.addChild(root_0, RPAREN513_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, function_call_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_call"


    public static class collection_function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collection_function_call"
    // antlr3/PLSQL3.g:479:1: collection_function_call : plsql_table_name ;
    public final PLSQL3Parser.collection_function_call_return collection_function_call() throws RecognitionException {
        PLSQL3Parser.collection_function_call_return retval = new PLSQL3Parser.collection_function_call_return();
        retval.start = input.LT(1);

        int collection_function_call_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.plsql_table_name_return plsql_table_name514 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // antlr3/PLSQL3.g:480:2: ( plsql_table_name )
            // antlr3/PLSQL3.g:480:4: plsql_table_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_table_name_in_collection_function_call2949);
            plsql_table_name514=plsql_table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_name514.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 66, collection_function_call_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "collection_function_call"


    public static class variable_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_names"
    // antlr3/PLSQL3.g:483:1: variable_names : variable_name ( COMMA variable_name )* ;
    public final PLSQL3Parser.variable_names_return variable_names() throws RecognitionException {
        PLSQL3Parser.variable_names_return retval = new PLSQL3Parser.variable_names_return();
        retval.start = input.LT(1);

        int variable_names_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA516=null;
        PLSQL3Parser.variable_name_return variable_name515 =null;

        PLSQL3Parser.variable_name_return variable_name517 =null;


        Object COMMA516_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // antlr3/PLSQL3.g:484:2: ( variable_name ( COMMA variable_name )* )
            // antlr3/PLSQL3.g:484:4: variable_name ( COMMA variable_name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_variable_name_in_variable_names2960);
            variable_name515=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name515.getTree());

            // antlr3/PLSQL3.g:484:18: ( COMMA variable_name )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==COMMA) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // antlr3/PLSQL3.g:484:20: COMMA variable_name
            	    {
            	    COMMA516=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_names2964); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA516_tree = 
            	    (Object)adaptor.create(COMMA516)
            	    ;
            	    adaptor.addChild(root_0, COMMA516_tree);
            	    }

            	    pushFollow(FOLLOW_variable_name_in_variable_names2966);
            	    variable_name517=variable_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name517.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 67, variable_names_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_names"


    public static class variable_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_name"
    // antlr3/PLSQL3.g:486:1: variable_name : identifier ;
    public final PLSQL3Parser.variable_name_return variable_name() throws RecognitionException {
        PLSQL3Parser.variable_name_return retval = new PLSQL3Parser.variable_name_return();
        retval.start = input.LT(1);

        int variable_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier518 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // antlr3/PLSQL3.g:487:2: ( identifier )
            // antlr3/PLSQL3.g:487:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_variable_name2979);
            identifier518=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier518.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 68, variable_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_name"


    public static class null_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_statement"
    // antlr3/PLSQL3.g:490:1: null_statement : 'NULL' ;
    public final PLSQL3Parser.null_statement_return null_statement() throws RecognitionException {
        PLSQL3Parser.null_statement_return retval = new PLSQL3Parser.null_statement_return();
        retval.start = input.LT(1);

        int null_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal519=null;

        Object string_literal519_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // antlr3/PLSQL3.g:491:2: ( 'NULL' )
            // antlr3/PLSQL3.g:491:4: 'NULL'
            {
            root_0 = (Object)adaptor.nil();


            string_literal519=(Token)match(input,120,FOLLOW_120_in_null_statement2990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal519_tree = 
            (Object)adaptor.create(string_literal519)
            ;
            adaptor.addChild(root_0, string_literal519_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 69, null_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "null_statement"


    public static class raise_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "raise_statement"
    // antlr3/PLSQL3.g:494:1: raise_statement : keyRAISE ( exception_name )? ;
    public final PLSQL3Parser.raise_statement_return raise_statement() throws RecognitionException {
        PLSQL3Parser.raise_statement_return retval = new PLSQL3Parser.raise_statement_return();
        retval.start = input.LT(1);

        int raise_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.keyRAISE_return keyRAISE520 =null;

        PLSQL3Parser.exception_name_return exception_name521 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

            // antlr3/PLSQL3.g:495:2: ( keyRAISE ( exception_name )? )
            // antlr3/PLSQL3.g:495:4: keyRAISE ( exception_name )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyRAISE_in_raise_statement3002);
            keyRAISE520=keyRAISE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRAISE520.getTree());

            // antlr3/PLSQL3.g:495:13: ( exception_name )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==DOUBLEQUOTED_STRING||LA127_0==ID) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // antlr3/PLSQL3.g:495:15: exception_name
                    {
                    pushFollow(FOLLOW_exception_name_in_raise_statement3006);
                    exception_name521=exception_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name521.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 70, raise_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "raise_statement"


    public static class return_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_statement"
    // antlr3/PLSQL3.g:498:1: return_statement : keyRETURN ( plsql_expression )? ;
    public final PLSQL3Parser.return_statement_return return_statement() throws RecognitionException {
        PLSQL3Parser.return_statement_return retval = new PLSQL3Parser.return_statement_return();
        retval.start = input.LT(1);

        int return_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.keyRETURN_return keyRETURN522 =null;

        PLSQL3Parser.plsql_expression_return plsql_expression523 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

            // antlr3/PLSQL3.g:499:2: ( keyRETURN ( plsql_expression )? )
            // antlr3/PLSQL3.g:499:4: keyRETURN ( plsql_expression )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyRETURN_in_return_statement3021);
            keyRETURN522=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN522.getTree());

            // antlr3/PLSQL3.g:499:14: ( plsql_expression )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==DOUBLEQUOTED_STRING||LA128_0==ID||LA128_0==LPAREN||LA128_0==MINUS||LA128_0==NUMBER||LA128_0==PLUS||LA128_0==QUOTED_STRING||LA128_0==65||LA128_0==81||LA128_0==89||LA128_0==118||LA128_0==120||LA128_0==144||LA128_0==147||LA128_0==151||LA128_0==156) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // antlr3/PLSQL3.g:499:16: plsql_expression
                    {
                    pushFollow(FOLLOW_plsql_expression_in_return_statement3025);
                    plsql_expression523=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression523.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 71, return_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_statement"


    public static class loop_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "loop_statement"
    // antlr3/PLSQL3.g:502:1: loop_statement : ( LLABEL label_name RLABEL )? ( keyWHILE ^ plsql_condition | ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )? ;
    public final PLSQL3Parser.loop_statement_return loop_statement() throws RecognitionException {
        PLSQL3Parser.loop_statement_return retval = new PLSQL3Parser.loop_statement_return();
        retval.start = input.LT(1);

        int loop_statement_StartIndex = input.index();

        Object root_0 = null;

        Token LLABEL524=null;
        Token RLABEL526=null;
        Token string_literal529=null;
        Token string_literal534=null;
        PLSQL3Parser.label_name_return label_name525 =null;

        PLSQL3Parser.keyWHILE_return keyWHILE527 =null;

        PLSQL3Parser.plsql_condition_return plsql_condition528 =null;

        PLSQL3Parser.numeric_loop_param_return numeric_loop_param530 =null;

        PLSQL3Parser.cursor_loop_param_return cursor_loop_param531 =null;

        PLSQL3Parser.keyLOOP_return keyLOOP532 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements533 =null;

        PLSQL3Parser.keyLOOP_return keyLOOP535 =null;

        PLSQL3Parser.label_name_return label_name536 =null;


        Object LLABEL524_tree=null;
        Object RLABEL526_tree=null;
        Object string_literal529_tree=null;
        Object string_literal534_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

            // antlr3/PLSQL3.g:503:2: ( ( LLABEL label_name RLABEL )? ( keyWHILE ^ plsql_condition | ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )? )
            // antlr3/PLSQL3.g:503:4: ( LLABEL label_name RLABEL )? ( keyWHILE ^ plsql_condition | ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:503:4: ( LLABEL label_name RLABEL )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==LLABEL) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // antlr3/PLSQL3.g:503:6: LLABEL label_name RLABEL
                    {
                    LLABEL524=(Token)match(input,LLABEL,FOLLOW_LLABEL_in_loop_statement3041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LLABEL524_tree = 
                    (Object)adaptor.create(LLABEL524)
                    ;
                    adaptor.addChild(root_0, LLABEL524_tree);
                    }

                    pushFollow(FOLLOW_label_name_in_loop_statement3043);
                    label_name525=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name525.getTree());

                    RLABEL526=(Token)match(input,RLABEL,FOLLOW_RLABEL_in_loop_statement3045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RLABEL526_tree = 
                    (Object)adaptor.create(RLABEL526)
                    ;
                    adaptor.addChild(root_0, RLABEL526_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:504:3: ( keyWHILE ^ plsql_condition | ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )?
            int alt131=3;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==166) ) {
                alt131=1;
            }
            else if ( (LA131_0==92) ) {
                alt131=2;
            }
            switch (alt131) {
                case 1 :
                    // antlr3/PLSQL3.g:504:5: keyWHILE ^ plsql_condition
                    {
                    pushFollow(FOLLOW_keyWHILE_in_loop_statement3054);
                    keyWHILE527=keyWHILE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(keyWHILE527.getTree(), root_0);

                    pushFollow(FOLLOW_plsql_condition_in_loop_statement3057);
                    plsql_condition528=plsql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition528.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:505:6: ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) )
                    {
                    // antlr3/PLSQL3.g:505:6: ( 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) )
                    // antlr3/PLSQL3.g:505:8: 'FOR' ^ ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param )
                    {
                    string_literal529=(Token)match(input,92,FOLLOW_92_in_loop_statement3066); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal529_tree = 
                    (Object)adaptor.create(string_literal529)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(string_literal529_tree, root_0);
                    }

                    // antlr3/PLSQL3.g:506:5: ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param )
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==DOUBLEQUOTED_STRING||LA130_0==ID) ) {
                        int LA130_1 = input.LA(2);

                        if ( (synpred238_PLSQL3()) ) {
                            alt130=1;
                        }
                        else if ( (synpred239_PLSQL3()) ) {
                            alt130=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 130, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 0, input);

                        throw nvae;

                    }
                    switch (alt130) {
                        case 1 :
                            // antlr3/PLSQL3.g:506:7: ( numeric_loop_param )=> numeric_loop_param
                            {
                            pushFollow(FOLLOW_numeric_loop_param_in_loop_statement3083);
                            numeric_loop_param530=numeric_loop_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric_loop_param530.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:507:7: ( cursor_loop_param )=> cursor_loop_param
                            {
                            pushFollow(FOLLOW_cursor_loop_param_in_loop_statement3099);
                            cursor_loop_param531=cursor_loop_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_loop_param531.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_keyLOOP_in_loop_statement3120);
            keyLOOP532=keyLOOP();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOOP532.getTree());

            pushFollow(FOLLOW_seq_of_statements_in_loop_statement3124);
            seq_of_statements533=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements533.getTree());

            string_literal534=(Token)match(input,85,FOLLOW_85_in_loop_statement3128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal534_tree = 
            (Object)adaptor.create(string_literal534)
            ;
            adaptor.addChild(root_0, string_literal534_tree);
            }

            pushFollow(FOLLOW_keyLOOP_in_loop_statement3130);
            keyLOOP535=keyLOOP();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOOP535.getTree());

            // antlr3/PLSQL3.g:514:3: ( label_name )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==DOUBLEQUOTED_STRING||LA132_0==ID) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // antlr3/PLSQL3.g:514:5: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_loop_statement3137);
                    label_name536=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name536.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 72, loop_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "loop_statement"


    public static class numeric_loop_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numeric_loop_param"
    // antlr3/PLSQL3.g:517:1: numeric_loop_param : index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr ;
    public final PLSQL3Parser.numeric_loop_param_return numeric_loop_param() throws RecognitionException {
        PLSQL3Parser.numeric_loop_param_return retval = new PLSQL3Parser.numeric_loop_param_return();
        retval.start = input.LT(1);

        int numeric_loop_param_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal538=null;
        Token DOUBLEDOT541=null;
        PLSQL3Parser.index_name_return index_name537 =null;

        PLSQL3Parser.keyREVERSE_return keyREVERSE539 =null;

        PLSQL3Parser.integer_expr_return integer_expr540 =null;

        PLSQL3Parser.integer_expr_return integer_expr542 =null;


        Object string_literal538_tree=null;
        Object DOUBLEDOT541_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

            // antlr3/PLSQL3.g:518:2: ( index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr )
            // antlr3/PLSQL3.g:518:4: index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_index_name_in_numeric_loop_param3151);
            index_name537=index_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name537.getTree());

            string_literal538=(Token)match(input,99,FOLLOW_99_in_numeric_loop_param3153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal538_tree = 
            (Object)adaptor.create(string_literal538)
            ;
            adaptor.addChild(root_0, string_literal538_tree);
            }

            // antlr3/PLSQL3.g:518:20: ( keyREVERSE )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==ID) ) {
                int LA133_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("REVERSE"))&&(input.LT(1).getText().equalsIgnoreCase("REVERSE")))&&synpred242_PLSQL3())) ) {
                    alt133=1;
                }
            }
            switch (alt133) {
                case 1 :
                    // antlr3/PLSQL3.g:518:22: keyREVERSE
                    {
                    pushFollow(FOLLOW_keyREVERSE_in_numeric_loop_param3157);
                    keyREVERSE539=keyREVERSE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREVERSE539.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param3162);
            integer_expr540=integer_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer_expr540.getTree());

            DOUBLEDOT541=(Token)match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_numeric_loop_param3164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOUBLEDOT541_tree = 
            (Object)adaptor.create(DOUBLEDOT541)
            ;
            adaptor.addChild(root_0, DOUBLEDOT541_tree);
            }

            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param3166);
            integer_expr542=integer_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer_expr542.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 73, numeric_loop_param_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "numeric_loop_param"


    public static class index_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_name"
    // antlr3/PLSQL3.g:521:1: index_name : identifier ;
    public final PLSQL3Parser.index_name_return index_name() throws RecognitionException {
        PLSQL3Parser.index_name_return retval = new PLSQL3Parser.index_name_return();
        retval.start = input.LT(1);

        int index_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier543 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

            // antlr3/PLSQL3.g:522:2: ( identifier )
            // antlr3/PLSQL3.g:522:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_index_name3177);
            identifier543=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier543.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 74, index_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "index_name"


    public static class integer_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "integer_expr"
    // antlr3/PLSQL3.g:526:1: integer_expr : sql_expression ;
    public final PLSQL3Parser.integer_expr_return integer_expr() throws RecognitionException {
        PLSQL3Parser.integer_expr_return retval = new PLSQL3Parser.integer_expr_return();
        retval.start = input.LT(1);

        int integer_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_expression_return sql_expression544 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

            // antlr3/PLSQL3.g:527:2: ( sql_expression )
            // antlr3/PLSQL3.g:527:4: sql_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_integer_expr3189);
            sql_expression544=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression544.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 75, integer_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "integer_expr"


    public static class cursor_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_name"
    // antlr3/PLSQL3.g:530:1: cursor_name : identifier ;
    public final PLSQL3Parser.cursor_name_return cursor_name() throws RecognitionException {
        PLSQL3Parser.cursor_name_return retval = new PLSQL3Parser.cursor_name_return();
        retval.start = input.LT(1);

        int cursor_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier545 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

            // antlr3/PLSQL3.g:531:2: ( identifier )
            // antlr3/PLSQL3.g:531:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_cursor_name3200);
            identifier545=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier545.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 76, cursor_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_name"


    public static class cursor_loop_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_loop_param"
    // antlr3/PLSQL3.g:534:1: cursor_loop_param : record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN ) ;
    public final PLSQL3Parser.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
        PLSQL3Parser.cursor_loop_param_return retval = new PLSQL3Parser.cursor_loop_param_return();
        retval.start = input.LT(1);

        int cursor_loop_param_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal547=null;
        Token LPAREN549=null;
        Token RPAREN551=null;
        Token LPAREN552=null;
        Token RPAREN554=null;
        PLSQL3Parser.record_name_return record_name546 =null;

        PLSQL3Parser.cursor_name_return cursor_name548 =null;

        PLSQL3Parser.plsql_expressions_return plsql_expressions550 =null;

        PLSQL3Parser.select_statement_return select_statement553 =null;


        Object string_literal547_tree=null;
        Object LPAREN549_tree=null;
        Object RPAREN551_tree=null;
        Object LPAREN552_tree=null;
        Object RPAREN554_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

            // antlr3/PLSQL3.g:535:2: ( record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN ) )
            // antlr3/PLSQL3.g:535:4: record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_record_name_in_cursor_loop_param3211);
            record_name546=record_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_name546.getTree());

            string_literal547=(Token)match(input,99,FOLLOW_99_in_cursor_loop_param3213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal547_tree = 
            (Object)adaptor.create(string_literal547)
            ;
            adaptor.addChild(root_0, string_literal547_tree);
            }

            // antlr3/PLSQL3.g:536:3: ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN )
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==DOUBLEQUOTED_STRING||LA135_0==ID) ) {
                alt135=1;
            }
            else if ( (LA135_0==LPAREN) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }
            switch (alt135) {
                case 1 :
                    // antlr3/PLSQL3.g:536:5: cursor_name ( LPAREN plsql_expressions RPAREN )?
                    {
                    pushFollow(FOLLOW_cursor_name_in_cursor_loop_param3219);
                    cursor_name548=cursor_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name548.getTree());

                    // antlr3/PLSQL3.g:536:17: ( LPAREN plsql_expressions RPAREN )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==LPAREN) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // antlr3/PLSQL3.g:536:19: LPAREN plsql_expressions RPAREN
                            {
                            LPAREN549=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param3223); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN549_tree = 
                            (Object)adaptor.create(LPAREN549)
                            ;
                            adaptor.addChild(root_0, LPAREN549_tree);
                            }

                            pushFollow(FOLLOW_plsql_expressions_in_cursor_loop_param3225);
                            plsql_expressions550=plsql_expressions();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions550.getTree());

                            RPAREN551=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param3227); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN551_tree = 
                            (Object)adaptor.create(RPAREN551)
                            ;
                            adaptor.addChild(root_0, RPAREN551_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:537:5: LPAREN select_statement RPAREN
                    {
                    LPAREN552=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param3236); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN552_tree = 
                    (Object)adaptor.create(LPAREN552)
                    ;
                    adaptor.addChild(root_0, LPAREN552_tree);
                    }

                    pushFollow(FOLLOW_select_statement_in_cursor_loop_param3238);
                    select_statement553=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement553.getTree());

                    RPAREN554=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param3240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN554_tree = 
                    (Object)adaptor.create(RPAREN554)
                    ;
                    adaptor.addChild(root_0, RPAREN554_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 77, cursor_loop_param_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_loop_param"


    public static class record_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_name"
    // antlr3/PLSQL3.g:541:1: record_name : identifier ;
    public final PLSQL3Parser.record_name_return record_name() throws RecognitionException {
        PLSQL3Parser.record_name_return retval = new PLSQL3Parser.record_name_return();
        retval.start = input.LT(1);

        int record_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier555 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

            // antlr3/PLSQL3.g:542:2: ( identifier )
            // antlr3/PLSQL3.g:542:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_record_name3255);
            identifier555=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier555.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 78, record_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "record_name"


    public static class commit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "commit_statement"
    // antlr3/PLSQL3.g:545:1: commit_statement : 'COMMIT' ;
    public final PLSQL3Parser.commit_statement_return commit_statement() throws RecognitionException {
        PLSQL3Parser.commit_statement_return retval = new PLSQL3Parser.commit_statement_return();
        retval.start = input.LT(1);

        int commit_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal556=null;

        Object string_literal556_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

            // antlr3/PLSQL3.g:546:2: ( 'COMMIT' )
            // antlr3/PLSQL3.g:546:4: 'COMMIT'
            {
            root_0 = (Object)adaptor.nil();


            string_literal556=(Token)match(input,70,FOLLOW_70_in_commit_statement3266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal556_tree = 
            (Object)adaptor.create(string_literal556)
            ;
            adaptor.addChild(root_0, string_literal556_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 79, commit_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "commit_statement"


    public static class if_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_statement"
    // antlr3/PLSQL3.g:549:1: if_statement : 'IF' ^ plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF' ;
    public final PLSQL3Parser.if_statement_return if_statement() throws RecognitionException {
        PLSQL3Parser.if_statement_return retval = new PLSQL3Parser.if_statement_return();
        retval.start = input.LT(1);

        int if_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal557=null;
        Token string_literal559=null;
        Token string_literal563=null;
        Token string_literal565=null;
        Token string_literal567=null;
        Token string_literal568=null;
        PLSQL3Parser.plsql_condition_return plsql_condition558 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements560 =null;

        PLSQL3Parser.keyELSIF_return keyELSIF561 =null;

        PLSQL3Parser.plsql_condition_return plsql_condition562 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements564 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements566 =null;


        Object string_literal557_tree=null;
        Object string_literal559_tree=null;
        Object string_literal563_tree=null;
        Object string_literal565_tree=null;
        Object string_literal567_tree=null;
        Object string_literal568_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

            // antlr3/PLSQL3.g:550:2: ( 'IF' ^ plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF' )
            // antlr3/PLSQL3.g:550:4: 'IF' ^ plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF'
            {
            root_0 = (Object)adaptor.nil();


            string_literal557=(Token)match(input,98,FOLLOW_98_in_if_statement3277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal557_tree = 
            (Object)adaptor.create(string_literal557)
            ;
            root_0 = (Object)adaptor.becomeRoot(string_literal557_tree, root_0);
            }

            pushFollow(FOLLOW_plsql_condition_in_if_statement3280);
            plsql_condition558=plsql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition558.getTree());

            string_literal559=(Token)match(input,154,FOLLOW_154_in_if_statement3282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal559_tree = 
            (Object)adaptor.create(string_literal559)
            ;
            adaptor.addChild(root_0, string_literal559_tree);
            }

            pushFollow(FOLLOW_seq_of_statements_in_if_statement3284);
            seq_of_statements560=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements560.getTree());

            // antlr3/PLSQL3.g:551:3: ( keyELSIF plsql_condition 'THEN' seq_of_statements )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==84) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // antlr3/PLSQL3.g:552:4: keyELSIF plsql_condition 'THEN' seq_of_statements
            	    {
            	    pushFollow(FOLLOW_keyELSIF_in_if_statement3294);
            	    keyELSIF561=keyELSIF();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyELSIF561.getTree());

            	    pushFollow(FOLLOW_plsql_condition_in_if_statement3296);
            	    plsql_condition562=plsql_condition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition562.getTree());

            	    string_literal563=(Token)match(input,154,FOLLOW_154_in_if_statement3298); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal563_tree = 
            	    (Object)adaptor.create(string_literal563)
            	    ;
            	    adaptor.addChild(root_0, string_literal563_tree);
            	    }

            	    pushFollow(FOLLOW_seq_of_statements_in_if_statement3300);
            	    seq_of_statements564=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements564.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            // antlr3/PLSQL3.g:554:3: ( 'ELSE' seq_of_statements )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==83) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // antlr3/PLSQL3.g:554:5: 'ELSE' seq_of_statements
                    {
                    string_literal565=(Token)match(input,83,FOLLOW_83_in_if_statement3311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal565_tree = 
                    (Object)adaptor.create(string_literal565)
                    ;
                    adaptor.addChild(root_0, string_literal565_tree);
                    }

                    pushFollow(FOLLOW_seq_of_statements_in_if_statement3313);
                    seq_of_statements566=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements566.getTree());

                    }
                    break;

            }


            string_literal567=(Token)match(input,85,FOLLOW_85_in_if_statement3320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal567_tree = 
            (Object)adaptor.create(string_literal567)
            ;
            adaptor.addChild(root_0, string_literal567_tree);
            }

            string_literal568=(Token)match(input,98,FOLLOW_98_in_if_statement3322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal568_tree = 
            (Object)adaptor.create(string_literal568)
            ;
            adaptor.addChild(root_0, string_literal568_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 80, if_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "if_statement"


    public static class sql_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_statement"
    // antlr3/PLSQL3.g:558:1: sql_statement : sql_command ;
    public final PLSQL3Parser.sql_statement_return sql_statement() throws RecognitionException {
        PLSQL3Parser.sql_statement_return retval = new PLSQL3Parser.sql_statement_return();
        retval.start = input.LT(1);

        int sql_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_command_return sql_command569 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

            // antlr3/PLSQL3.g:559:2: ( sql_command )
            // antlr3/PLSQL3.g:559:4: sql_command
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_command_in_sql_statement3333);
            sql_command569=sql_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_command569.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 81, sql_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_statement"


    public static class sql_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_command"
    // antlr3/PLSQL3.g:562:1: sql_command : ( to_modify_data | to_control_data );
    public final PLSQL3Parser.sql_command_return sql_command() throws RecognitionException {
        PLSQL3Parser.sql_command_return retval = new PLSQL3Parser.sql_command_return();
        retval.start = input.LT(1);

        int sql_command_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.to_modify_data_return to_modify_data570 =null;

        PLSQL3Parser.to_control_data_return to_control_data571 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

            // antlr3/PLSQL3.g:563:2: ( to_modify_data | to_control_data )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==79||LA138_0==101||(LA138_0 >= 147 && LA138_0 <= 148)||LA138_0==159) ) {
                alt138=1;
            }
            else if ( (LA138_0==ID||LA138_0==70||LA138_0==90||LA138_0==108||LA138_0==142||LA138_0==146) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // antlr3/PLSQL3.g:563:4: to_modify_data
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_to_modify_data_in_sql_command3344);
                    to_modify_data570=to_modify_data();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to_modify_data570.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:564:4: to_control_data
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_to_control_data_in_sql_command3349);
                    to_control_data571=to_control_data();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to_control_data571.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 82, sql_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_command"


    public static class to_modify_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "to_modify_data"
    // antlr3/PLSQL3.g:567:1: to_modify_data : ( select_command | insert_command | update_command | delete_command | set_transaction_command );
    public final PLSQL3Parser.to_modify_data_return to_modify_data() throws RecognitionException {
        PLSQL3Parser.to_modify_data_return retval = new PLSQL3Parser.to_modify_data_return();
        retval.start = input.LT(1);

        int to_modify_data_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.select_command_return select_command572 =null;

        PLSQL3Parser.insert_command_return insert_command573 =null;

        PLSQL3Parser.update_command_return update_command574 =null;

        PLSQL3Parser.delete_command_return delete_command575 =null;

        PLSQL3Parser.set_transaction_command_return set_transaction_command576 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

            // antlr3/PLSQL3.g:568:2: ( select_command | insert_command | update_command | delete_command | set_transaction_command )
            int alt139=5;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt139=1;
                }
                break;
            case 101:
                {
                alt139=2;
                }
                break;
            case 159:
                {
                alt139=3;
                }
                break;
            case 79:
                {
                alt139=4;
                }
                break;
            case 148:
                {
                alt139=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }

            switch (alt139) {
                case 1 :
                    // antlr3/PLSQL3.g:568:4: select_command
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_select_command_in_to_modify_data3360);
                    select_command572=select_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command572.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:569:4: insert_command
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_insert_command_in_to_modify_data3365);
                    insert_command573=insert_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_command573.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:570:4: update_command
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_update_command_in_to_modify_data3370);
                    update_command574=update_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_command574.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:571:4: delete_command
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_delete_command_in_to_modify_data3375);
                    delete_command575=delete_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_command575.getTree());

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:572:4: set_transaction_command
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_set_transaction_command_in_to_modify_data3380);
                    set_transaction_command576=set_transaction_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_command576.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 83, to_modify_data_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "to_modify_data"


    public static class to_control_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "to_control_data"
    // antlr3/PLSQL3.g:575:1: to_control_data : ( close_statement | commit_statement | fetch_statement | lock_table_statement | open_statement | rollback_statement | savepoint_statement );
    public final PLSQL3Parser.to_control_data_return to_control_data() throws RecognitionException {
        PLSQL3Parser.to_control_data_return retval = new PLSQL3Parser.to_control_data_return();
        retval.start = input.LT(1);

        int to_control_data_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.close_statement_return close_statement577 =null;

        PLSQL3Parser.commit_statement_return commit_statement578 =null;

        PLSQL3Parser.fetch_statement_return fetch_statement579 =null;

        PLSQL3Parser.lock_table_statement_return lock_table_statement580 =null;

        PLSQL3Parser.open_statement_return open_statement581 =null;

        PLSQL3Parser.rollback_statement_return rollback_statement582 =null;

        PLSQL3Parser.savepoint_statement_return savepoint_statement583 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

            // antlr3/PLSQL3.g:576:2: ( close_statement | commit_statement | fetch_statement | lock_table_statement | open_statement | rollback_statement | savepoint_statement )
            int alt140=7;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA140_1 = input.LA(2);

                if ( (LA140_1==DOUBLEQUOTED_STRING||LA140_1==ID) ) {
                    int LA140_7 = input.LA(3);

                    if ( ((((input.LT(1).getText().equalsIgnoreCase("CLOSE"))&&(input.LT(1).getText().equalsIgnoreCase("CLOSE")))&&synpred252_PLSQL3())) ) {
                        alt140=1;
                    }
                    else if ( ((((input.LT(1).getText().equalsIgnoreCase("OPEN"))&&(input.LT(1).getText().equalsIgnoreCase("OPEN")))&&synpred256_PLSQL3())) ) {
                        alt140=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 140, 7, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 140, 1, input);

                    throw nvae;

                }
                }
                break;
            case 70:
                {
                alt140=2;
                }
                break;
            case 90:
                {
                alt140=3;
                }
                break;
            case 108:
                {
                alt140=4;
                }
                break;
            case 142:
                {
                alt140=6;
                }
                break;
            case 146:
                {
                alt140=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }

            switch (alt140) {
                case 1 :
                    // antlr3/PLSQL3.g:576:4: close_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_close_statement_in_to_control_data3391);
                    close_statement577=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement577.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:577:4: commit_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_commit_statement_in_to_control_data3396);
                    commit_statement578=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement578.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:578:4: fetch_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_fetch_statement_in_to_control_data3401);
                    fetch_statement579=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement579.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:579:4: lock_table_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lock_table_statement_in_to_control_data3406);
                    lock_table_statement580=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement580.getTree());

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:580:4: open_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_open_statement_in_to_control_data3411);
                    open_statement581=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement581.getTree());

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:581:4: rollback_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rollback_statement_in_to_control_data3416);
                    rollback_statement582=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement582.getTree());

                    }
                    break;
                case 7 :
                    // antlr3/PLSQL3.g:582:4: savepoint_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_savepoint_statement_in_to_control_data3421);
                    savepoint_statement583=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement583.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 84, to_control_data_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "to_control_data"


    public static class select_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_command"
    // antlr3/PLSQL3.g:585:1: select_command : select_statement ;
    public final PLSQL3Parser.select_command_return select_command() throws RecognitionException {
        PLSQL3Parser.select_command_return retval = new PLSQL3Parser.select_command_return();
        retval.start = input.LT(1);

        int select_command_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.select_statement_return select_statement584 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

            // antlr3/PLSQL3.g:586:2: ( select_statement )
            // antlr3/PLSQL3.g:586:4: select_statement
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_select_statement_in_select_command3432);
            select_statement584=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement584.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 85, select_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_command"


    public static class select_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_statement"
    // antlr3/PLSQL3.g:589:1: select_statement : select_expression ;
    public final PLSQL3Parser.select_statement_return select_statement() throws RecognitionException {
        PLSQL3Parser.select_statement_return retval = new PLSQL3Parser.select_statement_return();
        retval.start = input.LT(1);

        int select_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.select_expression_return select_expression585 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

            // antlr3/PLSQL3.g:590:2: ( select_expression )
            // antlr3/PLSQL3.g:591:3: select_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_select_expression_in_select_statement3446);
            select_expression585=select_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression585.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 86, select_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_statement"


    public static class select_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_expression"
    // antlr3/PLSQL3.g:594:1: select_expression : 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( join_clause | LPAREN join_clause RPAREN | table_reference_list ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )? ( order_by_clause )? ;
    public final PLSQL3Parser.select_expression_return select_expression() throws RecognitionException {
        PLSQL3Parser.select_expression_return retval = new PLSQL3Parser.select_expression_return();
        retval.start = input.LT(1);

        int select_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal586=null;
        Token set587=null;
        Token string_literal591=null;
        Token string_literal593=null;
        Token LPAREN595=null;
        Token RPAREN597=null;
        Token string_literal602=null;
        Token string_literal605=null;
        Token string_literal606=null;
        Token string_literal607=null;
        Token string_literal608=null;
        PLSQL3Parser.select_list_return select_list588 =null;

        PLSQL3Parser.keyBULK_return keyBULK589 =null;

        PLSQL3Parser.keyCOLLECT_return keyCOLLECT590 =null;

        PLSQL3Parser.lvalues_return lvalues592 =null;

        PLSQL3Parser.join_clause_return join_clause594 =null;

        PLSQL3Parser.join_clause_return join_clause596 =null;

        PLSQL3Parser.table_reference_list_return table_reference_list598 =null;

        PLSQL3Parser.where_clause_return where_clause599 =null;

        PLSQL3Parser.hierarchical_query_clause_return hierarchical_query_clause600 =null;

        PLSQL3Parser.group_by_clause_return group_by_clause601 =null;

        PLSQL3Parser.sql_condition_return sql_condition603 =null;

        PLSQL3Parser.model_clause_return model_clause604 =null;

        PLSQL3Parser.select_expression_return select_expression609 =null;

        PLSQL3Parser.subquery_return subquery610 =null;

        PLSQL3Parser.order_by_clause_return order_by_clause611 =null;


        Object string_literal586_tree=null;
        Object set587_tree=null;
        Object string_literal591_tree=null;
        Object string_literal593_tree=null;
        Object LPAREN595_tree=null;
        Object RPAREN597_tree=null;
        Object string_literal602_tree=null;
        Object string_literal605_tree=null;
        Object string_literal606_tree=null;
        Object string_literal607_tree=null;
        Object string_literal608_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

            // antlr3/PLSQL3.g:595:2: ( 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( join_clause | LPAREN join_clause RPAREN | table_reference_list ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )? ( order_by_clause )? )
            // antlr3/PLSQL3.g:596:3: 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( join_clause | LPAREN join_clause RPAREN | table_reference_list ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )? ( order_by_clause )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal586=(Token)match(input,147,FOLLOW_147_in_select_expression3461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal586_tree = 
            (Object)adaptor.create(string_literal586)
            ;
            adaptor.addChild(root_0, string_literal586_tree);
            }

            // antlr3/PLSQL3.g:596:26: ( 'DISTINCT' | 'UNIQUE' | 'ALL' )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==81) ) {
                int LA141_1 = input.LA(2);

                if ( (!((( is_sql )))) ) {
                    alt141=1;
                }
            }
            else if ( (LA141_0==50||LA141_0==158) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // antlr3/PLSQL3.g:
                    {
                    set587=(Token)input.LT(1);

                    if ( input.LA(1)==50||input.LA(1)==81||input.LA(1)==158 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set587)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_select_list_in_select_expression3480);
            select_list588=select_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list588.getTree());

            // antlr3/PLSQL3.g:597:3: ( keyBULK keyCOLLECT )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==ID) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // antlr3/PLSQL3.g:597:5: keyBULK keyCOLLECT
                    {
                    pushFollow(FOLLOW_keyBULK_in_select_expression3486);
                    keyBULK589=keyBULK();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBULK589.getTree());

                    pushFollow(FOLLOW_keyCOLLECT_in_select_expression3488);
                    keyCOLLECT590=keyCOLLECT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOLLECT590.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:598:3: ( 'INTO' lvalues )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==105) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // antlr3/PLSQL3.g:598:5: 'INTO' lvalues
                    {
                    string_literal591=(Token)match(input,105,FOLLOW_105_in_select_expression3497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal591_tree = 
                    (Object)adaptor.create(string_literal591)
                    ;
                    adaptor.addChild(root_0, string_literal591_tree);
                    }

                    pushFollow(FOLLOW_lvalues_in_select_expression3499);
                    lvalues592=lvalues();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalues592.getTree());

                    }
                    break;

            }


            string_literal593=(Token)match(input,93,FOLLOW_93_in_select_expression3506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal593_tree = 
            (Object)adaptor.create(string_literal593)
            ;
            adaptor.addChild(root_0, string_literal593_tree);
            }

            // antlr3/PLSQL3.g:599:10: ( join_clause | LPAREN join_clause RPAREN | table_reference_list )
            int alt144=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA144_1 = input.LA(2);

                if ( (synpred263_PLSQL3()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);

                    throw nvae;

                }
                }
                break;
            case 144:
                {
                int LA144_2 = input.LA(2);

                if ( (synpred263_PLSQL3()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 2, input);

                    throw nvae;

                }
                }
                break;
            case 153:
                {
                int LA144_3 = input.LA(2);

                if ( (synpred263_PLSQL3()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA144_4 = input.LA(2);

                if ( (synpred263_PLSQL3()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 4, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA144_5 = input.LA(2);

                if ( (synpred263_PLSQL3()) ) {
                    alt144=1;
                }
                else if ( (synpred264_PLSQL3()) ) {
                    alt144=2;
                }
                else if ( (true) ) {
                    alt144=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 5, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }

            switch (alt144) {
                case 1 :
                    // antlr3/PLSQL3.g:599:12: join_clause
                    {
                    pushFollow(FOLLOW_join_clause_in_select_expression3510);
                    join_clause594=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause594.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:599:26: LPAREN join_clause RPAREN
                    {
                    LPAREN595=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_select_expression3514); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN595_tree = 
                    (Object)adaptor.create(LPAREN595)
                    ;
                    adaptor.addChild(root_0, LPAREN595_tree);
                    }

                    pushFollow(FOLLOW_join_clause_in_select_expression3516);
                    join_clause596=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause596.getTree());

                    RPAREN597=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_select_expression3518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN597_tree = 
                    (Object)adaptor.create(RPAREN597)
                    ;
                    adaptor.addChild(root_0, RPAREN597_tree);
                    }

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:599:54: table_reference_list
                    {
                    pushFollow(FOLLOW_table_reference_list_in_select_expression3522);
                    table_reference_list598=table_reference_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list598.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:600:3: ( where_clause )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==165) ) {
                int LA145_1 = input.LA(2);

                if ( (synpred265_PLSQL3()) ) {
                    alt145=1;
                }
            }
            switch (alt145) {
                case 1 :
                    // antlr3/PLSQL3.g:600:5: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_select_expression3530);
                    where_clause599=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause599.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:600:21: ( hierarchical_query_clause )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==152) ) {
                int LA146_1 = input.LA(2);

                if ( (synpred266_PLSQL3()) ) {
                    alt146=1;
                }
            }
            else if ( (LA146_0==71) ) {
                int LA146_2 = input.LA(2);

                if ( (synpred266_PLSQL3()) ) {
                    alt146=1;
                }
            }
            switch (alt146) {
                case 1 :
                    // antlr3/PLSQL3.g:600:23: hierarchical_query_clause
                    {
                    pushFollow(FOLLOW_hierarchical_query_clause_in_select_expression3537);
                    hierarchical_query_clause600=hierarchical_query_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hierarchical_query_clause600.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:600:52: ( group_by_clause )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==96) ) {
                int LA147_1 = input.LA(2);

                if ( (synpred267_PLSQL3()) ) {
                    alt147=1;
                }
            }
            switch (alt147) {
                case 1 :
                    // antlr3/PLSQL3.g:600:54: group_by_clause
                    {
                    pushFollow(FOLLOW_group_by_clause_in_select_expression3544);
                    group_by_clause601=group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_clause601.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:601:3: ( 'HAVING' sql_condition )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==97) ) {
                int LA148_1 = input.LA(2);

                if ( (synpred268_PLSQL3()) ) {
                    alt148=1;
                }
            }
            switch (alt148) {
                case 1 :
                    // antlr3/PLSQL3.g:601:5: 'HAVING' sql_condition
                    {
                    string_literal602=(Token)match(input,97,FOLLOW_97_in_select_expression3553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal602_tree = 
                    (Object)adaptor.create(string_literal602)
                    ;
                    adaptor.addChild(root_0, string_literal602_tree);
                    }

                    pushFollow(FOLLOW_sql_condition_in_select_expression3555);
                    sql_condition603=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition603.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:601:31: ( model_clause )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ID) ) {
                int LA149_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("MODEL"))&&(input.LT(1).getText().equalsIgnoreCase("MODEL")))&&synpred269_PLSQL3())) ) {
                    alt149=1;
                }
            }
            switch (alt149) {
                case 1 :
                    // antlr3/PLSQL3.g:601:33: model_clause
                    {
                    pushFollow(FOLLOW_model_clause_in_select_expression3562);
                    model_clause604=model_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_clause604.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:602:3: ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )?
            int alt153=2;
            switch ( input.LA(1) ) {
                case 157:
                    {
                    int LA153_1 = input.LA(2);

                    if ( (synpred274_PLSQL3()) ) {
                        alt153=1;
                    }
                    }
                    break;
                case 104:
                    {
                    int LA153_2 = input.LA(2);

                    if ( (synpred274_PLSQL3()) ) {
                        alt153=1;
                    }
                    }
                    break;
                case 111:
                    {
                    int LA153_3 = input.LA(2);

                    if ( (synpred274_PLSQL3()) ) {
                        alt153=1;
                    }
                    }
                    break;
            }

            switch (alt153) {
                case 1 :
                    // antlr3/PLSQL3.g:602:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery )
                    {
                    // antlr3/PLSQL3.g:602:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )
                    int alt151=3;
                    switch ( input.LA(1) ) {
                    case 157:
                        {
                        alt151=1;
                        }
                        break;
                    case 104:
                        {
                        alt151=2;
                        }
                        break;
                    case 111:
                        {
                        alt151=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 0, input);

                        throw nvae;

                    }

                    switch (alt151) {
                        case 1 :
                            // antlr3/PLSQL3.g:602:7: 'UNION' ( 'ALL' )?
                            {
                            string_literal605=(Token)match(input,157,FOLLOW_157_in_select_expression3573); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal605_tree = 
                            (Object)adaptor.create(string_literal605)
                            ;
                            adaptor.addChild(root_0, string_literal605_tree);
                            }

                            // antlr3/PLSQL3.g:602:15: ( 'ALL' )?
                            int alt150=2;
                            int LA150_0 = input.LA(1);

                            if ( (LA150_0==50) ) {
                                alt150=1;
                            }
                            switch (alt150) {
                                case 1 :
                                    // antlr3/PLSQL3.g:602:17: 'ALL'
                                    {
                                    string_literal606=(Token)match(input,50,FOLLOW_50_in_select_expression3577); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal606_tree = 
                                    (Object)adaptor.create(string_literal606)
                                    ;
                                    adaptor.addChild(root_0, string_literal606_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:603:6: 'INTERSECT'
                            {
                            string_literal607=(Token)match(input,104,FOLLOW_104_in_select_expression3587); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal607_tree = 
                            (Object)adaptor.create(string_literal607)
                            ;
                            adaptor.addChild(root_0, string_literal607_tree);
                            }

                            }
                            break;
                        case 3 :
                            // antlr3/PLSQL3.g:604:6: 'MINUS'
                            {
                            string_literal608=(Token)match(input,111,FOLLOW_111_in_select_expression3594); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal608_tree = 
                            (Object)adaptor.create(string_literal608)
                            ;
                            adaptor.addChild(root_0, string_literal608_tree);
                            }

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:606:4: ( select_expression | subquery )
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==147) ) {
                        alt152=1;
                    }
                    else if ( (LA152_0==LPAREN) ) {
                        alt152=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 152, 0, input);

                        throw nvae;

                    }
                    switch (alt152) {
                        case 1 :
                            // antlr3/PLSQL3.g:606:6: select_expression
                            {
                            pushFollow(FOLLOW_select_expression_in_select_expression3606);
                            select_expression609=select_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression609.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:607:6: subquery
                            {
                            pushFollow(FOLLOW_subquery_in_select_expression3614);
                            subquery610=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery610.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // antlr3/PLSQL3.g:610:3: ( order_by_clause )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==128) ) {
                int LA154_1 = input.LA(2);

                if ( (synpred275_PLSQL3()) ) {
                    alt154=1;
                }
            }
            switch (alt154) {
                case 1 :
                    // antlr3/PLSQL3.g:610:5: order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_select_expression3630);
                    order_by_clause611=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause611.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 87, select_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_expression"


    public static class select_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_list"
    // antlr3/PLSQL3.g:613:1: select_list : ( ASTERISK | displayed_column ( COMMA displayed_column )* );
    public final PLSQL3Parser.select_list_return select_list() throws RecognitionException {
        PLSQL3Parser.select_list_return retval = new PLSQL3Parser.select_list_return();
        retval.start = input.LT(1);

        int select_list_StartIndex = input.index();

        Object root_0 = null;

        Token ASTERISK612=null;
        Token COMMA614=null;
        PLSQL3Parser.displayed_column_return displayed_column613 =null;

        PLSQL3Parser.displayed_column_return displayed_column615 =null;


        Object ASTERISK612_tree=null;
        Object COMMA614_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

            // antlr3/PLSQL3.g:614:2: ( ASTERISK | displayed_column ( COMMA displayed_column )* )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==ASTERISK) ) {
                alt156=1;
            }
            else if ( (LA156_0==DOUBLEQUOTED_STRING||LA156_0==ID||LA156_0==LPAREN||LA156_0==MINUS||LA156_0==NUMBER||LA156_0==PLUS||LA156_0==QUOTED_STRING||LA156_0==65||LA156_0==81||LA156_0==89||LA156_0==120||LA156_0==144||LA156_0==147||LA156_0==151||LA156_0==156) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }
            switch (alt156) {
                case 1 :
                    // antlr3/PLSQL3.g:614:4: ASTERISK
                    {
                    root_0 = (Object)adaptor.nil();


                    ASTERISK612=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list3644); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK612_tree = 
                    (Object)adaptor.create(ASTERISK612)
                    ;
                    adaptor.addChild(root_0, ASTERISK612_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:615:4: displayed_column ( COMMA displayed_column )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_displayed_column_in_select_list3649);
                    displayed_column613=displayed_column();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column613.getTree());

                    // antlr3/PLSQL3.g:615:21: ( COMMA displayed_column )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==COMMA) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:615:23: COMMA displayed_column
                    	    {
                    	    COMMA614=(Token)match(input,COMMA,FOLLOW_COMMA_in_select_list3653); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA614_tree = 
                    	    (Object)adaptor.create(COMMA614)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA614_tree);
                    	    }

                    	    pushFollow(FOLLOW_displayed_column_in_select_list3655);
                    	    displayed_column615=displayed_column();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column615.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 88, select_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_list"


    public static class table_reference_list_from_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_reference_list_from"
    // antlr3/PLSQL3.g:618:1: table_reference_list_from : 'FROM' table_reference_list ;
    public final PLSQL3Parser.table_reference_list_from_return table_reference_list_from() throws RecognitionException {
        PLSQL3Parser.table_reference_list_from_return retval = new PLSQL3Parser.table_reference_list_from_return();
        retval.start = input.LT(1);

        int table_reference_list_from_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal616=null;
        PLSQL3Parser.table_reference_list_return table_reference_list617 =null;


        Object string_literal616_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

            // antlr3/PLSQL3.g:619:2: ( 'FROM' table_reference_list )
            // antlr3/PLSQL3.g:619:4: 'FROM' table_reference_list
            {
            root_0 = (Object)adaptor.nil();


            string_literal616=(Token)match(input,93,FOLLOW_93_in_table_reference_list_from3669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal616_tree = 
            (Object)adaptor.create(string_literal616)
            ;
            adaptor.addChild(root_0, string_literal616_tree);
            }

            pushFollow(FOLLOW_table_reference_list_in_table_reference_list_from3671);
            table_reference_list617=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list617.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 89, table_reference_list_from_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_reference_list_from"


    public static class table_reference_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_reference_list"
    // antlr3/PLSQL3.g:622:1: table_reference_list : selected_table ( COMMA selected_table )* ;
    public final PLSQL3Parser.table_reference_list_return table_reference_list() throws RecognitionException {
        PLSQL3Parser.table_reference_list_return retval = new PLSQL3Parser.table_reference_list_return();
        retval.start = input.LT(1);

        int table_reference_list_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA619=null;
        PLSQL3Parser.selected_table_return selected_table618 =null;

        PLSQL3Parser.selected_table_return selected_table620 =null;


        Object COMMA619_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

            // antlr3/PLSQL3.g:623:2: ( selected_table ( COMMA selected_table )* )
            // antlr3/PLSQL3.g:623:4: selected_table ( COMMA selected_table )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_selected_table_in_table_reference_list3682);
            selected_table618=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table618.getTree());

            // antlr3/PLSQL3.g:623:19: ( COMMA selected_table )*
            loop157:
            do {
                int alt157=2;
                alt157 = dfa157.predict(input);
                switch (alt157) {
            	case 1 :
            	    // antlr3/PLSQL3.g:623:21: COMMA selected_table
            	    {
            	    COMMA619=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_reference_list3686); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA619_tree = 
            	    (Object)adaptor.create(COMMA619)
            	    ;
            	    adaptor.addChild(root_0, COMMA619_tree);
            	    }

            	    pushFollow(FOLLOW_selected_table_in_table_reference_list3688);
            	    selected_table620=selected_table();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table620.getTree());

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 90, table_reference_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_reference_list"


    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // antlr3/PLSQL3.g:626:1: join_clause : selected_table ( inner_cross_join_clause | outer_join_clause )+ ;
    public final PLSQL3Parser.join_clause_return join_clause() throws RecognitionException {
        PLSQL3Parser.join_clause_return retval = new PLSQL3Parser.join_clause_return();
        retval.start = input.LT(1);

        int join_clause_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.selected_table_return selected_table621 =null;

        PLSQL3Parser.inner_cross_join_clause_return inner_cross_join_clause622 =null;

        PLSQL3Parser.outer_join_clause_return outer_join_clause623 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

            // antlr3/PLSQL3.g:627:2: ( selected_table ( inner_cross_join_clause | outer_join_clause )+ )
            // antlr3/PLSQL3.g:627:4: selected_table ( inner_cross_join_clause | outer_join_clause )+
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_selected_table_in_join_clause3702);
            selected_table621=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table621.getTree());

            // antlr3/PLSQL3.g:627:19: ( inner_cross_join_clause | outer_join_clause )+
            int cnt158=0;
            loop158:
            do {
                int alt158=3;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==ID) ) {
                    int LA158_2 = input.LA(2);

                    if ( (((((input.LT(1).getText().equalsIgnoreCase("INNER"))||(input.LT(1).getText().equalsIgnoreCase("JOIN"))||(input.LT(1).getText().equalsIgnoreCase("NATURAL"))||(input.LT(1).getText().equalsIgnoreCase("CROSS")))&&((input.LT(1).getText().equalsIgnoreCase("INNER"))||(input.LT(1).getText().equalsIgnoreCase("JOIN"))||(input.LT(1).getText().equalsIgnoreCase("NATURAL"))||(input.LT(1).getText().equalsIgnoreCase("CROSS"))))&&synpred279_PLSQL3())) ) {
                        alt158=1;
                    }
                    else if ( (((((input.LT(1).getText().equalsIgnoreCase("PARTITION"))||(input.LT(1).getText().equalsIgnoreCase("FULL"))||(input.LT(1).getText().equalsIgnoreCase("NATURAL"))||(input.LT(1).getText().equalsIgnoreCase("LEFT"))||(input.LT(1).getText().equalsIgnoreCase("RIGHT")))&&((input.LT(1).getText().equalsIgnoreCase("PARTITION"))||(input.LT(1).getText().equalsIgnoreCase("FULL"))||(input.LT(1).getText().equalsIgnoreCase("NATURAL"))||(input.LT(1).getText().equalsIgnoreCase("LEFT"))||(input.LT(1).getText().equalsIgnoreCase("RIGHT"))))&&synpred280_PLSQL3())) ) {
                        alt158=2;
                    }


                }


                switch (alt158) {
            	case 1 :
            	    // antlr3/PLSQL3.g:627:21: inner_cross_join_clause
            	    {
            	    pushFollow(FOLLOW_inner_cross_join_clause_in_join_clause3706);
            	    inner_cross_join_clause622=inner_cross_join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inner_cross_join_clause622.getTree());

            	    }
            	    break;
            	case 2 :
            	    // antlr3/PLSQL3.g:627:47: outer_join_clause
            	    {
            	    pushFollow(FOLLOW_outer_join_clause_in_join_clause3710);
            	    outer_join_clause623=outer_join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_clause623.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt158 >= 1 ) break loop158;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(158, input);
                        throw eee;
                }
                cnt158++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 91, join_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class inner_cross_join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inner_cross_join_clause"
    // antlr3/PLSQL3.g:629:1: inner_cross_join_clause : ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) | ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name );
    public final PLSQL3Parser.inner_cross_join_clause_return inner_cross_join_clause() throws RecognitionException {
        PLSQL3Parser.inner_cross_join_clause_return retval = new PLSQL3Parser.inner_cross_join_clause_return();
        retval.start = input.LT(1);

        int inner_cross_join_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal627=null;
        Token LPAREN630=null;
        Token RPAREN632=null;
        PLSQL3Parser.keyINNER_return keyINNER624 =null;

        PLSQL3Parser.keyJOIN_return keyJOIN625 =null;

        PLSQL3Parser.table_name_return table_name626 =null;

        PLSQL3Parser.sql_condition_return sql_condition628 =null;

        PLSQL3Parser.keyUSING_return keyUSING629 =null;

        PLSQL3Parser.column_specs_return column_specs631 =null;

        PLSQL3Parser.keyCROSS_return keyCROSS633 =null;

        PLSQL3Parser.keyNATURAL_return keyNATURAL634 =null;

        PLSQL3Parser.keyINNER_return keyINNER635 =null;

        PLSQL3Parser.keyJOIN_return keyJOIN636 =null;

        PLSQL3Parser.table_name_return table_name637 =null;


        Object string_literal627_tree=null;
        Object LPAREN630_tree=null;
        Object RPAREN632_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

            // antlr3/PLSQL3.g:630:2: ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) | ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==ID) ) {
                int LA162_1 = input.LA(2);

                if ( (((((input.LT(1).getText().equalsIgnoreCase("INNER"))||(input.LT(1).getText().equalsIgnoreCase("JOIN")))&&((input.LT(1).getText().equalsIgnoreCase("INNER"))||(input.LT(1).getText().equalsIgnoreCase("JOIN"))))&&synpred283_PLSQL3())) ) {
                    alt162=1;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("NATURAL"))||(input.LT(1).getText().equalsIgnoreCase("CROSS")))) ) {
                    alt162=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;

            }
            switch (alt162) {
                case 1 :
                    // antlr3/PLSQL3.g:630:4: ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
                    {
                    root_0 = (Object)adaptor.nil();


                    // antlr3/PLSQL3.g:630:4: ( keyINNER )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==ID) ) {
                        int LA159_1 = input.LA(2);

                        if ( (LA159_1==ID) ) {
                            int LA159_2 = input.LA(3);

                            if ( (LA159_2==ID) ) {
                                int LA159_4 = input.LA(4);

                                if ( (LA159_4==ID||LA159_4==126) ) {
                                    alt159=1;
                                }
                            }
                            else if ( (LA159_2==DOUBLEQUOTED_STRING||LA159_2==144) ) {
                                alt159=1;
                            }
                        }
                    }
                    switch (alt159) {
                        case 1 :
                            // antlr3/PLSQL3.g:630:6: keyINNER
                            {
                            pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause3725);
                            keyINNER624=keyINNER();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINNER624.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause3730);
                    keyJOIN625=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN625.getTree());

                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause3732);
                    table_name626=table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name626.getTree());

                    // antlr3/PLSQL3.g:630:37: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==126) ) {
                        alt160=1;
                    }
                    else if ( (LA160_0==ID) ) {
                        alt160=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 160, 0, input);

                        throw nvae;

                    }
                    switch (alt160) {
                        case 1 :
                            // antlr3/PLSQL3.g:630:39: 'ON' sql_condition
                            {
                            string_literal627=(Token)match(input,126,FOLLOW_126_in_inner_cross_join_clause3736); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal627_tree = 
                            (Object)adaptor.create(string_literal627)
                            ;
                            adaptor.addChild(root_0, string_literal627_tree);
                            }

                            pushFollow(FOLLOW_sql_condition_in_inner_cross_join_clause3738);
                            sql_condition628=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition628.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:630:60: keyUSING LPAREN column_specs RPAREN
                            {
                            pushFollow(FOLLOW_keyUSING_in_inner_cross_join_clause3742);
                            keyUSING629=keyUSING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUSING629.getTree());

                            LPAREN630=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_inner_cross_join_clause3744); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN630_tree = 
                            (Object)adaptor.create(LPAREN630)
                            ;
                            adaptor.addChild(root_0, LPAREN630_tree);
                            }

                            pushFollow(FOLLOW_column_specs_in_inner_cross_join_clause3746);
                            column_specs631=column_specs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs631.getTree());

                            RPAREN632=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_inner_cross_join_clause3748); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN632_tree = 
                            (Object)adaptor.create(RPAREN632)
                            ;
                            adaptor.addChild(root_0, RPAREN632_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:631:4: ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name
                    {
                    root_0 = (Object)adaptor.nil();


                    // antlr3/PLSQL3.g:631:4: ( keyCROSS | keyNATURAL ( keyINNER ) )
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==ID) ) {
                        int LA161_1 = input.LA(2);

                        if ( (LA161_1==ID) ) {
                            int LA161_2 = input.LA(3);

                            if ( (LA161_2==ID) ) {
                                switch ( input.LA(4) ) {
                                case EOF:
                                case ASTERISK:
                                case BULK_ROWCOUNT_ATTR:
                                case COMMA:
                                case DIVIDE:
                                case DOUBLEDOT:
                                case DOUBLEVERTBAR:
                                case EQ:
                                case EXPONENT:
                                case FOUND_ATTR:
                                case GEQ:
                                case GTH:
                                case ISOPEN_ATTR:
                                case LEQ:
                                case LPAREN:
                                case LTH:
                                case MINUS:
                                case NOTFOUND_ATTR:
                                case NOT_EQ:
                                case NUMBER:
                                case PLUS:
                                case QUOTED_STRING:
                                case RBRACK:
                                case ROWCOUNT_ATTR:
                                case RPAREN:
                                case SEMI:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 57:
                                case 65:
                                case 71:
                                case 80:
                                case 81:
                                case 83:
                                case 85:
                                case 88:
                                case 89:
                                case 93:
                                case 96:
                                case 97:
                                case 99:
                                case 104:
                                case 105:
                                case 106:
                                case 107:
                                case 110:
                                case 111:
                                case 118:
                                case 120:
                                case 126:
                                case 127:
                                case 128:
                                case 134:
                                case 140:
                                case 141:
                                case 147:
                                case 151:
                                case 152:
                                case 154:
                                case 156:
                                case 157:
                                case 164:
                                case 165:
                                    {
                                    alt161=1;
                                    }
                                    break;
                                case ID:
                                    {
                                    int LA161_5 = input.LA(5);

                                    if ( (((synpred284_PLSQL3()&&synpred284_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("CROSS")))) ) {
                                        alt161=1;
                                    }
                                    else if ( ((input.LT(1).getText().equalsIgnoreCase("NATURAL"))) ) {
                                        alt161=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 161, 5, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case DOUBLEQUOTED_STRING:
                                    {
                                    int LA161_6 = input.LA(5);

                                    if ( (((synpred284_PLSQL3()&&synpred284_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("CROSS")))) ) {
                                        alt161=1;
                                    }
                                    else if ( ((input.LT(1).getText().equalsIgnoreCase("NATURAL"))) ) {
                                        alt161=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 161, 6, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case 144:
                                    {
                                    int LA161_7 = input.LA(5);

                                    if ( (((synpred284_PLSQL3()&&synpred284_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("CROSS")))) ) {
                                        alt161=1;
                                    }
                                    else if ( ((input.LT(1).getText().equalsIgnoreCase("NATURAL"))) ) {
                                        alt161=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 161, 7, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 161, 3, input);

                                    throw nvae;

                                }

                            }
                            else if ( (LA161_2==DOUBLEQUOTED_STRING||LA161_2==144) ) {
                                alt161=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 161, 2, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 161, 0, input);

                        throw nvae;

                    }
                    switch (alt161) {
                        case 1 :
                            // antlr3/PLSQL3.g:631:6: keyCROSS
                            {
                            pushFollow(FOLLOW_keyCROSS_in_inner_cross_join_clause3757);
                            keyCROSS633=keyCROSS();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCROSS633.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:631:17: keyNATURAL ( keyINNER )
                            {
                            pushFollow(FOLLOW_keyNATURAL_in_inner_cross_join_clause3761);
                            keyNATURAL634=keyNATURAL();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNATURAL634.getTree());

                            // antlr3/PLSQL3.g:631:28: ( keyINNER )
                            // antlr3/PLSQL3.g:631:30: keyINNER
                            {
                            pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause3765);
                            keyINNER635=keyINNER();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINNER635.getTree());

                            }


                            }
                            break;

                    }


                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause3771);
                    keyJOIN636=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN636.getTree());

                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause3773);
                    table_name637=table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name637.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 92, inner_cross_join_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "inner_cross_join_clause"


    public static class outer_join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "outer_join_clause"
    // antlr3/PLSQL3.g:633:1: outer_join_clause : ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) selected_table ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )? ;
    public final PLSQL3Parser.outer_join_clause_return outer_join_clause() throws RecognitionException {
        PLSQL3Parser.outer_join_clause_return retval = new PLSQL3Parser.outer_join_clause_return();
        retval.start = input.LT(1);

        int outer_join_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal646=null;
        Token LPAREN649=null;
        Token RPAREN651=null;
        PLSQL3Parser.query_partition_clause_return query_partition_clause638 =null;

        PLSQL3Parser.outer_join_type_return outer_join_type639 =null;

        PLSQL3Parser.keyJOIN_return keyJOIN640 =null;

        PLSQL3Parser.keyNATURAL_return keyNATURAL641 =null;

        PLSQL3Parser.outer_join_type_return outer_join_type642 =null;

        PLSQL3Parser.keyJOIN_return keyJOIN643 =null;

        PLSQL3Parser.selected_table_return selected_table644 =null;

        PLSQL3Parser.query_partition_clause_return query_partition_clause645 =null;

        PLSQL3Parser.sql_condition_return sql_condition647 =null;

        PLSQL3Parser.keyUSING_return keyUSING648 =null;

        PLSQL3Parser.column_specs_return column_specs650 =null;


        Object string_literal646_tree=null;
        Object LPAREN649_tree=null;
        Object RPAREN651_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

            // antlr3/PLSQL3.g:634:2: ( ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) selected_table ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )? )
            // antlr3/PLSQL3.g:634:4: ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) selected_table ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:634:4: ( query_partition_clause )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==ID) ) {
                int LA163_1 = input.LA(2);

                if ( (LA163_1==64) ) {
                    alt163=1;
                }
            }
            switch (alt163) {
                case 1 :
                    // antlr3/PLSQL3.g:634:6: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause3785);
                    query_partition_clause638=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause638.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:635:3: ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==ID) ) {
                int LA165_1 = input.LA(2);

                if ( (LA165_1==ID) ) {
                    int LA165_2 = input.LA(3);

                    if ( (((synpred286_PLSQL3()&&synpred286_PLSQL3())&&((input.LT(1).getText().equalsIgnoreCase("FULL"))||(input.LT(1).getText().equalsIgnoreCase("RIGHT"))||(input.LT(1).getText().equalsIgnoreCase("LEFT"))))) ) {
                        alt165=1;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("NATURAL"))) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // antlr3/PLSQL3.g:635:5: outer_join_type keyJOIN
                    {
                    pushFollow(FOLLOW_outer_join_type_in_outer_join_clause3794);
                    outer_join_type639=outer_join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_type639.getTree());

                    pushFollow(FOLLOW_keyJOIN_in_outer_join_clause3796);
                    keyJOIN640=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN640.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:636:5: keyNATURAL ( outer_join_type )? keyJOIN
                    {
                    pushFollow(FOLLOW_keyNATURAL_in_outer_join_clause3802);
                    keyNATURAL641=keyNATURAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNATURAL641.getTree());

                    // antlr3/PLSQL3.g:636:16: ( outer_join_type )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==ID) ) {
                        int LA164_1 = input.LA(2);

                        if ( (LA164_1==ID) ) {
                            int LA164_2 = input.LA(3);

                            if ( (((synpred287_PLSQL3()&&synpred287_PLSQL3())&&((input.LT(1).getText().equalsIgnoreCase("FULL"))||(input.LT(1).getText().equalsIgnoreCase("RIGHT"))||(input.LT(1).getText().equalsIgnoreCase("LEFT"))))) ) {
                                alt164=1;
                            }
                        }
                    }
                    switch (alt164) {
                        case 1 :
                            // antlr3/PLSQL3.g:636:18: outer_join_type
                            {
                            pushFollow(FOLLOW_outer_join_type_in_outer_join_clause3806);
                            outer_join_type642=outer_join_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_type642.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_keyJOIN_in_outer_join_clause3811);
                    keyJOIN643=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN643.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_selected_table_in_outer_join_clause3819);
            selected_table644=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table644.getTree());

            // antlr3/PLSQL3.g:638:18: ( query_partition_clause )?
            int alt166=2;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // antlr3/PLSQL3.g:638:20: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause3823);
                    query_partition_clause645=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause645.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:639:3: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )?
            int alt167=3;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==126) ) {
                int LA167_1 = input.LA(2);

                if ( (synpred289_PLSQL3()) ) {
                    alt167=1;
                }
            }
            else if ( (LA167_0==ID) ) {
                int LA167_2 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("USING"))&&(input.LT(1).getText().equalsIgnoreCase("USING")))&&synpred290_PLSQL3())) ) {
                    alt167=2;
                }
            }
            switch (alt167) {
                case 1 :
                    // antlr3/PLSQL3.g:639:5: 'ON' sql_condition
                    {
                    string_literal646=(Token)match(input,126,FOLLOW_126_in_outer_join_clause3832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal646_tree = 
                    (Object)adaptor.create(string_literal646)
                    ;
                    adaptor.addChild(root_0, string_literal646_tree);
                    }

                    pushFollow(FOLLOW_sql_condition_in_outer_join_clause3834);
                    sql_condition647=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition647.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:639:26: keyUSING LPAREN column_specs RPAREN
                    {
                    pushFollow(FOLLOW_keyUSING_in_outer_join_clause3838);
                    keyUSING648=keyUSING();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUSING648.getTree());

                    LPAREN649=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_clause3840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN649_tree = 
                    (Object)adaptor.create(LPAREN649)
                    ;
                    adaptor.addChild(root_0, LPAREN649_tree);
                    }

                    pushFollow(FOLLOW_column_specs_in_outer_join_clause3842);
                    column_specs650=column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs650.getTree());

                    RPAREN651=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_clause3844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN651_tree = 
                    (Object)adaptor.create(RPAREN651)
                    ;
                    adaptor.addChild(root_0, RPAREN651_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 93, outer_join_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "outer_join_clause"


    public static class query_partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_partition_clause"
    // antlr3/PLSQL3.g:641:1: query_partition_clause : keyPARTITION 'BY' expression_list ;
    public final PLSQL3Parser.query_partition_clause_return query_partition_clause() throws RecognitionException {
        PLSQL3Parser.query_partition_clause_return retval = new PLSQL3Parser.query_partition_clause_return();
        retval.start = input.LT(1);

        int query_partition_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal653=null;
        PLSQL3Parser.keyPARTITION_return keyPARTITION652 =null;

        PLSQL3Parser.expression_list_return expression_list654 =null;


        Object string_literal653_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

            // antlr3/PLSQL3.g:642:2: ( keyPARTITION 'BY' expression_list )
            // antlr3/PLSQL3.g:642:4: keyPARTITION 'BY' expression_list
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyPARTITION_in_query_partition_clause3857);
            keyPARTITION652=keyPARTITION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPARTITION652.getTree());

            string_literal653=(Token)match(input,64,FOLLOW_64_in_query_partition_clause3859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal653_tree = 
            (Object)adaptor.create(string_literal653)
            ;
            adaptor.addChild(root_0, string_literal653_tree);
            }

            pushFollow(FOLLOW_expression_list_in_query_partition_clause3861);
            expression_list654=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list654.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 94, query_partition_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_partition_clause"


    public static class outer_join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "outer_join_type"
    // antlr3/PLSQL3.g:644:1: outer_join_type : ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )? ;
    public final PLSQL3Parser.outer_join_type_return outer_join_type() throws RecognitionException {
        PLSQL3Parser.outer_join_type_return retval = new PLSQL3Parser.outer_join_type_return();
        retval.start = input.LT(1);

        int outer_join_type_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.keyFULL_return keyFULL655 =null;

        PLSQL3Parser.keyLEFT_return keyLEFT656 =null;

        PLSQL3Parser.keyRIGHT_return keyRIGHT657 =null;

        PLSQL3Parser.keyOUTER_return keyOUTER658 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

            // antlr3/PLSQL3.g:645:2: ( ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )? )
            // antlr3/PLSQL3.g:645:4: ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:645:4: ( keyFULL | keyLEFT | keyRIGHT )
            int alt168=3;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==ID) ) {
                int LA168_1 = input.LA(2);

                if ( (((synpred291_PLSQL3()&&synpred291_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("FULL")))) ) {
                    alt168=1;
                }
                else if ( (((synpred292_PLSQL3()&&synpred292_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("LEFT")))) ) {
                    alt168=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("RIGHT"))) ) {
                    alt168=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;

            }
            switch (alt168) {
                case 1 :
                    // antlr3/PLSQL3.g:645:6: keyFULL
                    {
                    pushFollow(FOLLOW_keyFULL_in_outer_join_type3873);
                    keyFULL655=keyFULL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyFULL655.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:645:16: keyLEFT
                    {
                    pushFollow(FOLLOW_keyLEFT_in_outer_join_type3877);
                    keyLEFT656=keyLEFT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLEFT656.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:645:26: keyRIGHT
                    {
                    pushFollow(FOLLOW_keyRIGHT_in_outer_join_type3881);
                    keyRIGHT657=keyRIGHT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRIGHT657.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:645:37: ( keyOUTER )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==ID) ) {
                int LA169_1 = input.LA(2);

                if ( (LA169_1==ID) ) {
                    int LA169_3 = input.LA(3);

                    if ( (((synpred293_PLSQL3()&&synpred293_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("OUTER")))) ) {
                        alt169=1;
                    }
                }
                else if ( (LA169_1==EOF) ) {
                    alt169=1;
                }
            }
            switch (alt169) {
                case 1 :
                    // antlr3/PLSQL3.g:645:39: keyOUTER
                    {
                    pushFollow(FOLLOW_keyOUTER_in_outer_join_type3887);
                    keyOUTER658=keyOUTER();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOUTER658.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 95, outer_join_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "outer_join_type"


    public static class outer_join_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "outer_join_sign"
    // antlr3/PLSQL3.g:647:1: outer_join_sign : LPAREN PLUS RPAREN ;
    public final PLSQL3Parser.outer_join_sign_return outer_join_sign() throws RecognitionException {
        PLSQL3Parser.outer_join_sign_return retval = new PLSQL3Parser.outer_join_sign_return();
        retval.start = input.LT(1);

        int outer_join_sign_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN659=null;
        Token PLUS660=null;
        Token RPAREN661=null;

        Object LPAREN659_tree=null;
        Object PLUS660_tree=null;
        Object RPAREN661_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

            // antlr3/PLSQL3.g:648:2: ( LPAREN PLUS RPAREN )
            // antlr3/PLSQL3.g:648:4: LPAREN PLUS RPAREN
            {
            root_0 = (Object)adaptor.nil();


            LPAREN659=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_sign3900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN659_tree = 
            (Object)adaptor.create(LPAREN659)
            ;
            adaptor.addChild(root_0, LPAREN659_tree);
            }

            PLUS660=(Token)match(input,PLUS,FOLLOW_PLUS_in_outer_join_sign3902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLUS660_tree = 
            (Object)adaptor.create(PLUS660)
            ;
            adaptor.addChild(root_0, PLUS660_tree);
            }

            RPAREN661=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_sign3904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN661_tree = 
            (Object)adaptor.create(RPAREN661)
            ;
            adaptor.addChild(root_0, RPAREN661_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 96, outer_join_sign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "outer_join_sign"


    public static class where_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "where_clause"
    // antlr3/PLSQL3.g:650:1: where_clause : 'WHERE' sql_condition ;
    public final PLSQL3Parser.where_clause_return where_clause() throws RecognitionException {
        PLSQL3Parser.where_clause_return retval = new PLSQL3Parser.where_clause_return();
        retval.start = input.LT(1);

        int where_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal662=null;
        PLSQL3Parser.sql_condition_return sql_condition663 =null;


        Object string_literal662_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

            // antlr3/PLSQL3.g:651:2: ( 'WHERE' sql_condition )
            // antlr3/PLSQL3.g:651:4: 'WHERE' sql_condition
            {
            root_0 = (Object)adaptor.nil();


            string_literal662=(Token)match(input,165,FOLLOW_165_in_where_clause3914); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal662_tree = 
            (Object)adaptor.create(string_literal662)
            ;
            adaptor.addChild(root_0, string_literal662_tree);
            }

            pushFollow(FOLLOW_sql_condition_in_where_clause3916);
            sql_condition663=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition663.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 97, where_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "where_clause"


    public static class hierarchical_query_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hierarchical_query_clause"
    // antlr3/PLSQL3.g:653:1: hierarchical_query_clause : ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition ;
    public final PLSQL3Parser.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
        PLSQL3Parser.hierarchical_query_clause_return retval = new PLSQL3Parser.hierarchical_query_clause_return();
        retval.start = input.LT(1);

        int hierarchical_query_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal664=null;
        Token string_literal665=null;
        Token string_literal667=null;
        Token string_literal668=null;
        PLSQL3Parser.sql_condition_return sql_condition666 =null;

        PLSQL3Parser.keyNOCYCLE_return keyNOCYCLE669 =null;

        PLSQL3Parser.sql_condition_return sql_condition670 =null;


        Object string_literal664_tree=null;
        Object string_literal665_tree=null;
        Object string_literal667_tree=null;
        Object string_literal668_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

            // antlr3/PLSQL3.g:654:2: ( ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition )
            // antlr3/PLSQL3.g:654:4: ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:654:4: ( 'START' 'WITH' sql_condition )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==152) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // antlr3/PLSQL3.g:654:6: 'START' 'WITH' sql_condition
                    {
                    string_literal664=(Token)match(input,152,FOLLOW_152_in_hierarchical_query_clause3928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal664_tree = 
                    (Object)adaptor.create(string_literal664)
                    ;
                    adaptor.addChild(root_0, string_literal664_tree);
                    }

                    string_literal665=(Token)match(input,167,FOLLOW_167_in_hierarchical_query_clause3930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal665_tree = 
                    (Object)adaptor.create(string_literal665)
                    ;
                    adaptor.addChild(root_0, string_literal665_tree);
                    }

                    pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause3932);
                    sql_condition666=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition666.getTree());

                    }
                    break;

            }


            string_literal667=(Token)match(input,71,FOLLOW_71_in_hierarchical_query_clause3937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal667_tree = 
            (Object)adaptor.create(string_literal667)
            ;
            adaptor.addChild(root_0, string_literal667_tree);
            }

            string_literal668=(Token)match(input,64,FOLLOW_64_in_hierarchical_query_clause3939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal668_tree = 
            (Object)adaptor.create(string_literal668)
            ;
            adaptor.addChild(root_0, string_literal668_tree);
            }

            // antlr3/PLSQL3.g:654:53: ( keyNOCYCLE )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==ID) ) {
                int LA171_1 = input.LA(2);

                if ( (((synpred295_PLSQL3()&&synpred295_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("NOCYCLE")))) ) {
                    alt171=1;
                }
            }
            switch (alt171) {
                case 1 :
                    // antlr3/PLSQL3.g:654:55: keyNOCYCLE
                    {
                    pushFollow(FOLLOW_keyNOCYCLE_in_hierarchical_query_clause3943);
                    keyNOCYCLE669=keyNOCYCLE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNOCYCLE669.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause3948);
            sql_condition670=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition670.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 98, hierarchical_query_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "hierarchical_query_clause"


    public static class group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_by_clause"
    // antlr3/PLSQL3.g:656:1: group_by_clause : 'GROUP' 'BY' group_by_exprs ;
    public final PLSQL3Parser.group_by_clause_return group_by_clause() throws RecognitionException {
        PLSQL3Parser.group_by_clause_return retval = new PLSQL3Parser.group_by_clause_return();
        retval.start = input.LT(1);

        int group_by_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal671=null;
        Token string_literal672=null;
        PLSQL3Parser.group_by_exprs_return group_by_exprs673 =null;


        Object string_literal671_tree=null;
        Object string_literal672_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

            // antlr3/PLSQL3.g:657:2: ( 'GROUP' 'BY' group_by_exprs )
            // antlr3/PLSQL3.g:657:4: 'GROUP' 'BY' group_by_exprs
            {
            root_0 = (Object)adaptor.nil();


            string_literal671=(Token)match(input,96,FOLLOW_96_in_group_by_clause3958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal671_tree = 
            (Object)adaptor.create(string_literal671)
            ;
            adaptor.addChild(root_0, string_literal671_tree);
            }

            string_literal672=(Token)match(input,64,FOLLOW_64_in_group_by_clause3960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal672_tree = 
            (Object)adaptor.create(string_literal672)
            ;
            adaptor.addChild(root_0, string_literal672_tree);
            }

            pushFollow(FOLLOW_group_by_exprs_in_group_by_clause3962);
            group_by_exprs673=group_by_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_exprs673.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 99, group_by_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_by_clause"


    public static class group_by_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_by_exprs"
    // antlr3/PLSQL3.g:659:1: group_by_exprs : group_by_expr ( COMMA group_by_expr )* ;
    public final PLSQL3Parser.group_by_exprs_return group_by_exprs() throws RecognitionException {
        PLSQL3Parser.group_by_exprs_return retval = new PLSQL3Parser.group_by_exprs_return();
        retval.start = input.LT(1);

        int group_by_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA675=null;
        PLSQL3Parser.group_by_expr_return group_by_expr674 =null;

        PLSQL3Parser.group_by_expr_return group_by_expr676 =null;


        Object COMMA675_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

            // antlr3/PLSQL3.g:660:2: ( group_by_expr ( COMMA group_by_expr )* )
            // antlr3/PLSQL3.g:660:4: group_by_expr ( COMMA group_by_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_group_by_expr_in_group_by_exprs3972);
            group_by_expr674=group_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_expr674.getTree());

            // antlr3/PLSQL3.g:660:18: ( COMMA group_by_expr )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==COMMA) ) {
                    int LA172_2 = input.LA(2);

                    if ( (synpred296_PLSQL3()) ) {
                        alt172=1;
                    }


                }


                switch (alt172) {
            	case 1 :
            	    // antlr3/PLSQL3.g:660:20: COMMA group_by_expr
            	    {
            	    COMMA675=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_by_exprs3976); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA675_tree = 
            	    (Object)adaptor.create(COMMA675)
            	    ;
            	    adaptor.addChild(root_0, COMMA675_tree);
            	    }

            	    pushFollow(FOLLOW_group_by_expr_in_group_by_exprs3978);
            	    group_by_expr676=group_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_expr676.getTree());

            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 100, group_by_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_by_exprs"


    public static class group_by_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_by_expr"
    // antlr3/PLSQL3.g:662:1: group_by_expr : ( rollup_cube_clause | grouping_sets_clause | grouping_expression_list );
    public final PLSQL3Parser.group_by_expr_return group_by_expr() throws RecognitionException {
        PLSQL3Parser.group_by_expr_return retval = new PLSQL3Parser.group_by_expr_return();
        retval.start = input.LT(1);

        int group_by_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.rollup_cube_clause_return rollup_cube_clause677 =null;

        PLSQL3Parser.grouping_sets_clause_return grouping_sets_clause678 =null;

        PLSQL3Parser.grouping_expression_list_return grouping_expression_list679 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

            // antlr3/PLSQL3.g:663:2: ( rollup_cube_clause | grouping_sets_clause | grouping_expression_list )
            int alt173=3;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==ID) ) {
                int LA173_1 = input.LA(2);

                if ( (((((input.LT(1).getText().equalsIgnoreCase("CUBE"))||(input.LT(1).getText().equalsIgnoreCase("ROLLUP")))&&((input.LT(1).getText().equalsIgnoreCase("CUBE"))||(input.LT(1).getText().equalsIgnoreCase("ROLLUP"))))&&synpred297_PLSQL3())) ) {
                    alt173=1;
                }
                else if ( (((synpred298_PLSQL3()&&synpred298_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("GROUPING")))) ) {
                    alt173=2;
                }
                else if ( (true) ) {
                    alt173=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 173, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA173_0==DOUBLEQUOTED_STRING||LA173_0==LPAREN||LA173_0==MINUS||LA173_0==NUMBER||LA173_0==PLUS||LA173_0==QUOTED_STRING||LA173_0==65||LA173_0==81||LA173_0==89||LA173_0==120||LA173_0==144||LA173_0==147||LA173_0==151||LA173_0==156) ) {
                alt173=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;

            }
            switch (alt173) {
                case 1 :
                    // antlr3/PLSQL3.g:663:4: rollup_cube_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rollup_cube_clause_in_group_by_expr3991);
                    rollup_cube_clause677=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause677.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:664:4: grouping_sets_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_grouping_sets_clause_in_group_by_expr3996);
                    grouping_sets_clause678=grouping_sets_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_clause678.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:665:4: grouping_expression_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_grouping_expression_list_in_group_by_expr4001);
                    grouping_expression_list679=grouping_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list679.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 101, group_by_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_by_expr"


    public static class rollup_cube_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rollup_cube_clause"
    // antlr3/PLSQL3.g:667:1: rollup_cube_clause : ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN ;
    public final PLSQL3Parser.rollup_cube_clause_return rollup_cube_clause() throws RecognitionException {
        PLSQL3Parser.rollup_cube_clause_return retval = new PLSQL3Parser.rollup_cube_clause_return();
        retval.start = input.LT(1);

        int rollup_cube_clause_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN682=null;
        Token RPAREN684=null;
        PLSQL3Parser.keyROLLUP_return keyROLLUP680 =null;

        PLSQL3Parser.keyCUBE_return keyCUBE681 =null;

        PLSQL3Parser.grouping_expression_list_return grouping_expression_list683 =null;


        Object LPAREN682_tree=null;
        Object RPAREN684_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

            // antlr3/PLSQL3.g:668:2: ( ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN )
            // antlr3/PLSQL3.g:668:4: ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:668:4: ( keyROLLUP | keyCUBE )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==ID) ) {
                int LA174_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("ROLLUP"))&&(input.LT(1).getText().equalsIgnoreCase("ROLLUP")))&&synpred299_PLSQL3())) ) {
                    alt174=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("CUBE"))) ) {
                    alt174=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 174, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;

            }
            switch (alt174) {
                case 1 :
                    // antlr3/PLSQL3.g:668:6: keyROLLUP
                    {
                    pushFollow(FOLLOW_keyROLLUP_in_rollup_cube_clause4013);
                    keyROLLUP680=keyROLLUP();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyROLLUP680.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:668:18: keyCUBE
                    {
                    pushFollow(FOLLOW_keyCUBE_in_rollup_cube_clause4017);
                    keyCUBE681=keyCUBE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCUBE681.getTree());

                    }
                    break;

            }


            LPAREN682=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_rollup_cube_clause4021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN682_tree = 
            (Object)adaptor.create(LPAREN682)
            ;
            adaptor.addChild(root_0, LPAREN682_tree);
            }

            pushFollow(FOLLOW_grouping_expression_list_in_rollup_cube_clause4023);
            grouping_expression_list683=grouping_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list683.getTree());

            RPAREN684=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_rollup_cube_clause4025); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN684_tree = 
            (Object)adaptor.create(RPAREN684)
            ;
            adaptor.addChild(root_0, RPAREN684_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 102, rollup_cube_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rollup_cube_clause"


    public static class grouping_sets_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_sets_clause"
    // antlr3/PLSQL3.g:670:1: grouping_sets_clause : keyGROUPING keySETS LPAREN grouping_expression_list RPAREN ;
    public final PLSQL3Parser.grouping_sets_clause_return grouping_sets_clause() throws RecognitionException {
        PLSQL3Parser.grouping_sets_clause_return retval = new PLSQL3Parser.grouping_sets_clause_return();
        retval.start = input.LT(1);

        int grouping_sets_clause_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN687=null;
        Token RPAREN689=null;
        PLSQL3Parser.keyGROUPING_return keyGROUPING685 =null;

        PLSQL3Parser.keySETS_return keySETS686 =null;

        PLSQL3Parser.grouping_expression_list_return grouping_expression_list688 =null;


        Object LPAREN687_tree=null;
        Object RPAREN689_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

            // antlr3/PLSQL3.g:671:2: ( keyGROUPING keySETS LPAREN grouping_expression_list RPAREN )
            // antlr3/PLSQL3.g:671:4: keyGROUPING keySETS LPAREN grouping_expression_list RPAREN
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyGROUPING_in_grouping_sets_clause4035);
            keyGROUPING685=keyGROUPING();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyGROUPING685.getTree());

            pushFollow(FOLLOW_keySETS_in_grouping_sets_clause4037);
            keySETS686=keySETS();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySETS686.getTree());

            LPAREN687=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_grouping_sets_clause4039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN687_tree = 
            (Object)adaptor.create(LPAREN687)
            ;
            adaptor.addChild(root_0, LPAREN687_tree);
            }

            pushFollow(FOLLOW_grouping_expression_list_in_grouping_sets_clause4041);
            grouping_expression_list688=grouping_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list688.getTree());

            RPAREN689=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_grouping_sets_clause4043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN689_tree = 
            (Object)adaptor.create(RPAREN689)
            ;
            adaptor.addChild(root_0, RPAREN689_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 103, grouping_sets_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "grouping_sets_clause"


    public static class grouping_sets_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_sets_exprs"
    // antlr3/PLSQL3.g:673:1: grouping_sets_exprs : grouping_sets_expr ( COMMA grouping_sets_expr )* ;
    public final PLSQL3Parser.grouping_sets_exprs_return grouping_sets_exprs() throws RecognitionException {
        PLSQL3Parser.grouping_sets_exprs_return retval = new PLSQL3Parser.grouping_sets_exprs_return();
        retval.start = input.LT(1);

        int grouping_sets_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA691=null;
        PLSQL3Parser.grouping_sets_expr_return grouping_sets_expr690 =null;

        PLSQL3Parser.grouping_sets_expr_return grouping_sets_expr692 =null;


        Object COMMA691_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

            // antlr3/PLSQL3.g:674:2: ( grouping_sets_expr ( COMMA grouping_sets_expr )* )
            // antlr3/PLSQL3.g:674:4: grouping_sets_expr ( COMMA grouping_sets_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4053);
            grouping_sets_expr690=grouping_sets_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_expr690.getTree());

            // antlr3/PLSQL3.g:674:23: ( COMMA grouping_sets_expr )*
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( (LA175_0==COMMA) ) {
                    alt175=1;
                }


                switch (alt175) {
            	case 1 :
            	    // antlr3/PLSQL3.g:674:25: COMMA grouping_sets_expr
            	    {
            	    COMMA691=(Token)match(input,COMMA,FOLLOW_COMMA_in_grouping_sets_exprs4057); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA691_tree = 
            	    (Object)adaptor.create(COMMA691)
            	    ;
            	    adaptor.addChild(root_0, COMMA691_tree);
            	    }

            	    pushFollow(FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4059);
            	    grouping_sets_expr692=grouping_sets_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_expr692.getTree());

            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 104, grouping_sets_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "grouping_sets_exprs"


    public static class grouping_sets_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_sets_expr"
    // antlr3/PLSQL3.g:676:1: grouping_sets_expr : ( rollup_cube_clause | grouping_expression_list );
    public final PLSQL3Parser.grouping_sets_expr_return grouping_sets_expr() throws RecognitionException {
        PLSQL3Parser.grouping_sets_expr_return retval = new PLSQL3Parser.grouping_sets_expr_return();
        retval.start = input.LT(1);

        int grouping_sets_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.rollup_cube_clause_return rollup_cube_clause693 =null;

        PLSQL3Parser.grouping_expression_list_return grouping_expression_list694 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

            // antlr3/PLSQL3.g:677:2: ( rollup_cube_clause | grouping_expression_list )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==ID) ) {
                int LA176_1 = input.LA(2);

                if ( (((((input.LT(1).getText().equalsIgnoreCase("CUBE"))||(input.LT(1).getText().equalsIgnoreCase("ROLLUP")))&&((input.LT(1).getText().equalsIgnoreCase("CUBE"))||(input.LT(1).getText().equalsIgnoreCase("ROLLUP"))))&&synpred301_PLSQL3())) ) {
                    alt176=1;
                }
                else if ( (true) ) {
                    alt176=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 176, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA176_0==DOUBLEQUOTED_STRING||LA176_0==LPAREN||LA176_0==MINUS||LA176_0==NUMBER||LA176_0==PLUS||LA176_0==QUOTED_STRING||LA176_0==65||LA176_0==81||LA176_0==89||LA176_0==120||LA176_0==144||LA176_0==147||LA176_0==151||LA176_0==156) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // antlr3/PLSQL3.g:677:4: rollup_cube_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rollup_cube_clause_in_grouping_sets_expr4072);
                    rollup_cube_clause693=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause693.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:677:25: grouping_expression_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_grouping_expression_list_in_grouping_sets_expr4076);
                    grouping_expression_list694=grouping_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list694.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 105, grouping_sets_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "grouping_sets_expr"


    public static class model_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_clause"
    // antlr3/PLSQL3.g:679:1: model_clause : keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model ;
    public final PLSQL3Parser.model_clause_return model_clause() throws RecognitionException {
        PLSQL3Parser.model_clause_return retval = new PLSQL3Parser.model_clause_return();
        retval.start = input.LT(1);

        int model_clause_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.keyMODEL_return keyMODEL695 =null;

        PLSQL3Parser.cell_reference_options_return cell_reference_options696 =null;

        PLSQL3Parser.return_rows_clause_return return_rows_clause697 =null;

        PLSQL3Parser.reference_model_return reference_model698 =null;

        PLSQL3Parser.main_model_return main_model699 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

            // antlr3/PLSQL3.g:680:2: ( keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model )
            // antlr3/PLSQL3.g:680:4: keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyMODEL_in_model_clause4086);
            keyMODEL695=keyMODEL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMODEL695.getTree());

            // antlr3/PLSQL3.g:680:13: ( cell_reference_options )
            // antlr3/PLSQL3.g:680:15: cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_model_clause4090);
            cell_reference_options696=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options696.getTree());

            }


            // antlr3/PLSQL3.g:681:3: ( return_rows_clause )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==140) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // antlr3/PLSQL3.g:681:5: return_rows_clause
                    {
                    pushFollow(FOLLOW_return_rows_clause_in_model_clause4098);
                    return_rows_clause697=return_rows_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_rows_clause697.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:682:3: ( reference_model )+
            int cnt178=0;
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==ID) ) {
                    int LA178_1 = input.LA(2);

                    if ( (LA178_1==DOUBLEQUOTED_STRING||LA178_1==ID) ) {
                        int LA178_2 = input.LA(3);

                        if ( (LA178_2==126) ) {
                            alt178=1;
                        }


                    }


                }


                switch (alt178) {
            	case 1 :
            	    // antlr3/PLSQL3.g:682:5: reference_model
            	    {
            	    pushFollow(FOLLOW_reference_model_in_model_clause4107);
            	    reference_model698=reference_model();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_model698.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt178 >= 1 ) break loop178;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(178, input);
                        throw eee;
                }
                cnt178++;
            } while (true);


            pushFollow(FOLLOW_main_model_in_model_clause4112);
            main_model699=main_model();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, main_model699.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 106, model_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_clause"


    public static class cell_reference_options_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_reference_options"
    // antlr3/PLSQL3.g:684:1: cell_reference_options : ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )? ;
    public final PLSQL3Parser.cell_reference_options_return cell_reference_options() throws RecognitionException {
        PLSQL3Parser.cell_reference_options_return retval = new PLSQL3Parser.cell_reference_options_return();
        retval.start = input.LT(1);

        int cell_reference_options_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal703=null;
        PLSQL3Parser.keyIGNORE_return keyIGNORE700 =null;

        PLSQL3Parser.keyKEEP_return keyKEEP701 =null;

        PLSQL3Parser.keyNAV_return keyNAV702 =null;

        PLSQL3Parser.keyDIMENSION_return keyDIMENSION704 =null;

        PLSQL3Parser.keySINGLE_return keySINGLE705 =null;

        PLSQL3Parser.keyREFERENCE_return keyREFERENCE706 =null;


        Object string_literal703_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

            // antlr3/PLSQL3.g:685:2: ( ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )? )
            // antlr3/PLSQL3.g:685:4: ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:685:4: ( ( keyIGNORE | keyKEEP ) keyNAV )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==ID) ) {
                int LA180_1 = input.LA(2);

                if ( (LA180_1==ID) ) {
                    int LA180_3 = input.LA(3);

                    if ( (((((input.LT(1).getText().equalsIgnoreCase("KEEP"))||(input.LT(1).getText().equalsIgnoreCase("IGNORE")))&&((input.LT(1).getText().equalsIgnoreCase("KEEP"))||(input.LT(1).getText().equalsIgnoreCase("IGNORE"))))&&synpred305_PLSQL3())) ) {
                        alt180=1;
                    }
                }
            }
            switch (alt180) {
                case 1 :
                    // antlr3/PLSQL3.g:685:6: ( keyIGNORE | keyKEEP ) keyNAV
                    {
                    // antlr3/PLSQL3.g:685:6: ( keyIGNORE | keyKEEP )
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==ID) ) {
                        int LA179_1 = input.LA(2);

                        if ( (((synpred304_PLSQL3()&&synpred304_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("IGNORE")))) ) {
                            alt179=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("KEEP"))) ) {
                            alt179=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 179, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 179, 0, input);

                        throw nvae;

                    }
                    switch (alt179) {
                        case 1 :
                            // antlr3/PLSQL3.g:685:8: keyIGNORE
                            {
                            pushFollow(FOLLOW_keyIGNORE_in_cell_reference_options4126);
                            keyIGNORE700=keyIGNORE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyIGNORE700.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:685:20: keyKEEP
                            {
                            pushFollow(FOLLOW_keyKEEP_in_cell_reference_options4130);
                            keyKEEP701=keyKEEP();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyKEEP701.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_keyNAV_in_cell_reference_options4134);
                    keyNAV702=keyNAV();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNAV702.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:686:3: ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==158) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // antlr3/PLSQL3.g:686:5: 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE )
                    {
                    string_literal703=(Token)match(input,158,FOLLOW_158_in_cell_reference_options4143); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal703_tree = 
                    (Object)adaptor.create(string_literal703)
                    ;
                    adaptor.addChild(root_0, string_literal703_tree);
                    }

                    // antlr3/PLSQL3.g:686:14: ( keyDIMENSION | keySINGLE keyREFERENCE )
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==ID) ) {
                        int LA181_1 = input.LA(2);

                        if ( (LA181_1==EOF||LA181_1==LPAREN||LA181_1==140) ) {
                            alt181=1;
                        }
                        else if ( (LA181_1==ID) ) {
                            int LA181_3 = input.LA(3);

                            if ( (((synpred306_PLSQL3()&&synpred306_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("DIMENSION")))) ) {
                                alt181=1;
                            }
                            else if ( ((input.LT(1).getText().equalsIgnoreCase("SINGLE"))) ) {
                                alt181=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 181, 3, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 181, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 181, 0, input);

                        throw nvae;

                    }
                    switch (alt181) {
                        case 1 :
                            // antlr3/PLSQL3.g:686:16: keyDIMENSION
                            {
                            pushFollow(FOLLOW_keyDIMENSION_in_cell_reference_options4147);
                            keyDIMENSION704=keyDIMENSION();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDIMENSION704.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:686:31: keySINGLE keyREFERENCE
                            {
                            pushFollow(FOLLOW_keySINGLE_in_cell_reference_options4151);
                            keySINGLE705=keySINGLE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySINGLE705.getTree());

                            pushFollow(FOLLOW_keyREFERENCE_in_cell_reference_options4153);
                            keyREFERENCE706=keyREFERENCE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREFERENCE706.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 107, cell_reference_options_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_reference_options"


    public static class return_rows_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_rows_clause"
    // antlr3/PLSQL3.g:688:1: return_rows_clause : keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS' ;
    public final PLSQL3Parser.return_rows_clause_return return_rows_clause() throws RecognitionException {
        PLSQL3Parser.return_rows_clause_return retval = new PLSQL3Parser.return_rows_clause_return();
        retval.start = input.LT(1);

        int return_rows_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal709=null;
        Token string_literal710=null;
        PLSQL3Parser.keyRETURN_return keyRETURN707 =null;

        PLSQL3Parser.keyUPDATED_return keyUPDATED708 =null;


        Object string_literal709_tree=null;
        Object string_literal710_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

            // antlr3/PLSQL3.g:689:2: ( keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS' )
            // antlr3/PLSQL3.g:689:4: keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyRETURN_in_return_rows_clause4168);
            keyRETURN707=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN707.getTree());

            // antlr3/PLSQL3.g:689:14: ( keyUPDATED | 'ALL' )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==ID) ) {
                alt183=1;
            }
            else if ( (LA183_0==50) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;

            }
            switch (alt183) {
                case 1 :
                    // antlr3/PLSQL3.g:689:16: keyUPDATED
                    {
                    pushFollow(FOLLOW_keyUPDATED_in_return_rows_clause4172);
                    keyUPDATED708=keyUPDATED();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUPDATED708.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:689:29: 'ALL'
                    {
                    string_literal709=(Token)match(input,50,FOLLOW_50_in_return_rows_clause4176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal709_tree = 
                    (Object)adaptor.create(string_literal709)
                    ;
                    adaptor.addChild(root_0, string_literal709_tree);
                    }

                    }
                    break;

            }


            string_literal710=(Token)match(input,145,FOLLOW_145_in_return_rows_clause4180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal710_tree = 
            (Object)adaptor.create(string_literal710)
            ;
            adaptor.addChild(root_0, string_literal710_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 108, return_rows_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_rows_clause"


    public static class reference_model_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reference_model"
    // antlr3/PLSQL3.g:691:1: reference_model : keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options ) ;
    public final PLSQL3Parser.reference_model_return reference_model() throws RecognitionException {
        PLSQL3Parser.reference_model_return retval = new PLSQL3Parser.reference_model_return();
        retval.start = input.LT(1);

        int reference_model_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal713=null;
        Token LPAREN714=null;
        Token RPAREN716=null;
        PLSQL3Parser.keyREFERENCE_return keyREFERENCE711 =null;

        PLSQL3Parser.reference_model_name_return reference_model_name712 =null;

        PLSQL3Parser.subquery_return subquery715 =null;

        PLSQL3Parser.model_column_clauses_return model_column_clauses717 =null;

        PLSQL3Parser.cell_reference_options_return cell_reference_options718 =null;


        Object string_literal713_tree=null;
        Object LPAREN714_tree=null;
        Object RPAREN716_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

            // antlr3/PLSQL3.g:692:2: ( keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options ) )
            // antlr3/PLSQL3.g:692:4: keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyREFERENCE_in_reference_model4190);
            keyREFERENCE711=keyREFERENCE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREFERENCE711.getTree());

            pushFollow(FOLLOW_reference_model_name_in_reference_model4192);
            reference_model_name712=reference_model_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_model_name712.getTree());

            string_literal713=(Token)match(input,126,FOLLOW_126_in_reference_model4194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal713_tree = 
            (Object)adaptor.create(string_literal713)
            ;
            adaptor.addChild(root_0, string_literal713_tree);
            }

            LPAREN714=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_reference_model4196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN714_tree = 
            (Object)adaptor.create(LPAREN714)
            ;
            adaptor.addChild(root_0, LPAREN714_tree);
            }

            pushFollow(FOLLOW_subquery_in_reference_model4198);
            subquery715=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery715.getTree());

            RPAREN716=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_reference_model4200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN716_tree = 
            (Object)adaptor.create(RPAREN716)
            ;
            adaptor.addChild(root_0, RPAREN716_tree);
            }

            pushFollow(FOLLOW_model_column_clauses_in_reference_model4204);
            model_column_clauses717=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_clauses717.getTree());

            // antlr3/PLSQL3.g:693:24: ( cell_reference_options )
            // antlr3/PLSQL3.g:693:26: cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_reference_model4208);
            cell_reference_options718=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options718.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 109, reference_model_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "reference_model"


    public static class reference_model_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reference_model_name"
    // antlr3/PLSQL3.g:695:1: reference_model_name : identifier ;
    public final PLSQL3Parser.reference_model_name_return reference_model_name() throws RecognitionException {
        PLSQL3Parser.reference_model_name_return retval = new PLSQL3Parser.reference_model_name_return();
        retval.start = input.LT(1);

        int reference_model_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier719 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

            // antlr3/PLSQL3.g:696:2: ( identifier )
            // antlr3/PLSQL3.g:696:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_reference_model_name4220);
            identifier719=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier719.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 110, reference_model_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "reference_model_name"


    public static class main_model_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "main_model"
    // antlr3/PLSQL3.g:698:1: main_model : ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause ;
    public final PLSQL3Parser.main_model_return main_model() throws RecognitionException {
        PLSQL3Parser.main_model_return retval = new PLSQL3Parser.main_model_return();
        retval.start = input.LT(1);

        int main_model_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.keyMAIN_return keyMAIN720 =null;

        PLSQL3Parser.main_model_name_return main_model_name721 =null;

        PLSQL3Parser.model_column_clauses_return model_column_clauses722 =null;

        PLSQL3Parser.cell_reference_options_return cell_reference_options723 =null;

        PLSQL3Parser.model_rules_clause_return model_rules_clause724 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

            // antlr3/PLSQL3.g:699:2: ( ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause )
            // antlr3/PLSQL3.g:699:4: ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:699:4: ( keyMAIN main_model_name )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ID) ) {
                int LA184_1 = input.LA(2);

                if ( (LA184_1==DOUBLEQUOTED_STRING||LA184_1==ID) ) {
                    alt184=1;
                }
            }
            switch (alt184) {
                case 1 :
                    // antlr3/PLSQL3.g:699:6: keyMAIN main_model_name
                    {
                    pushFollow(FOLLOW_keyMAIN_in_main_model4232);
                    keyMAIN720=keyMAIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMAIN720.getTree());

                    pushFollow(FOLLOW_main_model_name_in_main_model4234);
                    main_model_name721=main_model_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, main_model_name721.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_model_column_clauses_in_main_model4239);
            model_column_clauses722=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_clauses722.getTree());

            // antlr3/PLSQL3.g:700:3: ( cell_reference_options )
            // antlr3/PLSQL3.g:700:5: cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_main_model4245);
            cell_reference_options723=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options723.getTree());

            }


            pushFollow(FOLLOW_model_rules_clause_in_main_model4249);
            model_rules_clause724=model_rules_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_clause724.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 111, main_model_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "main_model"


    public static class main_model_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "main_model_name"
    // antlr3/PLSQL3.g:702:1: main_model_name : identifier ;
    public final PLSQL3Parser.main_model_name_return main_model_name() throws RecognitionException {
        PLSQL3Parser.main_model_name_return retval = new PLSQL3Parser.main_model_name_return();
        retval.start = input.LT(1);

        int main_model_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier725 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

            // antlr3/PLSQL3.g:703:2: ( identifier )
            // antlr3/PLSQL3.g:703:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_main_model_name4259);
            identifier725=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier725.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 112, main_model_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "main_model_name"


    public static class model_column_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_column_clauses"
    // antlr3/PLSQL3.g:705:1: model_column_clauses : ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN ;
    public final PLSQL3Parser.model_column_clauses_return model_column_clauses() throws RecognitionException {
        PLSQL3Parser.model_column_clauses_return retval = new PLSQL3Parser.model_column_clauses_return();
        retval.start = input.LT(1);

        int model_column_clauses_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal729=null;
        Token LPAREN730=null;
        Token RPAREN732=null;
        Token LPAREN734=null;
        Token RPAREN736=null;
        PLSQL3Parser.query_partition_clause_return query_partition_clause726 =null;

        PLSQL3Parser.column_spec_return column_spec727 =null;

        PLSQL3Parser.keyDIMENSION_return keyDIMENSION728 =null;

        PLSQL3Parser.model_columns_return model_columns731 =null;

        PLSQL3Parser.keyMEASURES_return keyMEASURES733 =null;

        PLSQL3Parser.model_columns_return model_columns735 =null;


        Object string_literal729_tree=null;
        Object LPAREN730_tree=null;
        Object RPAREN732_tree=null;
        Object LPAREN734_tree=null;
        Object RPAREN736_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

            // antlr3/PLSQL3.g:706:2: ( ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN )
            // antlr3/PLSQL3.g:706:4: ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:706:4: ( query_partition_clause ( column_spec )? )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==ID) ) {
                int LA186_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("PARTITION"))&&(input.LT(1).getText().equalsIgnoreCase("PARTITION")))&&synpred311_PLSQL3())) ) {
                    alt186=1;
                }
            }
            switch (alt186) {
                case 1 :
                    // antlr3/PLSQL3.g:706:6: query_partition_clause ( column_spec )?
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_model_column_clauses4271);
                    query_partition_clause726=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause726.getTree());

                    // antlr3/PLSQL3.g:706:29: ( column_spec )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==ID) ) {
                        int LA185_1 = input.LA(2);

                        if ( (LA185_1==DOT||LA185_1==ID) ) {
                            alt185=1;
                        }
                    }
                    else if ( (LA185_0==DOUBLEQUOTED_STRING||LA185_0==144) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // antlr3/PLSQL3.g:706:31: column_spec
                            {
                            pushFollow(FOLLOW_column_spec_in_model_column_clauses4275);
                            column_spec727=column_spec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec727.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_keyDIMENSION_in_model_column_clauses4285);
            keyDIMENSION728=keyDIMENSION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDIMENSION728.getTree());

            string_literal729=(Token)match(input,64,FOLLOW_64_in_model_column_clauses4287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal729_tree = 
            (Object)adaptor.create(string_literal729)
            ;
            adaptor.addChild(root_0, string_literal729_tree);
            }

            LPAREN730=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses4289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN730_tree = 
            (Object)adaptor.create(LPAREN730)
            ;
            adaptor.addChild(root_0, LPAREN730_tree);
            }

            pushFollow(FOLLOW_model_columns_in_model_column_clauses4291);
            model_columns731=model_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_columns731.getTree());

            RPAREN732=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses4293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN732_tree = 
            (Object)adaptor.create(RPAREN732)
            ;
            adaptor.addChild(root_0, RPAREN732_tree);
            }

            pushFollow(FOLLOW_keyMEASURES_in_model_column_clauses4297);
            keyMEASURES733=keyMEASURES();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMEASURES733.getTree());

            LPAREN734=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses4299); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN734_tree = 
            (Object)adaptor.create(LPAREN734)
            ;
            adaptor.addChild(root_0, LPAREN734_tree);
            }

            pushFollow(FOLLOW_model_columns_in_model_column_clauses4301);
            model_columns735=model_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_columns735.getTree());

            RPAREN736=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses4303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN736_tree = 
            (Object)adaptor.create(RPAREN736)
            ;
            adaptor.addChild(root_0, RPAREN736_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 113, model_column_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_column_clauses"


    public static class model_columns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_columns"
    // antlr3/PLSQL3.g:710:1: model_columns : model_column ( COMMA model_column )* ;
    public final PLSQL3Parser.model_columns_return model_columns() throws RecognitionException {
        PLSQL3Parser.model_columns_return retval = new PLSQL3Parser.model_columns_return();
        retval.start = input.LT(1);

        int model_columns_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA738=null;
        PLSQL3Parser.model_column_return model_column737 =null;

        PLSQL3Parser.model_column_return model_column739 =null;


        Object COMMA738_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

            // antlr3/PLSQL3.g:711:2: ( model_column ( COMMA model_column )* )
            // antlr3/PLSQL3.g:711:4: model_column ( COMMA model_column )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_model_column_in_model_columns4313);
            model_column737=model_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column737.getTree());

            // antlr3/PLSQL3.g:711:17: ( COMMA model_column )*
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==COMMA) ) {
                    alt187=1;
                }


                switch (alt187) {
            	case 1 :
            	    // antlr3/PLSQL3.g:711:19: COMMA model_column
            	    {
            	    COMMA738=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_columns4317); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA738_tree = 
            	    (Object)adaptor.create(COMMA738)
            	    ;
            	    adaptor.addChild(root_0, COMMA738_tree);
            	    }

            	    pushFollow(FOLLOW_model_column_in_model_columns4319);
            	    model_column739=model_column();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column739.getTree());

            	    }
            	    break;

            	default :
            	    break loop187;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 114, model_columns_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_columns"


    public static class model_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_column"
    // antlr3/PLSQL3.g:713:1: model_column : sql_expression ( ( 'AS' )? column_spec )? ;
    public final PLSQL3Parser.model_column_return model_column() throws RecognitionException {
        PLSQL3Parser.model_column_return retval = new PLSQL3Parser.model_column_return();
        retval.start = input.LT(1);

        int model_column_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal741=null;
        PLSQL3Parser.sql_expression_return sql_expression740 =null;

        PLSQL3Parser.column_spec_return column_spec742 =null;


        Object string_literal741_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

            // antlr3/PLSQL3.g:714:2: ( sql_expression ( ( 'AS' )? column_spec )? )
            // antlr3/PLSQL3.g:714:4: sql_expression ( ( 'AS' )? column_spec )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_model_column4332);
            sql_expression740=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression740.getTree());

            // antlr3/PLSQL3.g:714:19: ( ( 'AS' )? column_spec )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==DOUBLEQUOTED_STRING||LA189_0==ID||LA189_0==53||LA189_0==144) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // antlr3/PLSQL3.g:714:21: ( 'AS' )? column_spec
                    {
                    // antlr3/PLSQL3.g:714:21: ( 'AS' )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==53) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // antlr3/PLSQL3.g:714:23: 'AS'
                            {
                            string_literal741=(Token)match(input,53,FOLLOW_53_in_model_column4338); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal741_tree = 
                            (Object)adaptor.create(string_literal741)
                            ;
                            adaptor.addChild(root_0, string_literal741_tree);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_column_spec_in_model_column4343);
                    column_spec742=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec742.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 115, model_column_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_column"


    public static class model_rules_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_rules_clause"
    // antlr3/PLSQL3.g:716:1: model_rules_clause : ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN ;
    public final PLSQL3Parser.model_rules_clause_return model_rules_clause() throws RecognitionException {
        PLSQL3Parser.model_rules_clause_return retval = new PLSQL3Parser.model_rules_clause_return();
        retval.start = input.LT(1);

        int model_rules_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal744=null;
        Token string_literal746=null;
        Token string_literal749=null;
        Token LPAREN751=null;
        Token NUMBER752=null;
        Token RPAREN753=null;
        Token LPAREN755=null;
        Token RPAREN757=null;
        Token LPAREN758=null;
        Token RPAREN760=null;
        PLSQL3Parser.keyRULES_return keyRULES743 =null;

        PLSQL3Parser.keyUPSERT_return keyUPSERT745 =null;

        PLSQL3Parser.keyAUTOMATIC_return keyAUTOMATIC747 =null;

        PLSQL3Parser.keySEQUENTIAL_return keySEQUENTIAL748 =null;

        PLSQL3Parser.keyITERATE_return keyITERATE750 =null;

        PLSQL3Parser.keyUNTIL_return keyUNTIL754 =null;

        PLSQL3Parser.sql_condition_return sql_condition756 =null;

        PLSQL3Parser.model_rules_exprs_return model_rules_exprs759 =null;


        Object string_literal744_tree=null;
        Object string_literal746_tree=null;
        Object string_literal749_tree=null;
        Object LPAREN751_tree=null;
        Object NUMBER752_tree=null;
        Object RPAREN753_tree=null;
        Object LPAREN755_tree=null;
        Object RPAREN757_tree=null;
        Object LPAREN758_tree=null;
        Object RPAREN760_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

            // antlr3/PLSQL3.g:717:2: ( ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN )
            // antlr3/PLSQL3.g:717:4: ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:717:4: ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==ID) ) {
                int LA194_1 = input.LA(2);

                if ( (LA194_1==ID||LA194_1==159) ) {
                    alt194=1;
                }
                else if ( (LA194_1==LPAREN) ) {
                    int LA194_4 = input.LA(3);

                    if ( (LA194_4==DOUBLEQUOTED_STRING||LA194_4==ID||LA194_4==144||LA194_4==159) ) {
                        alt194=1;
                    }
                }
            }
            switch (alt194) {
                case 1 :
                    // antlr3/PLSQL3.g:717:6: keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )?
                    {
                    pushFollow(FOLLOW_keyRULES_in_model_rules_clause4358);
                    keyRULES743=keyRULES();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRULES743.getTree());

                    // antlr3/PLSQL3.g:717:15: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )?
                    int alt191=3;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==159) ) {
                        alt191=1;
                    }
                    else if ( (LA191_0==ID) ) {
                        int LA191_2 = input.LA(2);

                        if ( (LA191_2==ID||LA191_2==50) ) {
                            alt191=2;
                        }
                        else if ( (LA191_2==LPAREN) ) {
                            int LA191_5 = input.LA(3);

                            if ( (LA191_5==DOUBLEQUOTED_STRING||LA191_5==ID||LA191_5==144||LA191_5==159) ) {
                                alt191=2;
                            }
                        }
                    }
                    switch (alt191) {
                        case 1 :
                            // antlr3/PLSQL3.g:717:17: 'UPDATE'
                            {
                            string_literal744=(Token)match(input,159,FOLLOW_159_in_model_rules_clause4362); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal744_tree = 
                            (Object)adaptor.create(string_literal744)
                            ;
                            adaptor.addChild(root_0, string_literal744_tree);
                            }

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:717:28: keyUPSERT ( 'ALL' )?
                            {
                            pushFollow(FOLLOW_keyUPSERT_in_model_rules_clause4366);
                            keyUPSERT745=keyUPSERT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUPSERT745.getTree());

                            // antlr3/PLSQL3.g:717:38: ( 'ALL' )?
                            int alt190=2;
                            int LA190_0 = input.LA(1);

                            if ( (LA190_0==50) ) {
                                alt190=1;
                            }
                            switch (alt190) {
                                case 1 :
                                    // antlr3/PLSQL3.g:717:40: 'ALL'
                                    {
                                    string_literal746=(Token)match(input,50,FOLLOW_50_in_model_rules_clause4370); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal746_tree = 
                                    (Object)adaptor.create(string_literal746)
                                    ;
                                    adaptor.addChild(root_0, string_literal746_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:717:52: ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==ID) ) {
                        int LA193_1 = input.LA(2);

                        if ( (LA193_1==128) ) {
                            alt193=1;
                        }
                    }
                    switch (alt193) {
                        case 1 :
                            // antlr3/PLSQL3.g:717:54: ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER'
                            {
                            // antlr3/PLSQL3.g:717:54: ( keyAUTOMATIC | keySEQUENTIAL )
                            int alt192=2;
                            int LA192_0 = input.LA(1);

                            if ( (LA192_0==ID) ) {
                                int LA192_1 = input.LA(2);

                                if ( (((synpred318_PLSQL3()&&synpred318_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("AUTOMATIC")))) ) {
                                    alt192=1;
                                }
                                else if ( ((input.LT(1).getText().equalsIgnoreCase("SEQUENTIAL"))) ) {
                                    alt192=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 192, 1, input);

                                    throw nvae;

                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 192, 0, input);

                                throw nvae;

                            }
                            switch (alt192) {
                                case 1 :
                                    // antlr3/PLSQL3.g:717:56: keyAUTOMATIC
                                    {
                                    pushFollow(FOLLOW_keyAUTOMATIC_in_model_rules_clause4382);
                                    keyAUTOMATIC747=keyAUTOMATIC();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyAUTOMATIC747.getTree());

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:717:71: keySEQUENTIAL
                                    {
                                    pushFollow(FOLLOW_keySEQUENTIAL_in_model_rules_clause4386);
                                    keySEQUENTIAL748=keySEQUENTIAL();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySEQUENTIAL748.getTree());

                                    }
                                    break;

                            }


                            string_literal749=(Token)match(input,128,FOLLOW_128_in_model_rules_clause4390); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal749_tree = 
                            (Object)adaptor.create(string_literal749)
                            ;
                            adaptor.addChild(root_0, string_literal749_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            // antlr3/PLSQL3.g:718:3: ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==ID) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // antlr3/PLSQL3.g:718:5: keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )?
                    {
                    pushFollow(FOLLOW_keyITERATE_in_model_rules_clause4402);
                    keyITERATE750=keyITERATE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyITERATE750.getTree());

                    LPAREN751=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause4404); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN751_tree = 
                    (Object)adaptor.create(LPAREN751)
                    ;
                    adaptor.addChild(root_0, LPAREN751_tree);
                    }

                    NUMBER752=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_model_rules_clause4406); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER752_tree = 
                    (Object)adaptor.create(NUMBER752)
                    ;
                    adaptor.addChild(root_0, NUMBER752_tree);
                    }

                    RPAREN753=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause4408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN753_tree = 
                    (Object)adaptor.create(RPAREN753)
                    ;
                    adaptor.addChild(root_0, RPAREN753_tree);
                    }

                    // antlr3/PLSQL3.g:718:37: ( keyUNTIL LPAREN sql_condition RPAREN )?
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==ID) ) {
                        alt195=1;
                    }
                    switch (alt195) {
                        case 1 :
                            // antlr3/PLSQL3.g:718:39: keyUNTIL LPAREN sql_condition RPAREN
                            {
                            pushFollow(FOLLOW_keyUNTIL_in_model_rules_clause4412);
                            keyUNTIL754=keyUNTIL();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUNTIL754.getTree());

                            LPAREN755=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause4414); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN755_tree = 
                            (Object)adaptor.create(LPAREN755)
                            ;
                            adaptor.addChild(root_0, LPAREN755_tree);
                            }

                            pushFollow(FOLLOW_sql_condition_in_model_rules_clause4416);
                            sql_condition756=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition756.getTree());

                            RPAREN757=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause4418); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN757_tree = 
                            (Object)adaptor.create(RPAREN757)
                            ;
                            adaptor.addChild(root_0, RPAREN757_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            LPAREN758=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause4428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN758_tree = 
            (Object)adaptor.create(LPAREN758)
            ;
            adaptor.addChild(root_0, LPAREN758_tree);
            }

            pushFollow(FOLLOW_model_rules_exprs_in_model_rules_clause4430);
            model_rules_exprs759=model_rules_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_exprs759.getTree());

            RPAREN760=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause4432); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN760_tree = 
            (Object)adaptor.create(RPAREN760)
            ;
            adaptor.addChild(root_0, RPAREN760_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 116, model_rules_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_rules_clause"


    public static class model_rules_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_rules_exprs"
    // antlr3/PLSQL3.g:721:1: model_rules_exprs : model_rules_expr ( COMMA model_rules_expr )* ;
    public final PLSQL3Parser.model_rules_exprs_return model_rules_exprs() throws RecognitionException {
        PLSQL3Parser.model_rules_exprs_return retval = new PLSQL3Parser.model_rules_exprs_return();
        retval.start = input.LT(1);

        int model_rules_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA762=null;
        PLSQL3Parser.model_rules_expr_return model_rules_expr761 =null;

        PLSQL3Parser.model_rules_expr_return model_rules_expr763 =null;


        Object COMMA762_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

            // antlr3/PLSQL3.g:722:2: ( model_rules_expr ( COMMA model_rules_expr )* )
            // antlr3/PLSQL3.g:722:4: model_rules_expr ( COMMA model_rules_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs4442);
            model_rules_expr761=model_rules_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_expr761.getTree());

            // antlr3/PLSQL3.g:722:21: ( COMMA model_rules_expr )*
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==COMMA) ) {
                    alt197=1;
                }


                switch (alt197) {
            	case 1 :
            	    // antlr3/PLSQL3.g:722:23: COMMA model_rules_expr
            	    {
            	    COMMA762=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_rules_exprs4446); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA762_tree = 
            	    (Object)adaptor.create(COMMA762)
            	    ;
            	    adaptor.addChild(root_0, COMMA762_tree);
            	    }

            	    pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs4448);
            	    model_rules_expr763=model_rules_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_expr763.getTree());

            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 117, model_rules_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_rules_exprs"


    public static class model_rules_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_rules_expr"
    // antlr3/PLSQL3.g:724:1: model_rules_expr : ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression ;
    public final PLSQL3Parser.model_rules_expr_return model_rules_expr() throws RecognitionException {
        PLSQL3Parser.model_rules_expr_return retval = new PLSQL3Parser.model_rules_expr_return();
        retval.start = input.LT(1);

        int model_rules_expr_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal764=null;
        Token string_literal766=null;
        Token EQ769=null;
        PLSQL3Parser.keyUPSERT_return keyUPSERT765 =null;

        PLSQL3Parser.cell_assignment_return cell_assignment767 =null;

        PLSQL3Parser.order_by_clause_return order_by_clause768 =null;

        PLSQL3Parser.sql_expression_return sql_expression770 =null;


        Object string_literal764_tree=null;
        Object string_literal766_tree=null;
        Object EQ769_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

            // antlr3/PLSQL3.g:725:2: ( ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression )
            // antlr3/PLSQL3.g:725:4: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:725:4: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )?
            int alt199=3;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==159) ) {
                alt199=1;
            }
            else if ( (LA199_0==ID) ) {
                int LA199_2 = input.LA(2);

                if ( (LA199_2==DOUBLEQUOTED_STRING||LA199_2==ID||LA199_2==50||LA199_2==144) ) {
                    alt199=2;
                }
            }
            switch (alt199) {
                case 1 :
                    // antlr3/PLSQL3.g:725:6: 'UPDATE'
                    {
                    string_literal764=(Token)match(input,159,FOLLOW_159_in_model_rules_expr4463); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal764_tree = 
                    (Object)adaptor.create(string_literal764)
                    ;
                    adaptor.addChild(root_0, string_literal764_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:725:17: keyUPSERT ( 'ALL' )?
                    {
                    pushFollow(FOLLOW_keyUPSERT_in_model_rules_expr4467);
                    keyUPSERT765=keyUPSERT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUPSERT765.getTree());

                    // antlr3/PLSQL3.g:725:27: ( 'ALL' )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==50) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // antlr3/PLSQL3.g:725:29: 'ALL'
                            {
                            string_literal766=(Token)match(input,50,FOLLOW_50_in_model_rules_expr4471); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal766_tree = 
                            (Object)adaptor.create(string_literal766)
                            ;
                            adaptor.addChild(root_0, string_literal766_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_cell_assignment_in_model_rules_expr4479);
            cell_assignment767=cell_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment767.getTree());

            // antlr3/PLSQL3.g:725:57: ( order_by_clause )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==128) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // antlr3/PLSQL3.g:725:59: order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_model_rules_expr4483);
                    order_by_clause768=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause768.getTree());

                    }
                    break;

            }


            EQ769=(Token)match(input,EQ,FOLLOW_EQ_in_model_rules_expr4488); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ769_tree = 
            (Object)adaptor.create(EQ769)
            ;
            adaptor.addChild(root_0, EQ769_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_model_rules_expr4490);
            sql_expression770=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression770.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 118, model_rules_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_rules_expr"


    public static class cell_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_assignment"
    // antlr3/PLSQL3.g:727:1: cell_assignment : measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK ;
    public final PLSQL3Parser.cell_assignment_return cell_assignment() throws RecognitionException {
        PLSQL3Parser.cell_assignment_return retval = new PLSQL3Parser.cell_assignment_return();
        retval.start = input.LT(1);

        int cell_assignment_StartIndex = input.index();

        Object root_0 = null;

        Token LBRACK772=null;
        Token RBRACK775=null;
        PLSQL3Parser.measure_column_return measure_column771 =null;

        PLSQL3Parser.multi_column_for_loop_return multi_column_for_loop773 =null;

        PLSQL3Parser.cell_assignment_exprs_return cell_assignment_exprs774 =null;


        Object LBRACK772_tree=null;
        Object RBRACK775_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

            // antlr3/PLSQL3.g:728:2: ( measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK )
            // antlr3/PLSQL3.g:728:4: measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_measure_column_in_cell_assignment4500);
            measure_column771=measure_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measure_column771.getTree());

            LBRACK772=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_cell_assignment4502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACK772_tree = 
            (Object)adaptor.create(LBRACK772)
            ;
            adaptor.addChild(root_0, LBRACK772_tree);
            }

            // antlr3/PLSQL3.g:728:26: ( multi_column_for_loop | cell_assignment_exprs )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==92) ) {
                int LA201_1 = input.LA(2);

                if ( (LA201_1==LPAREN) ) {
                    alt201=1;
                }
                else if ( (LA201_1==DOUBLEQUOTED_STRING||LA201_1==ID||LA201_1==144) ) {
                    alt201=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 201, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA201_0==DOUBLEQUOTED_STRING||LA201_0==ID||LA201_0==LPAREN||LA201_0==MINUS||LA201_0==NUMBER||LA201_0==PLUS||LA201_0==QUOTED_STRING||LA201_0==52||LA201_0==65||LA201_0==81||(LA201_0 >= 88 && LA201_0 <= 89)||LA201_0==118||LA201_0==120||LA201_0==134||LA201_0==144||LA201_0==147||LA201_0==151||LA201_0==156) ) {
                alt201=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;

            }
            switch (alt201) {
                case 1 :
                    // antlr3/PLSQL3.g:728:28: multi_column_for_loop
                    {
                    pushFollow(FOLLOW_multi_column_for_loop_in_cell_assignment4506);
                    multi_column_for_loop773=multi_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_column_for_loop773.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:728:52: cell_assignment_exprs
                    {
                    pushFollow(FOLLOW_cell_assignment_exprs_in_cell_assignment4510);
                    cell_assignment_exprs774=cell_assignment_exprs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment_exprs774.getTree());

                    }
                    break;

            }


            RBRACK775=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_cell_assignment4514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACK775_tree = 
            (Object)adaptor.create(RBRACK775)
            ;
            adaptor.addChild(root_0, RBRACK775_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 119, cell_assignment_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_assignment"


    public static class cell_assignment_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_assignment_exprs"
    // antlr3/PLSQL3.g:730:1: cell_assignment_exprs : cell_assignment_expr ( COMMA cell_assignment_expr )* ;
    public final PLSQL3Parser.cell_assignment_exprs_return cell_assignment_exprs() throws RecognitionException {
        PLSQL3Parser.cell_assignment_exprs_return retval = new PLSQL3Parser.cell_assignment_exprs_return();
        retval.start = input.LT(1);

        int cell_assignment_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA777=null;
        PLSQL3Parser.cell_assignment_expr_return cell_assignment_expr776 =null;

        PLSQL3Parser.cell_assignment_expr_return cell_assignment_expr778 =null;


        Object COMMA777_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

            // antlr3/PLSQL3.g:731:2: ( cell_assignment_expr ( COMMA cell_assignment_expr )* )
            // antlr3/PLSQL3.g:731:4: cell_assignment_expr ( COMMA cell_assignment_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4524);
            cell_assignment_expr776=cell_assignment_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment_expr776.getTree());

            // antlr3/PLSQL3.g:731:25: ( COMMA cell_assignment_expr )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==COMMA) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // antlr3/PLSQL3.g:731:27: COMMA cell_assignment_expr
            	    {
            	    COMMA777=(Token)match(input,COMMA,FOLLOW_COMMA_in_cell_assignment_exprs4528); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA777_tree = 
            	    (Object)adaptor.create(COMMA777)
            	    ;
            	    adaptor.addChild(root_0, COMMA777_tree);
            	    }

            	    pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4530);
            	    cell_assignment_expr778=cell_assignment_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment_expr778.getTree());

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 120, cell_assignment_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_assignment_exprs"


    public static class cell_assignment_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_assignment_expr"
    // antlr3/PLSQL3.g:733:1: cell_assignment_expr : ( sql_condition | sql_expression | single_column_for_loop );
    public final PLSQL3Parser.cell_assignment_expr_return cell_assignment_expr() throws RecognitionException {
        PLSQL3Parser.cell_assignment_expr_return retval = new PLSQL3Parser.cell_assignment_expr_return();
        retval.start = input.LT(1);

        int cell_assignment_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_condition_return sql_condition779 =null;

        PLSQL3Parser.sql_expression_return sql_expression780 =null;

        PLSQL3Parser.single_column_for_loop_return single_column_for_loop781 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

            // antlr3/PLSQL3.g:734:2: ( sql_condition | sql_expression | single_column_for_loop )
            int alt203=3;
            switch ( input.LA(1) ) {
            case 52:
            case 88:
            case 118:
            case 134:
                {
                alt203=1;
                }
                break;
            case MINUS:
            case PLUS:
                {
                int LA203_3 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 3, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA203_4 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 4, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA203_5 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 5, input);

                    throw nvae;

                }
                }
                break;
            case 144:
                {
                int LA203_6 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 6, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA203_7 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 7, input);

                    throw nvae;

                }
                }
                break;
            case 81:
                {
                int LA203_8 = input.LA(2);

                if ( (((( is_sql )&&( is_sql ))&&synpred330_PLSQL3())) ) {
                    alt203=1;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred331_PLSQL3())) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 8, input);

                    throw nvae;

                }
                }
                break;
            case 65:
                {
                int LA203_9 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 9, input);

                    throw nvae;

                }
                }
                break;
            case 89:
            case 156:
                {
                int LA203_10 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 10, input);

                    throw nvae;

                }
                }
                break;
            case 151:
                {
                int LA203_11 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 11, input);

                    throw nvae;

                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA203_12 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 12, input);

                    throw nvae;

                }
                }
                break;
            case NUMBER:
                {
                int LA203_13 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 13, input);

                    throw nvae;

                }
                }
                break;
            case 120:
                {
                int LA203_14 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 14, input);

                    throw nvae;

                }
                }
                break;
            case 147:
                {
                int LA203_15 = input.LA(2);

                if ( (synpred330_PLSQL3()) ) {
                    alt203=1;
                }
                else if ( (synpred331_PLSQL3()) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 15, input);

                    throw nvae;

                }
                }
                break;
            case 92:
                {
                alt203=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;

            }

            switch (alt203) {
                case 1 :
                    // antlr3/PLSQL3.g:734:4: sql_condition
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_condition_in_cell_assignment_expr4543);
                    sql_condition779=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition779.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:734:20: sql_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expression_in_cell_assignment_expr4547);
                    sql_expression780=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression780.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:734:37: single_column_for_loop
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_column_for_loop_in_cell_assignment_expr4551);
                    single_column_for_loop781=single_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_column_for_loop781.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 121, cell_assignment_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_assignment_expr"


    public static class measure_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "measure_column"
    // antlr3/PLSQL3.g:736:1: measure_column : column_name ;
    public final PLSQL3Parser.measure_column_return measure_column() throws RecognitionException {
        PLSQL3Parser.measure_column_return retval = new PLSQL3Parser.measure_column_return();
        retval.start = input.LT(1);

        int measure_column_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.column_name_return column_name782 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

            // antlr3/PLSQL3.g:737:2: ( column_name )
            // antlr3/PLSQL3.g:737:4: column_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_column_name_in_measure_column4561);
            column_name782=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name782.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 122, measure_column_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "measure_column"


    public static class single_column_for_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_column_for_loop"
    // antlr3/PLSQL3.g:739:1: single_column_for_loop : 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal ) ;
    public final PLSQL3Parser.single_column_for_loop_return single_column_for_loop() throws RecognitionException {
        PLSQL3Parser.single_column_for_loop_return retval = new PLSQL3Parser.single_column_for_loop_return();
        retval.start = input.LT(1);

        int single_column_for_loop_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal783=null;
        Token string_literal785=null;
        Token LPAREN786=null;
        Token RPAREN789=null;
        Token string_literal790=null;
        Token string_literal792=null;
        Token string_literal794=null;
        PLSQL3Parser.column_name_return column_name784 =null;

        PLSQL3Parser.literals_return literals787 =null;

        PLSQL3Parser.subquery_return subquery788 =null;

        PLSQL3Parser.pattern_return pattern791 =null;

        PLSQL3Parser.literal_return literal793 =null;

        PLSQL3Parser.literal_return literal795 =null;

        PLSQL3Parser.keyINCREMENT_return keyINCREMENT796 =null;

        PLSQL3Parser.keyDECREMENT_return keyDECREMENT797 =null;

        PLSQL3Parser.literal_return literal798 =null;


        Object string_literal783_tree=null;
        Object string_literal785_tree=null;
        Object LPAREN786_tree=null;
        Object RPAREN789_tree=null;
        Object string_literal790_tree=null;
        Object string_literal792_tree=null;
        Object string_literal794_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

            // antlr3/PLSQL3.g:740:2: ( 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal ) )
            // antlr3/PLSQL3.g:740:4: 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal )
            {
            root_0 = (Object)adaptor.nil();


            string_literal783=(Token)match(input,92,FOLLOW_92_in_single_column_for_loop4571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal783_tree = 
            (Object)adaptor.create(string_literal783)
            ;
            adaptor.addChild(root_0, string_literal783_tree);
            }

            pushFollow(FOLLOW_column_name_in_single_column_for_loop4573);
            column_name784=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name784.getTree());

            // antlr3/PLSQL3.g:741:3: ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal )
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==99) ) {
                alt207=1;
            }
            else if ( (LA207_0==93||LA207_0==107) ) {
                alt207=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;

            }
            switch (alt207) {
                case 1 :
                    // antlr3/PLSQL3.g:741:5: 'IN' LPAREN ( literals | subquery ) RPAREN
                    {
                    string_literal785=(Token)match(input,99,FOLLOW_99_in_single_column_for_loop4579); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal785_tree = 
                    (Object)adaptor.create(string_literal785)
                    ;
                    adaptor.addChild(root_0, string_literal785_tree);
                    }

                    LPAREN786=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_single_column_for_loop4581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN786_tree = 
                    (Object)adaptor.create(LPAREN786)
                    ;
                    adaptor.addChild(root_0, LPAREN786_tree);
                    }

                    // antlr3/PLSQL3.g:741:17: ( literals | subquery )
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==MINUS||LA204_0==NUMBER||LA204_0==PLUS||LA204_0==QUOTED_STRING) ) {
                        alt204=1;
                    }
                    else if ( (LA204_0==LPAREN) ) {
                        alt204=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 204, 0, input);

                        throw nvae;

                    }
                    switch (alt204) {
                        case 1 :
                            // antlr3/PLSQL3.g:741:19: literals
                            {
                            pushFollow(FOLLOW_literals_in_single_column_for_loop4585);
                            literals787=literals();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, literals787.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:741:30: subquery
                            {
                            pushFollow(FOLLOW_subquery_in_single_column_for_loop4589);
                            subquery788=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery788.getTree());

                            }
                            break;

                    }


                    RPAREN789=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_single_column_for_loop4593); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN789_tree = 
                    (Object)adaptor.create(RPAREN789)
                    ;
                    adaptor.addChild(root_0, RPAREN789_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:742:5: ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal
                    {
                    // antlr3/PLSQL3.g:742:5: ( 'LIKE' pattern )?
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==107) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            // antlr3/PLSQL3.g:742:7: 'LIKE' pattern
                            {
                            string_literal790=(Token)match(input,107,FOLLOW_107_in_single_column_for_loop4601); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal790_tree = 
                            (Object)adaptor.create(string_literal790)
                            ;
                            adaptor.addChild(root_0, string_literal790_tree);
                            }

                            pushFollow(FOLLOW_pattern_in_single_column_for_loop4603);
                            pattern791=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern791.getTree());

                            }
                            break;

                    }


                    string_literal792=(Token)match(input,93,FOLLOW_93_in_single_column_for_loop4608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal792_tree = 
                    (Object)adaptor.create(string_literal792)
                    ;
                    adaptor.addChild(root_0, string_literal792_tree);
                    }

                    pushFollow(FOLLOW_literal_in_single_column_for_loop4610);
                    literal793=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal793.getTree());

                    string_literal794=(Token)match(input,155,FOLLOW_155_in_single_column_for_loop4612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal794_tree = 
                    (Object)adaptor.create(string_literal794)
                    ;
                    adaptor.addChild(root_0, string_literal794_tree);
                    }

                    pushFollow(FOLLOW_literal_in_single_column_for_loop4614);
                    literal795=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal795.getTree());

                    // antlr3/PLSQL3.g:742:53: ( keyINCREMENT | keyDECREMENT )
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==ID) ) {
                        int LA206_1 = input.LA(2);

                        if ( ((((input.LT(1).getText().equalsIgnoreCase("INCREMENT"))&&(input.LT(1).getText().equalsIgnoreCase("INCREMENT")))&&synpred335_PLSQL3())) ) {
                            alt206=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("DECREMENT"))) ) {
                            alt206=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 206, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 206, 0, input);

                        throw nvae;

                    }
                    switch (alt206) {
                        case 1 :
                            // antlr3/PLSQL3.g:742:55: keyINCREMENT
                            {
                            pushFollow(FOLLOW_keyINCREMENT_in_single_column_for_loop4618);
                            keyINCREMENT796=keyINCREMENT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINCREMENT796.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:742:70: keyDECREMENT
                            {
                            pushFollow(FOLLOW_keyDECREMENT_in_single_column_for_loop4622);
                            keyDECREMENT797=keyDECREMENT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDECREMENT797.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_literal_in_single_column_for_loop4626);
                    literal798=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal798.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 123, single_column_for_loop_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "single_column_for_loop"


    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // antlr3/PLSQL3.g:745:1: literal : ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING );
    public final PLSQL3Parser.literal_return literal() throws RecognitionException {
        PLSQL3Parser.literal_return retval = new PLSQL3Parser.literal_return();
        retval.start = input.LT(1);

        int literal_StartIndex = input.index();

        Object root_0 = null;

        Token set799=null;
        Token NUMBER800=null;
        Token QUOTED_STRING801=null;

        Object set799_tree=null;
        Object NUMBER800_tree=null;
        Object QUOTED_STRING801_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

            // antlr3/PLSQL3.g:746:2: ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==MINUS||LA209_0==NUMBER||LA209_0==PLUS) ) {
                alt209=1;
            }
            else if ( (LA209_0==QUOTED_STRING) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;

            }
            switch (alt209) {
                case 1 :
                    // antlr3/PLSQL3.g:746:4: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    // antlr3/PLSQL3.g:746:4: ( PLUS | MINUS )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==MINUS||LA208_0==PLUS) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // antlr3/PLSQL3.g:
                            {
                            set799=(Token)input.LT(1);

                            if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set799)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    NUMBER800=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_literal4651); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER800_tree = 
                    (Object)adaptor.create(NUMBER800)
                    ;
                    adaptor.addChild(root_0, NUMBER800_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:747:4: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTED_STRING801=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_literal4656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING801_tree = 
                    (Object)adaptor.create(QUOTED_STRING801)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING801_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 124, literal_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class literals_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literals"
    // antlr3/PLSQL3.g:749:1: literals : literal ( COMMA literal )* ;
    public final PLSQL3Parser.literals_return literals() throws RecognitionException {
        PLSQL3Parser.literals_return retval = new PLSQL3Parser.literals_return();
        retval.start = input.LT(1);

        int literals_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA803=null;
        PLSQL3Parser.literal_return literal802 =null;

        PLSQL3Parser.literal_return literal804 =null;


        Object COMMA803_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

            // antlr3/PLSQL3.g:750:2: ( literal ( COMMA literal )* )
            // antlr3/PLSQL3.g:750:4: literal ( COMMA literal )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_literal_in_literals4666);
            literal802=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literal802.getTree());

            // antlr3/PLSQL3.g:750:12: ( COMMA literal )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==COMMA) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // antlr3/PLSQL3.g:750:14: COMMA literal
            	    {
            	    COMMA803=(Token)match(input,COMMA,FOLLOW_COMMA_in_literals4670); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA803_tree = 
            	    (Object)adaptor.create(COMMA803)
            	    ;
            	    adaptor.addChild(root_0, COMMA803_tree);
            	    }

            	    pushFollow(FOLLOW_literal_in_literals4672);
            	    literal804=literal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal804.getTree());

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 125, literals_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "literals"


    public static class bracket_literals_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bracket_literals"
    // antlr3/PLSQL3.g:752:1: bracket_literals : LPAREN literals RPAREN ;
    public final PLSQL3Parser.bracket_literals_return bracket_literals() throws RecognitionException {
        PLSQL3Parser.bracket_literals_return retval = new PLSQL3Parser.bracket_literals_return();
        retval.start = input.LT(1);

        int bracket_literals_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN805=null;
        Token RPAREN807=null;
        PLSQL3Parser.literals_return literals806 =null;


        Object LPAREN805_tree=null;
        Object RPAREN807_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

            // antlr3/PLSQL3.g:753:2: ( LPAREN literals RPAREN )
            // antlr3/PLSQL3.g:753:4: LPAREN literals RPAREN
            {
            root_0 = (Object)adaptor.nil();


            LPAREN805=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_bracket_literals4685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN805_tree = 
            (Object)adaptor.create(LPAREN805)
            ;
            adaptor.addChild(root_0, LPAREN805_tree);
            }

            pushFollow(FOLLOW_literals_in_bracket_literals4687);
            literals806=literals();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literals806.getTree());

            RPAREN807=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_bracket_literals4689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN807_tree = 
            (Object)adaptor.create(RPAREN807)
            ;
            adaptor.addChild(root_0, RPAREN807_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 126, bracket_literals_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bracket_literals"


    public static class bracket_literals_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bracket_literals_list"
    // antlr3/PLSQL3.g:755:1: bracket_literals_list : bracket_literals ( COMMA bracket_literals )* ;
    public final PLSQL3Parser.bracket_literals_list_return bracket_literals_list() throws RecognitionException {
        PLSQL3Parser.bracket_literals_list_return retval = new PLSQL3Parser.bracket_literals_list_return();
        retval.start = input.LT(1);

        int bracket_literals_list_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA809=null;
        PLSQL3Parser.bracket_literals_return bracket_literals808 =null;

        PLSQL3Parser.bracket_literals_return bracket_literals810 =null;


        Object COMMA809_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

            // antlr3/PLSQL3.g:756:2: ( bracket_literals ( COMMA bracket_literals )* )
            // antlr3/PLSQL3.g:756:4: bracket_literals ( COMMA bracket_literals )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list4699);
            bracket_literals808=bracket_literals();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_literals808.getTree());

            // antlr3/PLSQL3.g:756:21: ( COMMA bracket_literals )*
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==COMMA) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    // antlr3/PLSQL3.g:756:23: COMMA bracket_literals
            	    {
            	    COMMA809=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_literals_list4703); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA809_tree = 
            	    (Object)adaptor.create(COMMA809)
            	    ;
            	    adaptor.addChild(root_0, COMMA809_tree);
            	    }

            	    pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list4705);
            	    bracket_literals810=bracket_literals();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_literals810.getTree());

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 127, bracket_literals_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bracket_literals_list"


    public static class pattern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pattern"
    // antlr3/PLSQL3.g:758:1: pattern : QUOTED_STRING ;
    public final PLSQL3Parser.pattern_return pattern() throws RecognitionException {
        PLSQL3Parser.pattern_return retval = new PLSQL3Parser.pattern_return();
        retval.start = input.LT(1);

        int pattern_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING811=null;

        Object QUOTED_STRING811_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

            // antlr3/PLSQL3.g:759:2: ( QUOTED_STRING )
            // antlr3/PLSQL3.g:759:4: QUOTED_STRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTED_STRING811=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pattern4718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING811_tree = 
            (Object)adaptor.create(QUOTED_STRING811)
            ;
            adaptor.addChild(root_0, QUOTED_STRING811_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 128, pattern_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pattern"


    public static class multi_column_for_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_column_for_loop"
    // antlr3/PLSQL3.g:761:1: multi_column_for_loop : 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN ;
    public final PLSQL3Parser.multi_column_for_loop_return multi_column_for_loop() throws RecognitionException {
        PLSQL3Parser.multi_column_for_loop_return retval = new PLSQL3Parser.multi_column_for_loop_return();
        retval.start = input.LT(1);

        int multi_column_for_loop_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal812=null;
        Token LPAREN813=null;
        Token RPAREN815=null;
        Token string_literal816=null;
        Token LPAREN817=null;
        Token RPAREN820=null;
        PLSQL3Parser.column_specs_return column_specs814 =null;

        PLSQL3Parser.bracket_literals_list_return bracket_literals_list818 =null;

        PLSQL3Parser.subquery_return subquery819 =null;


        Object string_literal812_tree=null;
        Object LPAREN813_tree=null;
        Object RPAREN815_tree=null;
        Object string_literal816_tree=null;
        Object LPAREN817_tree=null;
        Object RPAREN820_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

            // antlr3/PLSQL3.g:762:2: ( 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN )
            // antlr3/PLSQL3.g:762:4: 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN
            {
            root_0 = (Object)adaptor.nil();


            string_literal812=(Token)match(input,92,FOLLOW_92_in_multi_column_for_loop4728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal812_tree = 
            (Object)adaptor.create(string_literal812)
            ;
            adaptor.addChild(root_0, string_literal812_tree);
            }

            LPAREN813=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop4730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN813_tree = 
            (Object)adaptor.create(LPAREN813)
            ;
            adaptor.addChild(root_0, LPAREN813_tree);
            }

            pushFollow(FOLLOW_column_specs_in_multi_column_for_loop4732);
            column_specs814=column_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs814.getTree());

            RPAREN815=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop4734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN815_tree = 
            (Object)adaptor.create(RPAREN815)
            ;
            adaptor.addChild(root_0, RPAREN815_tree);
            }

            string_literal816=(Token)match(input,99,FOLLOW_99_in_multi_column_for_loop4736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal816_tree = 
            (Object)adaptor.create(string_literal816)
            ;
            adaptor.addChild(root_0, string_literal816_tree);
            }

            LPAREN817=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop4738); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN817_tree = 
            (Object)adaptor.create(LPAREN817)
            ;
            adaptor.addChild(root_0, LPAREN817_tree);
            }

            // antlr3/PLSQL3.g:762:49: ( bracket_literals_list | subquery )
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==LPAREN) ) {
                int LA212_1 = input.LA(2);

                if ( (LA212_1==MINUS||LA212_1==NUMBER||LA212_1==PLUS||LA212_1==QUOTED_STRING) ) {
                    alt212=1;
                }
                else if ( (LA212_1==147) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;

            }
            switch (alt212) {
                case 1 :
                    // antlr3/PLSQL3.g:762:51: bracket_literals_list
                    {
                    pushFollow(FOLLOW_bracket_literals_list_in_multi_column_for_loop4742);
                    bracket_literals_list818=bracket_literals_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_literals_list818.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:762:75: subquery
                    {
                    pushFollow(FOLLOW_subquery_in_multi_column_for_loop4746);
                    subquery819=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery819.getTree());

                    }
                    break;

            }


            RPAREN820=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop4750); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN820_tree = 
            (Object)adaptor.create(RPAREN820)
            ;
            adaptor.addChild(root_0, RPAREN820_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 129, multi_column_for_loop_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multi_column_for_loop"


    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // antlr3/PLSQL3.g:764:1: order_by_clause : 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs ;
    public final PLSQL3Parser.order_by_clause_return order_by_clause() throws RecognitionException {
        PLSQL3Parser.order_by_clause_return retval = new PLSQL3Parser.order_by_clause_return();
        retval.start = input.LT(1);

        int order_by_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal821=null;
        Token string_literal823=null;
        PLSQL3Parser.keySIBLINGS_return keySIBLINGS822 =null;

        PLSQL3Parser.order_by_exprs_return order_by_exprs824 =null;


        Object string_literal821_tree=null;
        Object string_literal823_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

            // antlr3/PLSQL3.g:765:2: ( 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs )
            // antlr3/PLSQL3.g:765:4: 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs
            {
            root_0 = (Object)adaptor.nil();


            string_literal821=(Token)match(input,128,FOLLOW_128_in_order_by_clause4760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal821_tree = 
            (Object)adaptor.create(string_literal821)
            ;
            adaptor.addChild(root_0, string_literal821_tree);
            }

            // antlr3/PLSQL3.g:765:12: ( keySIBLINGS )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==ID) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // antlr3/PLSQL3.g:765:14: keySIBLINGS
                    {
                    pushFollow(FOLLOW_keySIBLINGS_in_order_by_clause4764);
                    keySIBLINGS822=keySIBLINGS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySIBLINGS822.getTree());

                    }
                    break;

            }


            string_literal823=(Token)match(input,64,FOLLOW_64_in_order_by_clause4769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal823_tree = 
            (Object)adaptor.create(string_literal823)
            ;
            adaptor.addChild(root_0, string_literal823_tree);
            }

            pushFollow(FOLLOW_order_by_exprs_in_order_by_clause4771);
            order_by_exprs824=order_by_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_exprs824.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 130, order_by_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_by_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_exprs"
    // antlr3/PLSQL3.g:767:1: order_by_exprs : order_by_expr ( COMMA order_by_expr )* ;
    public final PLSQL3Parser.order_by_exprs_return order_by_exprs() throws RecognitionException {
        PLSQL3Parser.order_by_exprs_return retval = new PLSQL3Parser.order_by_exprs_return();
        retval.start = input.LT(1);

        int order_by_exprs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA826=null;
        PLSQL3Parser.order_by_expr_return order_by_expr825 =null;

        PLSQL3Parser.order_by_expr_return order_by_expr827 =null;


        Object COMMA826_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

            // antlr3/PLSQL3.g:768:2: ( order_by_expr ( COMMA order_by_expr )* )
            // antlr3/PLSQL3.g:768:4: order_by_expr ( COMMA order_by_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_order_by_expr_in_order_by_exprs4781);
            order_by_expr825=order_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_expr825.getTree());

            // antlr3/PLSQL3.g:768:18: ( COMMA order_by_expr )*
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);

                if ( (LA214_0==COMMA) ) {
                    int LA214_2 = input.LA(2);

                    if ( (synpred343_PLSQL3()) ) {
                        alt214=1;
                    }


                }


                switch (alt214) {
            	case 1 :
            	    // antlr3/PLSQL3.g:768:20: COMMA order_by_expr
            	    {
            	    COMMA826=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_by_exprs4785); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA826_tree = 
            	    (Object)adaptor.create(COMMA826)
            	    ;
            	    adaptor.addChild(root_0, COMMA826_tree);
            	    }

            	    pushFollow(FOLLOW_order_by_expr_in_order_by_exprs4787);
            	    order_by_expr827=order_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_expr827.getTree());

            	    }
            	    break;

            	default :
            	    break loop214;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 131, order_by_exprs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "order_by_exprs"


    public static class order_by_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_expr"
    // antlr3/PLSQL3.g:770:1: order_by_expr : ( sql_expression ) ( ( 'ASC' | 'DESC' )=> 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )? ;
    public final PLSQL3Parser.order_by_expr_return order_by_expr() throws RecognitionException {
        PLSQL3Parser.order_by_expr_return retval = new PLSQL3Parser.order_by_expr_return();
        retval.start = input.LT(1);

        int order_by_expr_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal829=null;
        Token string_literal830=null;
        PLSQL3Parser.sql_expression_return sql_expression828 =null;

        PLSQL3Parser.keyNULLS_return keyNULLS831 =null;

        PLSQL3Parser.keyFIRST_return keyFIRST832 =null;

        PLSQL3Parser.keyNULLS_return keyNULLS833 =null;

        PLSQL3Parser.keyLAST_return keyLAST834 =null;


        Object string_literal829_tree=null;
        Object string_literal830_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

            // antlr3/PLSQL3.g:771:2: ( ( sql_expression ) ( ( 'ASC' | 'DESC' )=> 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )? )
            // antlr3/PLSQL3.g:771:4: ( sql_expression ) ( ( 'ASC' | 'DESC' )=> 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:771:4: ( sql_expression )
            // antlr3/PLSQL3.g:771:6: sql_expression
            {
            pushFollow(FOLLOW_sql_expression_in_order_by_expr4802);
            sql_expression828=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression828.getTree());

            }


            // antlr3/PLSQL3.g:775:3: ( ( 'ASC' | 'DESC' )=> 'ASC' | 'DESC' )?
            int alt215=3;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==54) ) {
                int LA215_1 = input.LA(2);

                if ( (synpred345_PLSQL3()) ) {
                    alt215=1;
                }
            }
            else if ( (LA215_0==80) ) {
                int LA215_2 = input.LA(2);

                if ( (synpred346_PLSQL3()) ) {
                    alt215=2;
                }
            }
            switch (alt215) {
                case 1 :
                    // antlr3/PLSQL3.g:775:5: ( 'ASC' | 'DESC' )=> 'ASC'
                    {
                    string_literal829=(Token)match(input,54,FOLLOW_54_in_order_by_expr4825); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal829_tree = 
                    (Object)adaptor.create(string_literal829)
                    ;
                    adaptor.addChild(root_0, string_literal829_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:775:34: 'DESC'
                    {
                    string_literal830=(Token)match(input,80,FOLLOW_80_in_order_by_expr4829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal830_tree = 
                    (Object)adaptor.create(string_literal830)
                    ;
                    adaptor.addChild(root_0, string_literal830_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:775:44: ( keyNULLS keyFIRST | keyNULLS keyLAST )?
            int alt216=3;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==ID) ) {
                int LA216_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("NULLS"))&&(input.LT(1).getText().equalsIgnoreCase("NULLS")))&&synpred347_PLSQL3())) ) {
                    alt216=1;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("NULLS"))&&(input.LT(1).getText().equalsIgnoreCase("NULLS")))&&synpred348_PLSQL3())) ) {
                    alt216=2;
                }
            }
            switch (alt216) {
                case 1 :
                    // antlr3/PLSQL3.g:775:46: keyNULLS keyFIRST
                    {
                    pushFollow(FOLLOW_keyNULLS_in_order_by_expr4836);
                    keyNULLS831=keyNULLS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNULLS831.getTree());

                    pushFollow(FOLLOW_keyFIRST_in_order_by_expr4838);
                    keyFIRST832=keyFIRST();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyFIRST832.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:775:66: keyNULLS keyLAST
                    {
                    pushFollow(FOLLOW_keyNULLS_in_order_by_expr4842);
                    keyNULLS833=keyNULLS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNULLS833.getTree());

                    pushFollow(FOLLOW_keyLAST_in_order_by_expr4844);
                    keyLAST834=keyLAST();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLAST834.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 132, order_by_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "order_by_expr"


    public static class for_update_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_update_clause"
    // antlr3/PLSQL3.g:777:1: for_update_clause : 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )? ;
    public final PLSQL3Parser.for_update_clause_return for_update_clause() throws RecognitionException {
        PLSQL3Parser.for_update_clause_return retval = new PLSQL3Parser.for_update_clause_return();
        retval.start = input.LT(1);

        int for_update_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal835=null;
        Token string_literal836=null;
        Token string_literal837=null;
        Token string_literal841=null;
        PLSQL3Parser.column_specs_return column_specs838 =null;

        PLSQL3Parser.keyWAIT_return keyWAIT839 =null;

        PLSQL3Parser.integer_return integer840 =null;


        Object string_literal835_tree=null;
        Object string_literal836_tree=null;
        Object string_literal837_tree=null;
        Object string_literal841_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

            // antlr3/PLSQL3.g:778:2: ( 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )? )
            // antlr3/PLSQL3.g:778:4: 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal835=(Token)match(input,92,FOLLOW_92_in_for_update_clause4857); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal835_tree = 
            (Object)adaptor.create(string_literal835)
            ;
            adaptor.addChild(root_0, string_literal835_tree);
            }

            string_literal836=(Token)match(input,159,FOLLOW_159_in_for_update_clause4859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal836_tree = 
            (Object)adaptor.create(string_literal836)
            ;
            adaptor.addChild(root_0, string_literal836_tree);
            }

            // antlr3/PLSQL3.g:778:19: ( 'OF' column_specs )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==125) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // antlr3/PLSQL3.g:778:21: 'OF' column_specs
                    {
                    string_literal837=(Token)match(input,125,FOLLOW_125_in_for_update_clause4863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal837_tree = 
                    (Object)adaptor.create(string_literal837)
                    ;
                    adaptor.addChild(root_0, string_literal837_tree);
                    }

                    pushFollow(FOLLOW_column_specs_in_for_update_clause4865);
                    column_specs838=column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs838.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:778:42: ( keyWAIT integer | 'NOWAIT' )?
            int alt218=3;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==ID) ) {
                alt218=1;
            }
            else if ( (LA218_0==119) ) {
                alt218=2;
            }
            switch (alt218) {
                case 1 :
                    // antlr3/PLSQL3.g:778:44: keyWAIT integer
                    {
                    pushFollow(FOLLOW_keyWAIT_in_for_update_clause4872);
                    keyWAIT839=keyWAIT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyWAIT839.getTree());

                    pushFollow(FOLLOW_integer_in_for_update_clause4874);
                    integer840=integer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, integer840.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:778:62: 'NOWAIT'
                    {
                    string_literal841=(Token)match(input,119,FOLLOW_119_in_for_update_clause4878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal841_tree = 
                    (Object)adaptor.create(string_literal841)
                    ;
                    adaptor.addChild(root_0, string_literal841_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 133, for_update_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_update_clause"


    public static class where_condition_whole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "where_condition_whole"
    // antlr3/PLSQL3.g:781:1: where_condition_whole : 'WHERE' sql_condition ;
    public final PLSQL3Parser.where_condition_whole_return where_condition_whole() throws RecognitionException {
        PLSQL3Parser.where_condition_whole_return retval = new PLSQL3Parser.where_condition_whole_return();
        retval.start = input.LT(1);

        int where_condition_whole_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal842=null;
        PLSQL3Parser.sql_condition_return sql_condition843 =null;


        Object string_literal842_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

            // antlr3/PLSQL3.g:782:2: ( 'WHERE' sql_condition )
            // antlr3/PLSQL3.g:782:4: 'WHERE' sql_condition
            {
            root_0 = (Object)adaptor.nil();


            string_literal842=(Token)match(input,165,FOLLOW_165_in_where_condition_whole4892); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal842_tree = 
            (Object)adaptor.create(string_literal842)
            ;
            adaptor.addChild(root_0, string_literal842_tree);
            }

            pushFollow(FOLLOW_sql_condition_in_where_condition_whole4894);
            sql_condition843=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition843.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 134, where_condition_whole_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "where_condition_whole"


    public static class where_condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "where_condition"
    // antlr3/PLSQL3.g:785:1: where_condition : sql_condition ;
    public final PLSQL3Parser.where_condition_return where_condition() throws RecognitionException {
        PLSQL3Parser.where_condition_return retval = new PLSQL3Parser.where_condition_return();
        retval.start = input.LT(1);

        int where_condition_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_condition_return sql_condition844 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

            // antlr3/PLSQL3.g:786:2: ( sql_condition )
            // antlr3/PLSQL3.g:786:4: sql_condition
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_condition_in_where_condition4905);
            sql_condition844=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition844.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 135, where_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "where_condition"


    public static class displayed_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "displayed_column"
    // antlr3/PLSQL3.g:789:1: displayed_column : ( column_spec DOT ASTERISK | sql_expression ) ( alias )? ;
    public final PLSQL3Parser.displayed_column_return displayed_column() throws RecognitionException {
        PLSQL3Parser.displayed_column_return retval = new PLSQL3Parser.displayed_column_return();
        retval.start = input.LT(1);

        int displayed_column_StartIndex = input.index();

        Object root_0 = null;

        Token DOT846=null;
        Token ASTERISK847=null;
        PLSQL3Parser.column_spec_return column_spec845 =null;

        PLSQL3Parser.sql_expression_return sql_expression848 =null;

        PLSQL3Parser.alias_return alias849 =null;


        Object DOT846_tree=null;
        Object ASTERISK847_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

            // antlr3/PLSQL3.g:790:2: ( ( column_spec DOT ASTERISK | sql_expression ) ( alias )? )
            // antlr3/PLSQL3.g:790:4: ( column_spec DOT ASTERISK | sql_expression ) ( alias )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:790:4: ( column_spec DOT ASTERISK | sql_expression )
            int alt219=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA219_1 = input.LA(2);

                if ( (LA219_1==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt219=1;
                        }
                        break;
                    case LPAREN:
                    case MINUS:
                    case NUMBER:
                    case PLUS:
                    case QUOTED_STRING:
                    case 65:
                    case 79:
                    case 81:
                    case 88:
                    case 89:
                    case 118:
                    case 120:
                    case 134:
                    case 147:
                    case 151:
                    case 156:
                        {
                        alt219=2;
                        }
                        break;
                    case ID:
                        {
                        int LA219_7 = input.LA(4);

                        if ( (LA219_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt219=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 65:
                            case 79:
                            case 81:
                            case 88:
                            case 89:
                            case 118:
                            case 120:
                            case 134:
                            case 147:
                            case 151:
                            case 156:
                                {
                                alt219=2;
                                }
                                break;
                            case ID:
                                {
                                int LA219_11 = input.LA(6);

                                if ( (LA219_11==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_11==EOF||LA219_11==ASTERISK||LA219_11==BULK_ROWCOUNT_ATTR||(LA219_11 >= COMMA && LA219_11 <= DIVIDE)||(LA219_11 >= DOUBLEQUOTED_STRING && LA219_11 <= ISOPEN_ATTR)||LA219_11==LEQ||(LA219_11 >= LPAREN && LA219_11 <= MINUS)||(LA219_11 >= NOTFOUND_ATTR && LA219_11 <= NOT_EQ)||LA219_11==PLUS||LA219_11==ROWCOUNT_ATTR||LA219_11==51||LA219_11==53||LA219_11==57||LA219_11==93||LA219_11==99||(LA219_11 >= 105 && LA219_11 <= 107)||LA219_11==118||LA219_11==127||LA219_11==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 144:
                                {
                                int LA219_12 = input.LA(6);

                                if ( (LA219_12==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_12==EOF||LA219_12==ASTERISK||LA219_12==BULK_ROWCOUNT_ATTR||(LA219_12 >= COMMA && LA219_12 <= DIVIDE)||(LA219_12 >= DOUBLEQUOTED_STRING && LA219_12 <= ISOPEN_ATTR)||LA219_12==LEQ||(LA219_12 >= LPAREN && LA219_12 <= MINUS)||(LA219_12 >= NOTFOUND_ATTR && LA219_12 <= NOT_EQ)||LA219_12==PLUS||LA219_12==ROWCOUNT_ATTR||LA219_12==51||LA219_12==53||LA219_12==57||LA219_12==93||LA219_12==99||(LA219_12 >= 105 && LA219_12 <= 107)||LA219_12==118||LA219_12==127||LA219_12==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA219_13 = input.LA(6);

                                if ( (LA219_13==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_13==EOF||LA219_13==ASTERISK||LA219_13==BULK_ROWCOUNT_ATTR||(LA219_13 >= COMMA && LA219_13 <= DIVIDE)||(LA219_13 >= DOUBLEQUOTED_STRING && LA219_13 <= ISOPEN_ATTR)||LA219_13==LEQ||(LA219_13 >= LPAREN && LA219_13 <= MINUS)||(LA219_13 >= NOTFOUND_ATTR && LA219_13 <= NOT_EQ)||LA219_13==PLUS||LA219_13==ROWCOUNT_ATTR||LA219_13==51||LA219_13==53||LA219_13==57||LA219_13==93||LA219_13==99||(LA219_13 >= 105 && LA219_13 <= 107)||LA219_13==118||LA219_13==127||LA219_13==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA219_7==EOF||LA219_7==ASTERISK||LA219_7==BULK_ROWCOUNT_ATTR||(LA219_7 >= COMMA && LA219_7 <= DIVIDE)||(LA219_7 >= DOUBLEQUOTED_STRING && LA219_7 <= ISOPEN_ATTR)||LA219_7==LEQ||(LA219_7 >= LPAREN && LA219_7 <= MINUS)||(LA219_7 >= NOTFOUND_ATTR && LA219_7 <= NOT_EQ)||LA219_7==PLUS||LA219_7==ROWCOUNT_ATTR||LA219_7==51||LA219_7==53||LA219_7==57||LA219_7==93||LA219_7==99||(LA219_7 >= 105 && LA219_7 <= 107)||LA219_7==118||LA219_7==127||LA219_7==144) ) {
                            alt219=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 7, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 144:
                        {
                        int LA219_8 = input.LA(4);

                        if ( (LA219_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt219=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 65:
                            case 79:
                            case 81:
                            case 88:
                            case 89:
                            case 118:
                            case 120:
                            case 134:
                            case 147:
                            case 151:
                            case 156:
                                {
                                alt219=2;
                                }
                                break;
                            case ID:
                                {
                                int LA219_11 = input.LA(6);

                                if ( (LA219_11==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_11==EOF||LA219_11==ASTERISK||LA219_11==BULK_ROWCOUNT_ATTR||(LA219_11 >= COMMA && LA219_11 <= DIVIDE)||(LA219_11 >= DOUBLEQUOTED_STRING && LA219_11 <= ISOPEN_ATTR)||LA219_11==LEQ||(LA219_11 >= LPAREN && LA219_11 <= MINUS)||(LA219_11 >= NOTFOUND_ATTR && LA219_11 <= NOT_EQ)||LA219_11==PLUS||LA219_11==ROWCOUNT_ATTR||LA219_11==51||LA219_11==53||LA219_11==57||LA219_11==93||LA219_11==99||(LA219_11 >= 105 && LA219_11 <= 107)||LA219_11==118||LA219_11==127||LA219_11==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 144:
                                {
                                int LA219_12 = input.LA(6);

                                if ( (LA219_12==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_12==EOF||LA219_12==ASTERISK||LA219_12==BULK_ROWCOUNT_ATTR||(LA219_12 >= COMMA && LA219_12 <= DIVIDE)||(LA219_12 >= DOUBLEQUOTED_STRING && LA219_12 <= ISOPEN_ATTR)||LA219_12==LEQ||(LA219_12 >= LPAREN && LA219_12 <= MINUS)||(LA219_12 >= NOTFOUND_ATTR && LA219_12 <= NOT_EQ)||LA219_12==PLUS||LA219_12==ROWCOUNT_ATTR||LA219_12==51||LA219_12==53||LA219_12==57||LA219_12==93||LA219_12==99||(LA219_12 >= 105 && LA219_12 <= 107)||LA219_12==118||LA219_12==127||LA219_12==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA219_13 = input.LA(6);

                                if ( (LA219_13==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_13==EOF||LA219_13==ASTERISK||LA219_13==BULK_ROWCOUNT_ATTR||(LA219_13 >= COMMA && LA219_13 <= DIVIDE)||(LA219_13 >= DOUBLEQUOTED_STRING && LA219_13 <= ISOPEN_ATTR)||LA219_13==LEQ||(LA219_13 >= LPAREN && LA219_13 <= MINUS)||(LA219_13 >= NOTFOUND_ATTR && LA219_13 <= NOT_EQ)||LA219_13==PLUS||LA219_13==ROWCOUNT_ATTR||LA219_13==51||LA219_13==53||LA219_13==57||LA219_13==93||LA219_13==99||(LA219_13 >= 105 && LA219_13 <= 107)||LA219_13==118||LA219_13==127||LA219_13==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA219_8==EOF||LA219_8==ASTERISK||LA219_8==BULK_ROWCOUNT_ATTR||(LA219_8 >= COMMA && LA219_8 <= DIVIDE)||(LA219_8 >= DOUBLEQUOTED_STRING && LA219_8 <= ISOPEN_ATTR)||LA219_8==LEQ||(LA219_8 >= LPAREN && LA219_8 <= MINUS)||(LA219_8 >= NOTFOUND_ATTR && LA219_8 <= NOT_EQ)||LA219_8==PLUS||LA219_8==ROWCOUNT_ATTR||LA219_8==51||LA219_8==53||LA219_8==57||LA219_8==93||LA219_8==99||(LA219_8 >= 105 && LA219_8 <= 107)||LA219_8==118||LA219_8==127||LA219_8==144) ) {
                            alt219=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 8, input);

                            throw nvae;

                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA219_9 = input.LA(4);

                        if ( (LA219_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt219=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 65:
                            case 79:
                            case 81:
                            case 88:
                            case 89:
                            case 118:
                            case 120:
                            case 134:
                            case 147:
                            case 151:
                            case 156:
                                {
                                alt219=2;
                                }
                                break;
                            case ID:
                                {
                                int LA219_11 = input.LA(6);

                                if ( (LA219_11==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_11==EOF||LA219_11==ASTERISK||LA219_11==BULK_ROWCOUNT_ATTR||(LA219_11 >= COMMA && LA219_11 <= DIVIDE)||(LA219_11 >= DOUBLEQUOTED_STRING && LA219_11 <= ISOPEN_ATTR)||LA219_11==LEQ||(LA219_11 >= LPAREN && LA219_11 <= MINUS)||(LA219_11 >= NOTFOUND_ATTR && LA219_11 <= NOT_EQ)||LA219_11==PLUS||LA219_11==ROWCOUNT_ATTR||LA219_11==51||LA219_11==53||LA219_11==57||LA219_11==93||LA219_11==99||(LA219_11 >= 105 && LA219_11 <= 107)||LA219_11==118||LA219_11==127||LA219_11==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 144:
                                {
                                int LA219_12 = input.LA(6);

                                if ( (LA219_12==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_12==EOF||LA219_12==ASTERISK||LA219_12==BULK_ROWCOUNT_ATTR||(LA219_12 >= COMMA && LA219_12 <= DIVIDE)||(LA219_12 >= DOUBLEQUOTED_STRING && LA219_12 <= ISOPEN_ATTR)||LA219_12==LEQ||(LA219_12 >= LPAREN && LA219_12 <= MINUS)||(LA219_12 >= NOTFOUND_ATTR && LA219_12 <= NOT_EQ)||LA219_12==PLUS||LA219_12==ROWCOUNT_ATTR||LA219_12==51||LA219_12==53||LA219_12==57||LA219_12==93||LA219_12==99||(LA219_12 >= 105 && LA219_12 <= 107)||LA219_12==118||LA219_12==127||LA219_12==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA219_13 = input.LA(6);

                                if ( (LA219_13==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_13==EOF||LA219_13==ASTERISK||LA219_13==BULK_ROWCOUNT_ATTR||(LA219_13 >= COMMA && LA219_13 <= DIVIDE)||(LA219_13 >= DOUBLEQUOTED_STRING && LA219_13 <= ISOPEN_ATTR)||LA219_13==LEQ||(LA219_13 >= LPAREN && LA219_13 <= MINUS)||(LA219_13 >= NOTFOUND_ATTR && LA219_13 <= NOT_EQ)||LA219_13==PLUS||LA219_13==ROWCOUNT_ATTR||LA219_13==51||LA219_13==53||LA219_13==57||LA219_13==93||LA219_13==99||(LA219_13 >= 105 && LA219_13 <= 107)||LA219_13==118||LA219_13==127||LA219_13==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA219_9==EOF||LA219_9==ASTERISK||LA219_9==BULK_ROWCOUNT_ATTR||(LA219_9 >= COMMA && LA219_9 <= DIVIDE)||(LA219_9 >= DOUBLEQUOTED_STRING && LA219_9 <= ISOPEN_ATTR)||LA219_9==LEQ||(LA219_9 >= LPAREN && LA219_9 <= MINUS)||(LA219_9 >= NOTFOUND_ATTR && LA219_9 <= NOT_EQ)||LA219_9==PLUS||LA219_9==ROWCOUNT_ATTR||LA219_9==51||LA219_9==53||LA219_9==57||LA219_9==93||LA219_9==99||(LA219_9 >= 105 && LA219_9 <= 107)||LA219_9==118||LA219_9==127||LA219_9==144) ) {
                            alt219=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 9, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 219, 5, input);

                        throw nvae;

                    }

                }
                else if ( (LA219_1==EOF||LA219_1==ASTERISK||(LA219_1 >= COMMA && LA219_1 <= DIVIDE)||(LA219_1 >= DOUBLEQUOTED_STRING && LA219_1 <= DOUBLEVERTBAR)||LA219_1==EXPONENT||LA219_1==ID||LA219_1==LPAREN||LA219_1==MINUS||LA219_1==PLUS||LA219_1==53||LA219_1==93||LA219_1==105||LA219_1==144) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 1, input);

                    throw nvae;

                }
                }
                break;
            case 144:
                {
                int LA219_2 = input.LA(2);

                if ( (LA219_2==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt219=1;
                        }
                        break;
                    case LPAREN:
                    case MINUS:
                    case NUMBER:
                    case PLUS:
                    case QUOTED_STRING:
                    case 65:
                    case 79:
                    case 81:
                    case 88:
                    case 89:
                    case 118:
                    case 120:
                    case 134:
                    case 147:
                    case 151:
                    case 156:
                        {
                        alt219=2;
                        }
                        break;
                    case ID:
                        {
                        int LA219_7 = input.LA(4);

                        if ( (LA219_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt219=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 65:
                            case 79:
                            case 81:
                            case 88:
                            case 89:
                            case 118:
                            case 120:
                            case 134:
                            case 147:
                            case 151:
                            case 156:
                                {
                                alt219=2;
                                }
                                break;
                            case ID:
                                {
                                int LA219_11 = input.LA(6);

                                if ( (LA219_11==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_11==EOF||LA219_11==ASTERISK||LA219_11==BULK_ROWCOUNT_ATTR||(LA219_11 >= COMMA && LA219_11 <= DIVIDE)||(LA219_11 >= DOUBLEQUOTED_STRING && LA219_11 <= ISOPEN_ATTR)||LA219_11==LEQ||(LA219_11 >= LPAREN && LA219_11 <= MINUS)||(LA219_11 >= NOTFOUND_ATTR && LA219_11 <= NOT_EQ)||LA219_11==PLUS||LA219_11==ROWCOUNT_ATTR||LA219_11==51||LA219_11==53||LA219_11==57||LA219_11==93||LA219_11==99||(LA219_11 >= 105 && LA219_11 <= 107)||LA219_11==118||LA219_11==127||LA219_11==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 144:
                                {
                                int LA219_12 = input.LA(6);

                                if ( (LA219_12==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_12==EOF||LA219_12==ASTERISK||LA219_12==BULK_ROWCOUNT_ATTR||(LA219_12 >= COMMA && LA219_12 <= DIVIDE)||(LA219_12 >= DOUBLEQUOTED_STRING && LA219_12 <= ISOPEN_ATTR)||LA219_12==LEQ||(LA219_12 >= LPAREN && LA219_12 <= MINUS)||(LA219_12 >= NOTFOUND_ATTR && LA219_12 <= NOT_EQ)||LA219_12==PLUS||LA219_12==ROWCOUNT_ATTR||LA219_12==51||LA219_12==53||LA219_12==57||LA219_12==93||LA219_12==99||(LA219_12 >= 105 && LA219_12 <= 107)||LA219_12==118||LA219_12==127||LA219_12==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA219_13 = input.LA(6);

                                if ( (LA219_13==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_13==EOF||LA219_13==ASTERISK||LA219_13==BULK_ROWCOUNT_ATTR||(LA219_13 >= COMMA && LA219_13 <= DIVIDE)||(LA219_13 >= DOUBLEQUOTED_STRING && LA219_13 <= ISOPEN_ATTR)||LA219_13==LEQ||(LA219_13 >= LPAREN && LA219_13 <= MINUS)||(LA219_13 >= NOTFOUND_ATTR && LA219_13 <= NOT_EQ)||LA219_13==PLUS||LA219_13==ROWCOUNT_ATTR||LA219_13==51||LA219_13==53||LA219_13==57||LA219_13==93||LA219_13==99||(LA219_13 >= 105 && LA219_13 <= 107)||LA219_13==118||LA219_13==127||LA219_13==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA219_7==EOF||LA219_7==ASTERISK||LA219_7==BULK_ROWCOUNT_ATTR||(LA219_7 >= COMMA && LA219_7 <= DIVIDE)||(LA219_7 >= DOUBLEQUOTED_STRING && LA219_7 <= ISOPEN_ATTR)||LA219_7==LEQ||(LA219_7 >= LPAREN && LA219_7 <= MINUS)||(LA219_7 >= NOTFOUND_ATTR && LA219_7 <= NOT_EQ)||LA219_7==PLUS||LA219_7==ROWCOUNT_ATTR||LA219_7==51||LA219_7==53||LA219_7==57||LA219_7==93||LA219_7==99||(LA219_7 >= 105 && LA219_7 <= 107)||LA219_7==118||LA219_7==127||LA219_7==144) ) {
                            alt219=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 7, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 144:
                        {
                        int LA219_8 = input.LA(4);

                        if ( (LA219_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt219=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 65:
                            case 79:
                            case 81:
                            case 88:
                            case 89:
                            case 118:
                            case 120:
                            case 134:
                            case 147:
                            case 151:
                            case 156:
                                {
                                alt219=2;
                                }
                                break;
                            case ID:
                                {
                                int LA219_11 = input.LA(6);

                                if ( (LA219_11==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_11==EOF||LA219_11==ASTERISK||LA219_11==BULK_ROWCOUNT_ATTR||(LA219_11 >= COMMA && LA219_11 <= DIVIDE)||(LA219_11 >= DOUBLEQUOTED_STRING && LA219_11 <= ISOPEN_ATTR)||LA219_11==LEQ||(LA219_11 >= LPAREN && LA219_11 <= MINUS)||(LA219_11 >= NOTFOUND_ATTR && LA219_11 <= NOT_EQ)||LA219_11==PLUS||LA219_11==ROWCOUNT_ATTR||LA219_11==51||LA219_11==53||LA219_11==57||LA219_11==93||LA219_11==99||(LA219_11 >= 105 && LA219_11 <= 107)||LA219_11==118||LA219_11==127||LA219_11==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 144:
                                {
                                int LA219_12 = input.LA(6);

                                if ( (LA219_12==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_12==EOF||LA219_12==ASTERISK||LA219_12==BULK_ROWCOUNT_ATTR||(LA219_12 >= COMMA && LA219_12 <= DIVIDE)||(LA219_12 >= DOUBLEQUOTED_STRING && LA219_12 <= ISOPEN_ATTR)||LA219_12==LEQ||(LA219_12 >= LPAREN && LA219_12 <= MINUS)||(LA219_12 >= NOTFOUND_ATTR && LA219_12 <= NOT_EQ)||LA219_12==PLUS||LA219_12==ROWCOUNT_ATTR||LA219_12==51||LA219_12==53||LA219_12==57||LA219_12==93||LA219_12==99||(LA219_12 >= 105 && LA219_12 <= 107)||LA219_12==118||LA219_12==127||LA219_12==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA219_13 = input.LA(6);

                                if ( (LA219_13==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_13==EOF||LA219_13==ASTERISK||LA219_13==BULK_ROWCOUNT_ATTR||(LA219_13 >= COMMA && LA219_13 <= DIVIDE)||(LA219_13 >= DOUBLEQUOTED_STRING && LA219_13 <= ISOPEN_ATTR)||LA219_13==LEQ||(LA219_13 >= LPAREN && LA219_13 <= MINUS)||(LA219_13 >= NOTFOUND_ATTR && LA219_13 <= NOT_EQ)||LA219_13==PLUS||LA219_13==ROWCOUNT_ATTR||LA219_13==51||LA219_13==53||LA219_13==57||LA219_13==93||LA219_13==99||(LA219_13 >= 105 && LA219_13 <= 107)||LA219_13==118||LA219_13==127||LA219_13==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA219_8==EOF||LA219_8==ASTERISK||LA219_8==BULK_ROWCOUNT_ATTR||(LA219_8 >= COMMA && LA219_8 <= DIVIDE)||(LA219_8 >= DOUBLEQUOTED_STRING && LA219_8 <= ISOPEN_ATTR)||LA219_8==LEQ||(LA219_8 >= LPAREN && LA219_8 <= MINUS)||(LA219_8 >= NOTFOUND_ATTR && LA219_8 <= NOT_EQ)||LA219_8==PLUS||LA219_8==ROWCOUNT_ATTR||LA219_8==51||LA219_8==53||LA219_8==57||LA219_8==93||LA219_8==99||(LA219_8 >= 105 && LA219_8 <= 107)||LA219_8==118||LA219_8==127||LA219_8==144) ) {
                            alt219=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 8, input);

                            throw nvae;

                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA219_9 = input.LA(4);

                        if ( (LA219_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt219=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 65:
                            case 79:
                            case 81:
                            case 88:
                            case 89:
                            case 118:
                            case 120:
                            case 134:
                            case 147:
                            case 151:
                            case 156:
                                {
                                alt219=2;
                                }
                                break;
                            case ID:
                                {
                                int LA219_11 = input.LA(6);

                                if ( (LA219_11==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_11==EOF||LA219_11==ASTERISK||LA219_11==BULK_ROWCOUNT_ATTR||(LA219_11 >= COMMA && LA219_11 <= DIVIDE)||(LA219_11 >= DOUBLEQUOTED_STRING && LA219_11 <= ISOPEN_ATTR)||LA219_11==LEQ||(LA219_11 >= LPAREN && LA219_11 <= MINUS)||(LA219_11 >= NOTFOUND_ATTR && LA219_11 <= NOT_EQ)||LA219_11==PLUS||LA219_11==ROWCOUNT_ATTR||LA219_11==51||LA219_11==53||LA219_11==57||LA219_11==93||LA219_11==99||(LA219_11 >= 105 && LA219_11 <= 107)||LA219_11==118||LA219_11==127||LA219_11==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 144:
                                {
                                int LA219_12 = input.LA(6);

                                if ( (LA219_12==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_12==EOF||LA219_12==ASTERISK||LA219_12==BULK_ROWCOUNT_ATTR||(LA219_12 >= COMMA && LA219_12 <= DIVIDE)||(LA219_12 >= DOUBLEQUOTED_STRING && LA219_12 <= ISOPEN_ATTR)||LA219_12==LEQ||(LA219_12 >= LPAREN && LA219_12 <= MINUS)||(LA219_12 >= NOTFOUND_ATTR && LA219_12 <= NOT_EQ)||LA219_12==PLUS||LA219_12==ROWCOUNT_ATTR||LA219_12==51||LA219_12==53||LA219_12==57||LA219_12==93||LA219_12==99||(LA219_12 >= 105 && LA219_12 <= 107)||LA219_12==118||LA219_12==127||LA219_12==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA219_13 = input.LA(6);

                                if ( (LA219_13==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_13==EOF||LA219_13==ASTERISK||LA219_13==BULK_ROWCOUNT_ATTR||(LA219_13 >= COMMA && LA219_13 <= DIVIDE)||(LA219_13 >= DOUBLEQUOTED_STRING && LA219_13 <= ISOPEN_ATTR)||LA219_13==LEQ||(LA219_13 >= LPAREN && LA219_13 <= MINUS)||(LA219_13 >= NOTFOUND_ATTR && LA219_13 <= NOT_EQ)||LA219_13==PLUS||LA219_13==ROWCOUNT_ATTR||LA219_13==51||LA219_13==53||LA219_13==57||LA219_13==93||LA219_13==99||(LA219_13 >= 105 && LA219_13 <= 107)||LA219_13==118||LA219_13==127||LA219_13==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA219_9==EOF||LA219_9==ASTERISK||LA219_9==BULK_ROWCOUNT_ATTR||(LA219_9 >= COMMA && LA219_9 <= DIVIDE)||(LA219_9 >= DOUBLEQUOTED_STRING && LA219_9 <= ISOPEN_ATTR)||LA219_9==LEQ||(LA219_9 >= LPAREN && LA219_9 <= MINUS)||(LA219_9 >= NOTFOUND_ATTR && LA219_9 <= NOT_EQ)||LA219_9==PLUS||LA219_9==ROWCOUNT_ATTR||LA219_9==51||LA219_9==53||LA219_9==57||LA219_9==93||LA219_9==99||(LA219_9 >= 105 && LA219_9 <= 107)||LA219_9==118||LA219_9==127||LA219_9==144) ) {
                            alt219=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 9, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 219, 5, input);

                        throw nvae;

                    }

                }
                else if ( (LA219_2==EOF||LA219_2==ASTERISK||(LA219_2 >= COMMA && LA219_2 <= DIVIDE)||(LA219_2 >= DOUBLEQUOTED_STRING && LA219_2 <= DOUBLEVERTBAR)||LA219_2==EXPONENT||LA219_2==ID||LA219_2==LPAREN||LA219_2==MINUS||LA219_2==PLUS||LA219_2==53||LA219_2==93||LA219_2==105||LA219_2==144) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 2, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
            case MINUS:
            case NUMBER:
            case PLUS:
            case QUOTED_STRING:
            case 65:
            case 81:
            case 89:
            case 120:
            case 147:
            case 151:
            case 156:
                {
                alt219=2;
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA219_4 = input.LA(2);

                if ( (LA219_4==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt219=1;
                        }
                        break;
                    case LPAREN:
                    case MINUS:
                    case NUMBER:
                    case PLUS:
                    case QUOTED_STRING:
                    case 65:
                    case 79:
                    case 81:
                    case 88:
                    case 89:
                    case 118:
                    case 120:
                    case 134:
                    case 147:
                    case 151:
                    case 156:
                        {
                        alt219=2;
                        }
                        break;
                    case ID:
                        {
                        int LA219_7 = input.LA(4);

                        if ( (LA219_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt219=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 65:
                            case 79:
                            case 81:
                            case 88:
                            case 89:
                            case 118:
                            case 120:
                            case 134:
                            case 147:
                            case 151:
                            case 156:
                                {
                                alt219=2;
                                }
                                break;
                            case ID:
                                {
                                int LA219_11 = input.LA(6);

                                if ( (LA219_11==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_11==EOF||LA219_11==ASTERISK||LA219_11==BULK_ROWCOUNT_ATTR||(LA219_11 >= COMMA && LA219_11 <= DIVIDE)||(LA219_11 >= DOUBLEQUOTED_STRING && LA219_11 <= ISOPEN_ATTR)||LA219_11==LEQ||(LA219_11 >= LPAREN && LA219_11 <= MINUS)||(LA219_11 >= NOTFOUND_ATTR && LA219_11 <= NOT_EQ)||LA219_11==PLUS||LA219_11==ROWCOUNT_ATTR||LA219_11==51||LA219_11==53||LA219_11==57||LA219_11==93||LA219_11==99||(LA219_11 >= 105 && LA219_11 <= 107)||LA219_11==118||LA219_11==127||LA219_11==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 144:
                                {
                                int LA219_12 = input.LA(6);

                                if ( (LA219_12==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_12==EOF||LA219_12==ASTERISK||LA219_12==BULK_ROWCOUNT_ATTR||(LA219_12 >= COMMA && LA219_12 <= DIVIDE)||(LA219_12 >= DOUBLEQUOTED_STRING && LA219_12 <= ISOPEN_ATTR)||LA219_12==LEQ||(LA219_12 >= LPAREN && LA219_12 <= MINUS)||(LA219_12 >= NOTFOUND_ATTR && LA219_12 <= NOT_EQ)||LA219_12==PLUS||LA219_12==ROWCOUNT_ATTR||LA219_12==51||LA219_12==53||LA219_12==57||LA219_12==93||LA219_12==99||(LA219_12 >= 105 && LA219_12 <= 107)||LA219_12==118||LA219_12==127||LA219_12==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA219_13 = input.LA(6);

                                if ( (LA219_13==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_13==EOF||LA219_13==ASTERISK||LA219_13==BULK_ROWCOUNT_ATTR||(LA219_13 >= COMMA && LA219_13 <= DIVIDE)||(LA219_13 >= DOUBLEQUOTED_STRING && LA219_13 <= ISOPEN_ATTR)||LA219_13==LEQ||(LA219_13 >= LPAREN && LA219_13 <= MINUS)||(LA219_13 >= NOTFOUND_ATTR && LA219_13 <= NOT_EQ)||LA219_13==PLUS||LA219_13==ROWCOUNT_ATTR||LA219_13==51||LA219_13==53||LA219_13==57||LA219_13==93||LA219_13==99||(LA219_13 >= 105 && LA219_13 <= 107)||LA219_13==118||LA219_13==127||LA219_13==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA219_7==EOF||LA219_7==ASTERISK||LA219_7==BULK_ROWCOUNT_ATTR||(LA219_7 >= COMMA && LA219_7 <= DIVIDE)||(LA219_7 >= DOUBLEQUOTED_STRING && LA219_7 <= ISOPEN_ATTR)||LA219_7==LEQ||(LA219_7 >= LPAREN && LA219_7 <= MINUS)||(LA219_7 >= NOTFOUND_ATTR && LA219_7 <= NOT_EQ)||LA219_7==PLUS||LA219_7==ROWCOUNT_ATTR||LA219_7==51||LA219_7==53||LA219_7==57||LA219_7==93||LA219_7==99||(LA219_7 >= 105 && LA219_7 <= 107)||LA219_7==118||LA219_7==127||LA219_7==144) ) {
                            alt219=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 7, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 144:
                        {
                        int LA219_8 = input.LA(4);

                        if ( (LA219_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt219=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 65:
                            case 79:
                            case 81:
                            case 88:
                            case 89:
                            case 118:
                            case 120:
                            case 134:
                            case 147:
                            case 151:
                            case 156:
                                {
                                alt219=2;
                                }
                                break;
                            case ID:
                                {
                                int LA219_11 = input.LA(6);

                                if ( (LA219_11==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_11==EOF||LA219_11==ASTERISK||LA219_11==BULK_ROWCOUNT_ATTR||(LA219_11 >= COMMA && LA219_11 <= DIVIDE)||(LA219_11 >= DOUBLEQUOTED_STRING && LA219_11 <= ISOPEN_ATTR)||LA219_11==LEQ||(LA219_11 >= LPAREN && LA219_11 <= MINUS)||(LA219_11 >= NOTFOUND_ATTR && LA219_11 <= NOT_EQ)||LA219_11==PLUS||LA219_11==ROWCOUNT_ATTR||LA219_11==51||LA219_11==53||LA219_11==57||LA219_11==93||LA219_11==99||(LA219_11 >= 105 && LA219_11 <= 107)||LA219_11==118||LA219_11==127||LA219_11==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 144:
                                {
                                int LA219_12 = input.LA(6);

                                if ( (LA219_12==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_12==EOF||LA219_12==ASTERISK||LA219_12==BULK_ROWCOUNT_ATTR||(LA219_12 >= COMMA && LA219_12 <= DIVIDE)||(LA219_12 >= DOUBLEQUOTED_STRING && LA219_12 <= ISOPEN_ATTR)||LA219_12==LEQ||(LA219_12 >= LPAREN && LA219_12 <= MINUS)||(LA219_12 >= NOTFOUND_ATTR && LA219_12 <= NOT_EQ)||LA219_12==PLUS||LA219_12==ROWCOUNT_ATTR||LA219_12==51||LA219_12==53||LA219_12==57||LA219_12==93||LA219_12==99||(LA219_12 >= 105 && LA219_12 <= 107)||LA219_12==118||LA219_12==127||LA219_12==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA219_13 = input.LA(6);

                                if ( (LA219_13==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_13==EOF||LA219_13==ASTERISK||LA219_13==BULK_ROWCOUNT_ATTR||(LA219_13 >= COMMA && LA219_13 <= DIVIDE)||(LA219_13 >= DOUBLEQUOTED_STRING && LA219_13 <= ISOPEN_ATTR)||LA219_13==LEQ||(LA219_13 >= LPAREN && LA219_13 <= MINUS)||(LA219_13 >= NOTFOUND_ATTR && LA219_13 <= NOT_EQ)||LA219_13==PLUS||LA219_13==ROWCOUNT_ATTR||LA219_13==51||LA219_13==53||LA219_13==57||LA219_13==93||LA219_13==99||(LA219_13 >= 105 && LA219_13 <= 107)||LA219_13==118||LA219_13==127||LA219_13==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA219_8==EOF||LA219_8==ASTERISK||LA219_8==BULK_ROWCOUNT_ATTR||(LA219_8 >= COMMA && LA219_8 <= DIVIDE)||(LA219_8 >= DOUBLEQUOTED_STRING && LA219_8 <= ISOPEN_ATTR)||LA219_8==LEQ||(LA219_8 >= LPAREN && LA219_8 <= MINUS)||(LA219_8 >= NOTFOUND_ATTR && LA219_8 <= NOT_EQ)||LA219_8==PLUS||LA219_8==ROWCOUNT_ATTR||LA219_8==51||LA219_8==53||LA219_8==57||LA219_8==93||LA219_8==99||(LA219_8 >= 105 && LA219_8 <= 107)||LA219_8==118||LA219_8==127||LA219_8==144) ) {
                            alt219=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 8, input);

                            throw nvae;

                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA219_9 = input.LA(4);

                        if ( (LA219_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt219=1;
                                }
                                break;
                            case LPAREN:
                            case MINUS:
                            case NUMBER:
                            case PLUS:
                            case QUOTED_STRING:
                            case 65:
                            case 79:
                            case 81:
                            case 88:
                            case 89:
                            case 118:
                            case 120:
                            case 134:
                            case 147:
                            case 151:
                            case 156:
                                {
                                alt219=2;
                                }
                                break;
                            case ID:
                                {
                                int LA219_11 = input.LA(6);

                                if ( (LA219_11==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_11==EOF||LA219_11==ASTERISK||LA219_11==BULK_ROWCOUNT_ATTR||(LA219_11 >= COMMA && LA219_11 <= DIVIDE)||(LA219_11 >= DOUBLEQUOTED_STRING && LA219_11 <= ISOPEN_ATTR)||LA219_11==LEQ||(LA219_11 >= LPAREN && LA219_11 <= MINUS)||(LA219_11 >= NOTFOUND_ATTR && LA219_11 <= NOT_EQ)||LA219_11==PLUS||LA219_11==ROWCOUNT_ATTR||LA219_11==51||LA219_11==53||LA219_11==57||LA219_11==93||LA219_11==99||(LA219_11 >= 105 && LA219_11 <= 107)||LA219_11==118||LA219_11==127||LA219_11==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 11, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case 144:
                                {
                                int LA219_12 = input.LA(6);

                                if ( (LA219_12==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_12==EOF||LA219_12==ASTERISK||LA219_12==BULK_ROWCOUNT_ATTR||(LA219_12 >= COMMA && LA219_12 <= DIVIDE)||(LA219_12 >= DOUBLEQUOTED_STRING && LA219_12 <= ISOPEN_ATTR)||LA219_12==LEQ||(LA219_12 >= LPAREN && LA219_12 <= MINUS)||(LA219_12 >= NOTFOUND_ATTR && LA219_12 <= NOT_EQ)||LA219_12==PLUS||LA219_12==ROWCOUNT_ATTR||LA219_12==51||LA219_12==53||LA219_12==57||LA219_12==93||LA219_12==99||(LA219_12 >= 105 && LA219_12 <= 107)||LA219_12==118||LA219_12==127||LA219_12==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 12, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA219_13 = input.LA(6);

                                if ( (LA219_13==DOT) ) {
                                    int LA219_14 = input.LA(7);

                                    if ( (LA219_14==ASTERISK) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_14==DOUBLEQUOTED_STRING||LA219_14==ID||LA219_14==LPAREN||LA219_14==MINUS||LA219_14==NUMBER||LA219_14==PLUS||LA219_14==QUOTED_STRING||LA219_14==65||LA219_14==79||LA219_14==81||(LA219_14 >= 88 && LA219_14 <= 89)||LA219_14==118||LA219_14==120||LA219_14==134||LA219_14==144||LA219_14==147||LA219_14==151||LA219_14==156) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 14, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA219_13==EOF||LA219_13==ASTERISK||LA219_13==BULK_ROWCOUNT_ATTR||(LA219_13 >= COMMA && LA219_13 <= DIVIDE)||(LA219_13 >= DOUBLEQUOTED_STRING && LA219_13 <= ISOPEN_ATTR)||LA219_13==LEQ||(LA219_13 >= LPAREN && LA219_13 <= MINUS)||(LA219_13 >= NOTFOUND_ATTR && LA219_13 <= NOT_EQ)||LA219_13==PLUS||LA219_13==ROWCOUNT_ATTR||LA219_13==51||LA219_13==53||LA219_13==57||LA219_13==93||LA219_13==99||(LA219_13 >= 105 && LA219_13 <= 107)||LA219_13==118||LA219_13==127||LA219_13==144) ) {
                                    alt219=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 13, input);

                                    throw nvae;

                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 10, input);

                                throw nvae;

                            }

                        }
                        else if ( (LA219_9==EOF||LA219_9==ASTERISK||LA219_9==BULK_ROWCOUNT_ATTR||(LA219_9 >= COMMA && LA219_9 <= DIVIDE)||(LA219_9 >= DOUBLEQUOTED_STRING && LA219_9 <= ISOPEN_ATTR)||LA219_9==LEQ||(LA219_9 >= LPAREN && LA219_9 <= MINUS)||(LA219_9 >= NOTFOUND_ATTR && LA219_9 <= NOT_EQ)||LA219_9==PLUS||LA219_9==ROWCOUNT_ATTR||LA219_9==51||LA219_9==53||LA219_9==57||LA219_9==93||LA219_9==99||(LA219_9 >= 105 && LA219_9 <= 107)||LA219_9==118||LA219_9==127||LA219_9==144) ) {
                            alt219=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 9, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 219, 5, input);

                        throw nvae;

                    }

                }
                else if ( (LA219_4==EOF||LA219_4==ASTERISK||(LA219_4 >= COMMA && LA219_4 <= DIVIDE)||(LA219_4 >= DOUBLEQUOTED_STRING && LA219_4 <= DOUBLEVERTBAR)||LA219_4==EXPONENT||LA219_4==ID||LA219_4==LPAREN||LA219_4==MINUS||LA219_4==PLUS||LA219_4==53||LA219_4==93||LA219_4==105||LA219_4==144) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;

            }

            switch (alt219) {
                case 1 :
                    // antlr3/PLSQL3.g:790:6: column_spec DOT ASTERISK
                    {
                    pushFollow(FOLLOW_column_spec_in_displayed_column4918);
                    column_spec845=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec845.getTree());

                    DOT846=(Token)match(input,DOT,FOLLOW_DOT_in_displayed_column4920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT846_tree = 
                    (Object)adaptor.create(DOT846)
                    ;
                    adaptor.addChild(root_0, DOT846_tree);
                    }

                    ASTERISK847=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_displayed_column4922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK847_tree = 
                    (Object)adaptor.create(ASTERISK847)
                    ;
                    adaptor.addChild(root_0, ASTERISK847_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:793:5: sql_expression
                    {
                    pushFollow(FOLLOW_sql_expression_in_displayed_column4930);
                    sql_expression848=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression848.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:795:3: ( alias )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==DOUBLEQUOTED_STRING||LA220_0==53||LA220_0==144) ) {
                alt220=1;
            }
            else if ( (LA220_0==ID) ) {
                int LA220_2 = input.LA(2);

                if ( (LA220_2==EOF||LA220_2==COMMA||LA220_2==93||LA220_2==105) ) {
                    alt220=1;
                }
                else if ( (LA220_2==ID) ) {
                    int LA220_4 = input.LA(3);

                    if ( (LA220_4==ID) ) {
                        alt220=1;
                    }
                }
            }
            switch (alt220) {
                case 1 :
                    // antlr3/PLSQL3.g:795:5: alias
                    {
                    pushFollow(FOLLOW_alias_in_displayed_column4940);
                    alias849=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias849.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 136, displayed_column_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "displayed_column"


    public static class schema_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "schema_name"
    // antlr3/PLSQL3.g:798:1: schema_name : sql_identifier ;
    public final PLSQL3Parser.schema_name_return schema_name() throws RecognitionException {
        PLSQL3Parser.schema_name_return retval = new PLSQL3Parser.schema_name_return();
        retval.start = input.LT(1);

        int schema_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_identifier_return sql_identifier850 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

            // antlr3/PLSQL3.g:799:2: ( sql_identifier )
            // antlr3/PLSQL3.g:799:4: sql_identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_schema_name4954);
            sql_identifier850=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier850.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 137, schema_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "schema_name"


    public static class table_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_name"
    // antlr3/PLSQL3.g:802:1: table_name : sql_identifier ;
    public final PLSQL3Parser.table_name_return table_name() throws RecognitionException {
        PLSQL3Parser.table_name_return retval = new PLSQL3Parser.table_name_return();
        retval.start = input.LT(1);

        int table_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_identifier_return sql_identifier851 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

            // antlr3/PLSQL3.g:803:2: ( sql_identifier )
            // antlr3/PLSQL3.g:803:4: sql_identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_table_name4965);
            sql_identifier851=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier851.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 138, table_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_name"


    public static class nested_expressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_expressions"
    // antlr3/PLSQL3.g:806:1: nested_expressions : nested_expression ( COMMA nested_expression )* ;
    public final PLSQL3Parser.nested_expressions_return nested_expressions() throws RecognitionException {
        PLSQL3Parser.nested_expressions_return retval = new PLSQL3Parser.nested_expressions_return();
        retval.start = input.LT(1);

        int nested_expressions_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA853=null;
        PLSQL3Parser.nested_expression_return nested_expression852 =null;

        PLSQL3Parser.nested_expression_return nested_expression854 =null;


        Object COMMA853_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

            // antlr3/PLSQL3.g:807:2: ( nested_expression ( COMMA nested_expression )* )
            // antlr3/PLSQL3.g:807:4: nested_expression ( COMMA nested_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_nested_expression_in_nested_expressions4976);
            nested_expression852=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression852.getTree());

            // antlr3/PLSQL3.g:807:22: ( COMMA nested_expression )*
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);

                if ( (LA221_0==COMMA) ) {
                    alt221=1;
                }


                switch (alt221) {
            	case 1 :
            	    // antlr3/PLSQL3.g:807:24: COMMA nested_expression
            	    {
            	    COMMA853=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_expressions4980); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA853_tree = 
            	    (Object)adaptor.create(COMMA853)
            	    ;
            	    adaptor.addChild(root_0, COMMA853_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expression_in_nested_expressions4982);
            	    nested_expression854=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression854.getTree());

            	    }
            	    break;

            	default :
            	    break loop221;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 139, nested_expressions_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_expressions"


    public static class nested_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_expression"
    // antlr3/PLSQL3.g:810:1: nested_expression : ({...}? sql_expression |{...}? plsql_expression );
    public final PLSQL3Parser.nested_expression_return nested_expression() throws RecognitionException {
        PLSQL3Parser.nested_expression_return retval = new PLSQL3Parser.nested_expression_return();
        retval.start = input.LT(1);

        int nested_expression_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_expression_return sql_expression855 =null;

        PLSQL3Parser.plsql_expression_return plsql_expression856 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

            // antlr3/PLSQL3.g:811:2: ({...}? sql_expression |{...}? plsql_expression )
            int alt222=2;
            switch ( input.LA(1) ) {
            case MINUS:
            case PLUS:
                {
                int LA222_1 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 1, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA222_2 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 2, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA222_3 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 3, input);

                    throw nvae;

                }
                }
                break;
            case 144:
                {
                int LA222_4 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 4, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA222_5 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 5, input);

                    throw nvae;

                }
                }
                break;
            case 81:
                {
                int LA222_6 = input.LA(2);

                if ( ((((synpred355_PLSQL3()&&synpred355_PLSQL3())&&( is_sql ))&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (((( is_sql )&&( is_sql ))&&( !is_sql ))) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 6, input);

                    throw nvae;

                }
                }
                break;
            case 65:
                {
                int LA222_7 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 7, input);

                    throw nvae;

                }
                }
                break;
            case 89:
            case 156:
                {
                int LA222_8 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 8, input);

                    throw nvae;

                }
                }
                break;
            case 151:
                {
                int LA222_9 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 9, input);

                    throw nvae;

                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA222_10 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 10, input);

                    throw nvae;

                }
                }
                break;
            case NUMBER:
                {
                int LA222_11 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 11, input);

                    throw nvae;

                }
                }
                break;
            case 120:
                {
                int LA222_12 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 12, input);

                    throw nvae;

                }
                }
                break;
            case 147:
                {
                int LA222_13 = input.LA(2);

                if ( (((synpred355_PLSQL3()&&synpred355_PLSQL3())&&(  is_sql ))) ) {
                    alt222=1;
                }
                else if ( (( !is_sql )) ) {
                    alt222=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 13, input);

                    throw nvae;

                }
                }
                break;
            case 118:
                {
                alt222=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;

            }

            switch (alt222) {
                case 1 :
                    // antlr3/PLSQL3.g:811:4: {...}? sql_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    if ( !((  is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", "  is_sql ");
                    }

                    pushFollow(FOLLOW_sql_expression_in_nested_expression4998);
                    sql_expression855=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression855.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:812:4: {...}? plsql_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    if ( !(( !is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", " !is_sql ");
                    }

                    pushFollow(FOLLOW_plsql_expression_in_nested_expression5005);
                    plsql_expression856=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression856.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 140, nested_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_expression"


    public static class plsql_condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_condition"
    // antlr3/PLSQL3.g:814:1: plsql_condition : expr_bool ;
    public final PLSQL3Parser.plsql_condition_return plsql_condition() throws RecognitionException {
        PLSQL3Parser.plsql_condition_return retval = new PLSQL3Parser.plsql_condition_return();
        retval.start = input.LT(1);

        int plsql_condition_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.expr_bool_return expr_bool857 =null;



         is_sql = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

            // antlr3/PLSQL3.g:816:2: ( expr_bool )
            // antlr3/PLSQL3.g:816:4: expr_bool
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_bool_in_plsql_condition5022);
            expr_bool857=expr_bool();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_bool857.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 141, plsql_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_condition"


    public static class plsql_expressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_expressions"
    // antlr3/PLSQL3.g:819:1: plsql_expressions : plsql_expression ( COMMA plsql_expression )* ;
    public final PLSQL3Parser.plsql_expressions_return plsql_expressions() throws RecognitionException {
        PLSQL3Parser.plsql_expressions_return retval = new PLSQL3Parser.plsql_expressions_return();
        retval.start = input.LT(1);

        int plsql_expressions_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA859=null;
        PLSQL3Parser.plsql_expression_return plsql_expression858 =null;

        PLSQL3Parser.plsql_expression_return plsql_expression860 =null;


        Object COMMA859_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

            // antlr3/PLSQL3.g:820:2: ( plsql_expression ( COMMA plsql_expression )* )
            // antlr3/PLSQL3.g:820:4: plsql_expression ( COMMA plsql_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_expression_in_plsql_expressions5033);
            plsql_expression858=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression858.getTree());

            // antlr3/PLSQL3.g:820:21: ( COMMA plsql_expression )*
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==COMMA) ) {
                    alt223=1;
                }


                switch (alt223) {
            	case 1 :
            	    // antlr3/PLSQL3.g:820:23: COMMA plsql_expression
            	    {
            	    COMMA859=(Token)match(input,COMMA,FOLLOW_COMMA_in_plsql_expressions5037); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA859_tree = 
            	    (Object)adaptor.create(COMMA859)
            	    ;
            	    adaptor.addChild(root_0, COMMA859_tree);
            	    }

            	    pushFollow(FOLLOW_plsql_expression_in_plsql_expressions5039);
            	    plsql_expression860=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression860.getTree());

            	    }
            	    break;

            	default :
            	    break loop223;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 142, plsql_expressions_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_expressions"


    public static class plsql_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plsql_expression"
    // antlr3/PLSQL3.g:823:1: plsql_expression : expr_bool ;
    public final PLSQL3Parser.plsql_expression_return plsql_expression() throws RecognitionException {
        PLSQL3Parser.plsql_expression_return retval = new PLSQL3Parser.plsql_expression_return();
        retval.start = input.LT(1);

        int plsql_expression_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.expr_bool_return expr_bool861 =null;



         is_sql = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

            // antlr3/PLSQL3.g:825:2: ( expr_bool )
            // antlr3/PLSQL3.g:825:4: expr_bool
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_bool_in_plsql_expression5060);
            expr_bool861=expr_bool();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_bool861.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 143, plsql_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "plsql_expression"


    public static class expr_bool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_bool"
    // antlr3/PLSQL3.g:829:1: expr_bool : expr_or ( 'OR' expr_or )* ;
    public final PLSQL3Parser.expr_bool_return expr_bool() throws RecognitionException {
        PLSQL3Parser.expr_bool_return retval = new PLSQL3Parser.expr_bool_return();
        retval.start = input.LT(1);

        int expr_bool_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal863=null;
        PLSQL3Parser.expr_or_return expr_or862 =null;

        PLSQL3Parser.expr_or_return expr_or864 =null;


        Object string_literal863_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

            // antlr3/PLSQL3.g:830:2: ( expr_or ( 'OR' expr_or )* )
            // antlr3/PLSQL3.g:830:4: expr_or ( 'OR' expr_or )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_in_expr_bool5072);
            expr_or862=expr_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or862.getTree());

            // antlr3/PLSQL3.g:830:12: ( 'OR' expr_or )*
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);

                if ( (LA224_0==127) ) {
                    int LA224_2 = input.LA(2);

                    if ( (synpred357_PLSQL3()) ) {
                        alt224=1;
                    }


                }


                switch (alt224) {
            	case 1 :
            	    // antlr3/PLSQL3.g:830:14: 'OR' expr_or
            	    {
            	    string_literal863=(Token)match(input,127,FOLLOW_127_in_expr_bool5076); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal863_tree = 
            	    (Object)adaptor.create(string_literal863)
            	    ;
            	    adaptor.addChild(root_0, string_literal863_tree);
            	    }

            	    pushFollow(FOLLOW_expr_or_in_expr_bool5078);
            	    expr_or864=expr_or();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or864.getTree());

            	    }
            	    break;

            	default :
            	    break loop224;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 144, expr_bool_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_bool"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // antlr3/PLSQL3.g:832:1: expr_or : expr_and ( 'AND' expr_and )* ;
    public final PLSQL3Parser.expr_or_return expr_or() throws RecognitionException {
        PLSQL3Parser.expr_or_return retval = new PLSQL3Parser.expr_or_return();
        retval.start = input.LT(1);

        int expr_or_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal866=null;
        PLSQL3Parser.expr_and_return expr_and865 =null;

        PLSQL3Parser.expr_and_return expr_and867 =null;


        Object string_literal866_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

            // antlr3/PLSQL3.g:833:2: ( expr_and ( 'AND' expr_and )* )
            // antlr3/PLSQL3.g:833:4: expr_and ( 'AND' expr_and )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_in_expr_or5091);
            expr_and865=expr_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_and865.getTree());

            // antlr3/PLSQL3.g:833:13: ( 'AND' expr_and )*
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==51) ) {
                    int LA225_2 = input.LA(2);

                    if ( (synpred358_PLSQL3()) ) {
                        alt225=1;
                    }


                }


                switch (alt225) {
            	case 1 :
            	    // antlr3/PLSQL3.g:833:15: 'AND' expr_and
            	    {
            	    string_literal866=(Token)match(input,51,FOLLOW_51_in_expr_or5095); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal866_tree = 
            	    (Object)adaptor.create(string_literal866)
            	    ;
            	    adaptor.addChild(root_0, string_literal866_tree);
            	    }

            	    pushFollow(FOLLOW_expr_and_in_expr_or5097);
            	    expr_and867=expr_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_and867.getTree());

            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 145, expr_or_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // antlr3/PLSQL3.g:835:1: expr_and : ( 'NOT' )? expr_not ;
    public final PLSQL3Parser.expr_and_return expr_and() throws RecognitionException {
        PLSQL3Parser.expr_and_return retval = new PLSQL3Parser.expr_and_return();
        retval.start = input.LT(1);

        int expr_and_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal868=null;
        PLSQL3Parser.expr_not_return expr_not869 =null;


        Object string_literal868_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

            // antlr3/PLSQL3.g:836:2: ( ( 'NOT' )? expr_not )
            // antlr3/PLSQL3.g:836:4: ( 'NOT' )? expr_not
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:836:4: ( 'NOT' )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==118) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // antlr3/PLSQL3.g:836:6: 'NOT'
                    {
                    string_literal868=(Token)match(input,118,FOLLOW_118_in_expr_and5112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal868_tree = 
                    (Object)adaptor.create(string_literal868)
                    ;
                    adaptor.addChild(root_0, string_literal868_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_in_expr_and5117);
            expr_not869=expr_not();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_not869.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 146, expr_and_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // antlr3/PLSQL3.g:838:1: expr_not : expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )* ;
    public final PLSQL3Parser.expr_not_return expr_not() throws RecognitionException {
        PLSQL3Parser.expr_not_return retval = new PLSQL3Parser.expr_not_return();
        retval.start = input.LT(1);

        int expr_not_StartIndex = input.index();

        Object root_0 = null;

        Token FOUND_ATTR873=null;
        Token NOTFOUND_ATTR874=null;
        Token ISOPEN_ATTR875=null;
        Token ROWCOUNT_ATTR876=null;
        Token BULK_ROWCOUNT_ATTR877=null;
        Token string_literal878=null;
        Token string_literal879=null;
        Token string_literal880=null;
        Token string_literal881=null;
        Token string_literal882=null;
        Token string_literal884=null;
        Token string_literal885=null;
        Token string_literal887=null;
        Token string_literal889=null;
        Token string_literal890=null;
        Token LPAREN891=null;
        Token RPAREN893=null;
        PLSQL3Parser.expr_add_return expr_add870 =null;

        PLSQL3Parser.relational_op_return relational_op871 =null;

        PLSQL3Parser.expr_add_return expr_add872 =null;

        PLSQL3Parser.expr_add_return expr_add883 =null;

        PLSQL3Parser.expr_add_return expr_add886 =null;

        PLSQL3Parser.expr_add_return expr_add888 =null;

        PLSQL3Parser.nested_expressions_return nested_expressions892 =null;


        Object FOUND_ATTR873_tree=null;
        Object NOTFOUND_ATTR874_tree=null;
        Object ISOPEN_ATTR875_tree=null;
        Object ROWCOUNT_ATTR876_tree=null;
        Object BULK_ROWCOUNT_ATTR877_tree=null;
        Object string_literal878_tree=null;
        Object string_literal879_tree=null;
        Object string_literal880_tree=null;
        Object string_literal881_tree=null;
        Object string_literal882_tree=null;
        Object string_literal884_tree=null;
        Object string_literal885_tree=null;
        Object string_literal887_tree=null;
        Object string_literal889_tree=null;
        Object string_literal890_tree=null;
        Object LPAREN891_tree=null;
        Object RPAREN893_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

            // antlr3/PLSQL3.g:839:2: ( expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )* )
            // antlr3/PLSQL3.g:839:4: expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_in_expr_not5127);
            expr_add870=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add870.getTree());

            // antlr3/PLSQL3.g:840:3: ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )*
            loop231:
            do {
                int alt231=11;
                switch ( input.LA(1) ) {
                case EQ:
                    {
                    int LA231_2 = input.LA(2);

                    if ( (synpred360_PLSQL3()) ) {
                        alt231=1;
                    }


                    }
                    break;
                case FOUND_ATTR:
                    {
                    int LA231_3 = input.LA(2);

                    if ( (synpred361_PLSQL3()) ) {
                        alt231=2;
                    }


                    }
                    break;
                case NOTFOUND_ATTR:
                    {
                    int LA231_4 = input.LA(2);

                    if ( (synpred362_PLSQL3()) ) {
                        alt231=3;
                    }


                    }
                    break;
                case ISOPEN_ATTR:
                    {
                    int LA231_5 = input.LA(2);

                    if ( (synpred363_PLSQL3()) ) {
                        alt231=4;
                    }


                    }
                    break;
                case ROWCOUNT_ATTR:
                    {
                    int LA231_6 = input.LA(2);

                    if ( (synpred364_PLSQL3()) ) {
                        alt231=5;
                    }


                    }
                    break;
                case BULK_ROWCOUNT_ATTR:
                    {
                    int LA231_7 = input.LA(2);

                    if ( (synpred365_PLSQL3()) ) {
                        alt231=6;
                    }


                    }
                    break;
                case 106:
                    {
                    int LA231_8 = input.LA(2);

                    if ( (synpred367_PLSQL3()) ) {
                        alt231=7;
                    }


                    }
                    break;
                case 118:
                    {
                    int LA231_9 = input.LA(2);

                    if ( (synpred369_PLSQL3()) ) {
                        alt231=8;
                    }
                    else if ( (synpred371_PLSQL3()) ) {
                        alt231=9;
                    }
                    else if ( (synpred373_PLSQL3()) ) {
                        alt231=10;
                    }


                    }
                    break;
                case 107:
                    {
                    int LA231_10 = input.LA(2);

                    if ( (synpred369_PLSQL3()) ) {
                        alt231=8;
                    }


                    }
                    break;
                case 57:
                    {
                    int LA231_11 = input.LA(2);

                    if ( (synpred371_PLSQL3()) ) {
                        alt231=9;
                    }


                    }
                    break;
                case 99:
                    {
                    int LA231_12 = input.LA(2);

                    if ( (synpred373_PLSQL3()) ) {
                        alt231=10;
                    }


                    }
                    break;
                case GEQ:
                case GTH:
                case LEQ:
                case LTH:
                case NOT_EQ:
                    {
                    int LA231_13 = input.LA(2);

                    if ( (synpred360_PLSQL3()) ) {
                        alt231=1;
                    }


                    }
                    break;

                }

                switch (alt231) {
            	case 1 :
            	    // antlr3/PLSQL3.g:840:5: relational_op expr_add
            	    {
            	    pushFollow(FOLLOW_relational_op_in_expr_not5134);
            	    relational_op871=relational_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op871.getTree());

            	    pushFollow(FOLLOW_expr_add_in_expr_not5136);
            	    expr_add872=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add872.getTree());

            	    }
            	    break;
            	case 2 :
            	    // antlr3/PLSQL3.g:841:5: FOUND_ATTR
            	    {
            	    FOUND_ATTR873=(Token)match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_expr_not5142); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOUND_ATTR873_tree = 
            	    (Object)adaptor.create(FOUND_ATTR873)
            	    ;
            	    adaptor.addChild(root_0, FOUND_ATTR873_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // antlr3/PLSQL3.g:841:18: NOTFOUND_ATTR
            	    {
            	    NOTFOUND_ATTR874=(Token)match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_expr_not5146); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NOTFOUND_ATTR874_tree = 
            	    (Object)adaptor.create(NOTFOUND_ATTR874)
            	    ;
            	    adaptor.addChild(root_0, NOTFOUND_ATTR874_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // antlr3/PLSQL3.g:841:34: ISOPEN_ATTR
            	    {
            	    ISOPEN_ATTR875=(Token)match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_expr_not5150); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ISOPEN_ATTR875_tree = 
            	    (Object)adaptor.create(ISOPEN_ATTR875)
            	    ;
            	    adaptor.addChild(root_0, ISOPEN_ATTR875_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // antlr3/PLSQL3.g:841:48: ROWCOUNT_ATTR
            	    {
            	    ROWCOUNT_ATTR876=(Token)match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_expr_not5154); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ROWCOUNT_ATTR876_tree = 
            	    (Object)adaptor.create(ROWCOUNT_ATTR876)
            	    ;
            	    adaptor.addChild(root_0, ROWCOUNT_ATTR876_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // antlr3/PLSQL3.g:841:64: BULK_ROWCOUNT_ATTR
            	    {
            	    BULK_ROWCOUNT_ATTR877=(Token)match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not5158); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BULK_ROWCOUNT_ATTR877_tree = 
            	    (Object)adaptor.create(BULK_ROWCOUNT_ATTR877)
            	    ;
            	    adaptor.addChild(root_0, BULK_ROWCOUNT_ATTR877_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // antlr3/PLSQL3.g:842:5: 'IS' ( 'NOT' )? 'NULL'
            	    {
            	    string_literal878=(Token)match(input,106,FOLLOW_106_in_expr_not5164); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal878_tree = 
            	    (Object)adaptor.create(string_literal878)
            	    ;
            	    adaptor.addChild(root_0, string_literal878_tree);
            	    }

            	    // antlr3/PLSQL3.g:842:10: ( 'NOT' )?
            	    int alt227=2;
            	    int LA227_0 = input.LA(1);

            	    if ( (LA227_0==118) ) {
            	        alt227=1;
            	    }
            	    switch (alt227) {
            	        case 1 :
            	            // antlr3/PLSQL3.g:842:12: 'NOT'
            	            {
            	            string_literal879=(Token)match(input,118,FOLLOW_118_in_expr_not5168); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal879_tree = 
            	            (Object)adaptor.create(string_literal879)
            	            ;
            	            adaptor.addChild(root_0, string_literal879_tree);
            	            }

            	            }
            	            break;

            	    }


            	    string_literal880=(Token)match(input,120,FOLLOW_120_in_expr_not5173); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal880_tree = 
            	    (Object)adaptor.create(string_literal880)
            	    ;
            	    adaptor.addChild(root_0, string_literal880_tree);
            	    }

            	    }
            	    break;
            	case 8 :
            	    // antlr3/PLSQL3.g:843:5: ( 'NOT' )? 'LIKE' expr_add
            	    {
            	    // antlr3/PLSQL3.g:843:5: ( 'NOT' )?
            	    int alt228=2;
            	    int LA228_0 = input.LA(1);

            	    if ( (LA228_0==118) ) {
            	        alt228=1;
            	    }
            	    switch (alt228) {
            	        case 1 :
            	            // antlr3/PLSQL3.g:843:7: 'NOT'
            	            {
            	            string_literal881=(Token)match(input,118,FOLLOW_118_in_expr_not5181); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal881_tree = 
            	            (Object)adaptor.create(string_literal881)
            	            ;
            	            adaptor.addChild(root_0, string_literal881_tree);
            	            }

            	            }
            	            break;

            	    }


            	    string_literal882=(Token)match(input,107,FOLLOW_107_in_expr_not5186); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal882_tree = 
            	    (Object)adaptor.create(string_literal882)
            	    ;
            	    adaptor.addChild(root_0, string_literal882_tree);
            	    }

            	    pushFollow(FOLLOW_expr_add_in_expr_not5188);
            	    expr_add883=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add883.getTree());

            	    }
            	    break;
            	case 9 :
            	    // antlr3/PLSQL3.g:844:5: ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add
            	    {
            	    // antlr3/PLSQL3.g:844:5: ( 'NOT' )?
            	    int alt229=2;
            	    int LA229_0 = input.LA(1);

            	    if ( (LA229_0==118) ) {
            	        alt229=1;
            	    }
            	    switch (alt229) {
            	        case 1 :
            	            // antlr3/PLSQL3.g:844:7: 'NOT'
            	            {
            	            string_literal884=(Token)match(input,118,FOLLOW_118_in_expr_not5196); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal884_tree = 
            	            (Object)adaptor.create(string_literal884)
            	            ;
            	            adaptor.addChild(root_0, string_literal884_tree);
            	            }

            	            }
            	            break;

            	    }


            	    string_literal885=(Token)match(input,57,FOLLOW_57_in_expr_not5201); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal885_tree = 
            	    (Object)adaptor.create(string_literal885)
            	    ;
            	    adaptor.addChild(root_0, string_literal885_tree);
            	    }

            	    pushFollow(FOLLOW_expr_add_in_expr_not5203);
            	    expr_add886=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add886.getTree());

            	    string_literal887=(Token)match(input,51,FOLLOW_51_in_expr_not5205); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal887_tree = 
            	    (Object)adaptor.create(string_literal887)
            	    ;
            	    adaptor.addChild(root_0, string_literal887_tree);
            	    }

            	    pushFollow(FOLLOW_expr_add_in_expr_not5207);
            	    expr_add888=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add888.getTree());

            	    }
            	    break;
            	case 10 :
            	    // antlr3/PLSQL3.g:845:5: ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN
            	    {
            	    // antlr3/PLSQL3.g:845:5: ( 'NOT' )?
            	    int alt230=2;
            	    int LA230_0 = input.LA(1);

            	    if ( (LA230_0==118) ) {
            	        alt230=1;
            	    }
            	    switch (alt230) {
            	        case 1 :
            	            // antlr3/PLSQL3.g:845:7: 'NOT'
            	            {
            	            string_literal889=(Token)match(input,118,FOLLOW_118_in_expr_not5215); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal889_tree = 
            	            (Object)adaptor.create(string_literal889)
            	            ;
            	            adaptor.addChild(root_0, string_literal889_tree);
            	            }

            	            }
            	            break;

            	    }


            	    string_literal890=(Token)match(input,99,FOLLOW_99_in_expr_not5220); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal890_tree = 
            	    (Object)adaptor.create(string_literal890)
            	    ;
            	    adaptor.addChild(root_0, string_literal890_tree);
            	    }

            	    LPAREN891=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expr_not5222); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LPAREN891_tree = 
            	    (Object)adaptor.create(LPAREN891)
            	    ;
            	    adaptor.addChild(root_0, LPAREN891_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expressions_in_expr_not5224);
            	    nested_expressions892=nested_expressions();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expressions892.getTree());

            	    RPAREN893=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expr_not5226); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RPAREN893_tree = 
            	    (Object)adaptor.create(RPAREN893)
            	    ;
            	    adaptor.addChild(root_0, RPAREN893_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 147, expr_not_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class boolean_literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "boolean_literal"
    // antlr3/PLSQL3.g:849:1: boolean_literal : ( 'TRUE' | 'FALSE' );
    public final PLSQL3Parser.boolean_literal_return boolean_literal() throws RecognitionException {
        PLSQL3Parser.boolean_literal_return retval = new PLSQL3Parser.boolean_literal_return();
        retval.start = input.LT(1);

        int boolean_literal_StartIndex = input.index();

        Object root_0 = null;

        Token set894=null;

        Object set894_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

            // antlr3/PLSQL3.g:850:2: ( 'TRUE' | 'FALSE' )
            // antlr3/PLSQL3.g:
            {
            root_0 = (Object)adaptor.nil();


            set894=(Token)input.LT(1);

            if ( input.LA(1)==89||input.LA(1)==156 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set894)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 148, boolean_literal_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "boolean_literal"


    public static class sql_expressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_expressions"
    // antlr3/PLSQL3.g:853:1: sql_expressions : sql_expression ( COMMA sql_expression )* ;
    public final PLSQL3Parser.sql_expressions_return sql_expressions() throws RecognitionException {
        PLSQL3Parser.sql_expressions_return retval = new PLSQL3Parser.sql_expressions_return();
        retval.start = input.LT(1);

        int sql_expressions_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA896=null;
        PLSQL3Parser.sql_expression_return sql_expression895 =null;

        PLSQL3Parser.sql_expression_return sql_expression897 =null;


        Object COMMA896_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

            // antlr3/PLSQL3.g:854:2: ( sql_expression ( COMMA sql_expression )* )
            // antlr3/PLSQL3.g:854:4: sql_expression ( COMMA sql_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_sql_expressions5257);
            sql_expression895=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression895.getTree());

            // antlr3/PLSQL3.g:854:19: ( COMMA sql_expression )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==COMMA) ) {
                    int LA232_2 = input.LA(2);

                    if ( (synpred375_PLSQL3()) ) {
                        alt232=1;
                    }


                }


                switch (alt232) {
            	case 1 :
            	    // antlr3/PLSQL3.g:854:21: COMMA sql_expression
            	    {
            	    COMMA896=(Token)match(input,COMMA,FOLLOW_COMMA_in_sql_expressions5261); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA896_tree = 
            	    (Object)adaptor.create(COMMA896)
            	    ;
            	    adaptor.addChild(root_0, COMMA896_tree);
            	    }

            	    pushFollow(FOLLOW_sql_expression_in_sql_expressions5263);
            	    sql_expression897=sql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression897.getTree());

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 149, sql_expressions_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_expressions"


    public static class sql_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_expression"
    // antlr3/PLSQL3.g:856:1: sql_expression : expr_add ;
    public final PLSQL3Parser.sql_expression_return sql_expression() throws RecognitionException {
        PLSQL3Parser.sql_expression_return retval = new PLSQL3Parser.sql_expression_return();
        retval.start = input.LT(1);

        int sql_expression_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.expr_add_return expr_add898 =null;



         is_sql = true; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

            // antlr3/PLSQL3.g:858:2: ( expr_add )
            // antlr3/PLSQL3.g:858:4: expr_add
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_in_sql_expression5283);
            expr_add898=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add898.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 150, sql_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_expression"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // antlr3/PLSQL3.g:860:1: expr_add : expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )* ;
    public final PLSQL3Parser.expr_add_return expr_add() throws RecognitionException {
        PLSQL3Parser.expr_add_return retval = new PLSQL3Parser.expr_add_return();
        retval.start = input.LT(1);

        int expr_add_StartIndex = input.index();

        Object root_0 = null;

        Token set900=null;
        PLSQL3Parser.expr_mul_return expr_mul899 =null;

        PLSQL3Parser.expr_mul_return expr_mul901 =null;


        Object set900_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

            // antlr3/PLSQL3.g:861:2: ( expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )* )
            // antlr3/PLSQL3.g:861:4: expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mul_in_expr_add5293);
            expr_mul899=expr_mul();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_mul899.getTree());

            // antlr3/PLSQL3.g:861:13: ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )*
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==MINUS||LA233_0==PLUS) ) {
                    int LA233_2 = input.LA(2);

                    if ( (synpred378_PLSQL3()) ) {
                        alt233=1;
                    }


                }
                else if ( (LA233_0==DOUBLEVERTBAR) ) {
                    int LA233_3 = input.LA(2);

                    if ( (synpred378_PLSQL3()) ) {
                        alt233=1;
                    }


                }


                switch (alt233) {
            	case 1 :
            	    // antlr3/PLSQL3.g:861:15: ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul
            	    {
            	    set900=(Token)input.LT(1);

            	    if ( input.LA(1)==DOUBLEVERTBAR||input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set900)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_expr_mul_in_expr_add5311);
            	    expr_mul901=expr_mul();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_mul901.getTree());

            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 151, expr_add_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mul_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mul"
    // antlr3/PLSQL3.g:863:1: expr_mul : expr_sign ( ( ASTERISK | DIVIDE ) expr_sign )* ;
    public final PLSQL3Parser.expr_mul_return expr_mul() throws RecognitionException {
        PLSQL3Parser.expr_mul_return retval = new PLSQL3Parser.expr_mul_return();
        retval.start = input.LT(1);

        int expr_mul_StartIndex = input.index();

        Object root_0 = null;

        Token set903=null;
        PLSQL3Parser.expr_sign_return expr_sign902 =null;

        PLSQL3Parser.expr_sign_return expr_sign904 =null;


        Object set903_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

            // antlr3/PLSQL3.g:864:2: ( expr_sign ( ( ASTERISK | DIVIDE ) expr_sign )* )
            // antlr3/PLSQL3.g:864:4: expr_sign ( ( ASTERISK | DIVIDE ) expr_sign )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_sign_in_expr_mul5324);
            expr_sign902=expr_sign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_sign902.getTree());

            // antlr3/PLSQL3.g:864:14: ( ( ASTERISK | DIVIDE ) expr_sign )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==ASTERISK||LA234_0==DIVIDE) ) {
                    int LA234_2 = input.LA(2);

                    if ( (synpred380_PLSQL3()) ) {
                        alt234=1;
                    }


                }


                switch (alt234) {
            	case 1 :
            	    // antlr3/PLSQL3.g:864:16: ( ASTERISK | DIVIDE ) expr_sign
            	    {
            	    set903=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set903)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_expr_sign_in_expr_mul5338);
            	    expr_sign904=expr_sign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_sign904.getTree());

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 152, expr_mul_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_mul"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // antlr3/PLSQL3.g:866:1: expr_sign : ( PLUS | MINUS )? expr_pow ;
    public final PLSQL3Parser.expr_sign_return expr_sign() throws RecognitionException {
        PLSQL3Parser.expr_sign_return retval = new PLSQL3Parser.expr_sign_return();
        retval.start = input.LT(1);

        int expr_sign_StartIndex = input.index();

        Object root_0 = null;

        Token set905=null;
        PLSQL3Parser.expr_pow_return expr_pow906 =null;


        Object set905_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

            // antlr3/PLSQL3.g:867:2: ( ( PLUS | MINUS )? expr_pow )
            // antlr3/PLSQL3.g:867:4: ( PLUS | MINUS )? expr_pow
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:867:4: ( PLUS | MINUS )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==MINUS||LA235_0==PLUS) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // antlr3/PLSQL3.g:
                    {
                    set905=(Token)input.LT(1);

                    if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set905)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_pow_in_expr_sign5362);
            expr_pow906=expr_pow();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_pow906.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 153, expr_sign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_pow_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_pow"
    // antlr3/PLSQL3.g:869:1: expr_pow : expr_expr ( EXPONENT expr_expr )* ;
    public final PLSQL3Parser.expr_pow_return expr_pow() throws RecognitionException {
        PLSQL3Parser.expr_pow_return retval = new PLSQL3Parser.expr_pow_return();
        retval.start = input.LT(1);

        int expr_pow_StartIndex = input.index();

        Object root_0 = null;

        Token EXPONENT908=null;
        PLSQL3Parser.expr_expr_return expr_expr907 =null;

        PLSQL3Parser.expr_expr_return expr_expr909 =null;


        Object EXPONENT908_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

            // antlr3/PLSQL3.g:870:2: ( expr_expr ( EXPONENT expr_expr )* )
            // antlr3/PLSQL3.g:870:4: expr_expr ( EXPONENT expr_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_expr_in_expr_pow5372);
            expr_expr907=expr_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_expr907.getTree());

            // antlr3/PLSQL3.g:870:14: ( EXPONENT expr_expr )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==EXPONENT) ) {
                    int LA236_2 = input.LA(2);

                    if ( (synpred383_PLSQL3()) ) {
                        alt236=1;
                    }


                }


                switch (alt236) {
            	case 1 :
            	    // antlr3/PLSQL3.g:870:16: EXPONENT expr_expr
            	    {
            	    EXPONENT908=(Token)match(input,EXPONENT,FOLLOW_EXPONENT_in_expr_pow5376); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EXPONENT908_tree = 
            	    (Object)adaptor.create(EXPONENT908)
            	    ;
            	    adaptor.addChild(root_0, EXPONENT908_tree);
            	    }

            	    pushFollow(FOLLOW_expr_expr_in_expr_pow5378);
            	    expr_expr909=expr_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_expr909.getTree());

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 154, expr_pow_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_pow"


    public static class expr_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_expr"
    // antlr3/PLSQL3.g:872:1: expr_expr : ( ( expr_paren )=> expr_paren | ( function_expression )=> function_expression | ( case_expression )=> case_expression | ( cursor_expression )=> cursor_expression | ( simple_expression )=> simple_expression | ( select_expression )=> select_expression );
    public final PLSQL3Parser.expr_expr_return expr_expr() throws RecognitionException {
        PLSQL3Parser.expr_expr_return retval = new PLSQL3Parser.expr_expr_return();
        retval.start = input.LT(1);

        int expr_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.expr_paren_return expr_paren910 =null;

        PLSQL3Parser.function_expression_return function_expression911 =null;

        PLSQL3Parser.case_expression_return case_expression912 =null;

        PLSQL3Parser.cursor_expression_return cursor_expression913 =null;

        PLSQL3Parser.simple_expression_return simple_expression914 =null;

        PLSQL3Parser.select_expression_return select_expression915 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

            // antlr3/PLSQL3.g:873:2: ( ( expr_paren )=> expr_paren | ( function_expression )=> function_expression | ( case_expression )=> case_expression | ( cursor_expression )=> cursor_expression | ( simple_expression )=> simple_expression | ( select_expression )=> select_expression )
            int alt237=6;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==LPAREN) && (synpred384_PLSQL3())) {
                alt237=1;
            }
            else if ( (LA237_0==ID) ) {
                int LA237_2 = input.LA(2);

                if ( (LA237_2==LPAREN) && (synpred387_PLSQL3())) {
                    alt237=4;
                }
                else if ( (synpred385_PLSQL3()) ) {
                    alt237=2;
                }
                else if ( (synpred388_PLSQL3()) ) {
                    alt237=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA237_0==144) ) {
                int LA237_3 = input.LA(2);

                if ( (synpred385_PLSQL3()) ) {
                    alt237=2;
                }
                else if ( (synpred388_PLSQL3()) ) {
                    alt237=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA237_0==DOUBLEQUOTED_STRING) ) {
                int LA237_4 = input.LA(2);

                if ( (synpred385_PLSQL3()) ) {
                    alt237=2;
                }
                else if ( (synpred388_PLSQL3()) ) {
                    alt237=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA237_0==81) && (synpred385_PLSQL3())) {
                alt237=2;
            }
            else if ( (LA237_0==65) && (synpred386_PLSQL3())) {
                alt237=3;
            }
            else if ( (LA237_0==89||LA237_0==156) && (synpred388_PLSQL3())) {
                alt237=5;
            }
            else if ( (LA237_0==151) && (synpred388_PLSQL3())) {
                alt237=5;
            }
            else if ( (LA237_0==QUOTED_STRING) && (synpred388_PLSQL3())) {
                alt237=5;
            }
            else if ( (LA237_0==NUMBER) && (synpred388_PLSQL3())) {
                alt237=5;
            }
            else if ( (LA237_0==120) && (synpred388_PLSQL3())) {
                alt237=5;
            }
            else if ( (LA237_0==147) && (synpred389_PLSQL3())) {
                alt237=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;

            }
            switch (alt237) {
                case 1 :
                    // antlr3/PLSQL3.g:873:4: ( expr_paren )=> expr_paren
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_paren_in_expr_expr5399);
                    expr_paren910=expr_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_paren910.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:874:4: ( function_expression )=> function_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_function_expression_in_expr_expr5412);
                    function_expression911=function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_expression911.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:876:4: ( case_expression )=> case_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_expression_in_expr_expr5426);
                    case_expression912=case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_expression912.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:877:4: ( cursor_expression )=> cursor_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_expression_in_expr_expr5439);
                    cursor_expression913=cursor_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_expression913.getTree());

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:878:4: ( simple_expression )=> simple_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_in_expr_expr5452);
                    simple_expression914=simple_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression914.getTree());

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:879:4: ( select_expression )=> select_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_select_expression_in_expr_expr5465);
                    select_expression915=select_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression915.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 155, expr_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_expr"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // antlr3/PLSQL3.g:890:1: simple_expression : ( boolean_literal | 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR ) | ( column_spec )=> column_spec | QUOTED_STRING | NUMBER | 'NULL' );
    public final PLSQL3Parser.simple_expression_return simple_expression() throws RecognitionException {
        PLSQL3Parser.simple_expression_return retval = new PLSQL3Parser.simple_expression_return();
        retval.start = input.LT(1);

        int simple_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal917=null;
        Token set918=null;
        Token QUOTED_STRING920=null;
        Token NUMBER921=null;
        Token string_literal922=null;
        PLSQL3Parser.boolean_literal_return boolean_literal916 =null;

        PLSQL3Parser.column_spec_return column_spec919 =null;


        Object string_literal917_tree=null;
        Object set918_tree=null;
        Object QUOTED_STRING920_tree=null;
        Object NUMBER921_tree=null;
        Object string_literal922_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

            // antlr3/PLSQL3.g:891:2: ( boolean_literal | 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR ) | ( column_spec )=> column_spec | QUOTED_STRING | NUMBER | 'NULL' )
            int alt238=6;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==89||LA238_0==156) ) {
                alt238=1;
            }
            else if ( (LA238_0==151) ) {
                alt238=2;
            }
            else if ( (LA238_0==DOUBLEQUOTED_STRING||LA238_0==ID) && (synpred396_PLSQL3())) {
                alt238=3;
            }
            else if ( (LA238_0==144) && (synpred396_PLSQL3())) {
                alt238=3;
            }
            else if ( (LA238_0==QUOTED_STRING) ) {
                alt238=4;
            }
            else if ( (LA238_0==NUMBER) ) {
                alt238=5;
            }
            else if ( (LA238_0==120) ) {
                alt238=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;

            }
            switch (alt238) {
                case 1 :
                    // antlr3/PLSQL3.g:891:4: boolean_literal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_boolean_literal_in_simple_expression5484);
                    boolean_literal916=boolean_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_literal916.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:892:4: 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR )
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal917=(Token)match(input,151,FOLLOW_151_in_simple_expression5489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal917_tree = 
                    (Object)adaptor.create(string_literal917)
                    ;
                    adaptor.addChild(root_0, string_literal917_tree);
                    }

                    set918=(Token)input.LT(1);

                    if ( input.LA(1)==BULK_ROWCOUNT_ATTR||input.LA(1)==FOUND_ATTR||input.LA(1)==ISOPEN_ATTR||input.LA(1)==NOTFOUND_ATTR||input.LA(1)==ROWCOUNT_ATTR ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set918)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:893:4: ( column_spec )=> column_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_column_spec_in_simple_expression5524);
                    column_spec919=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec919.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:894:4: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTED_STRING920=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_simple_expression5529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING920_tree = 
                    (Object)adaptor.create(QUOTED_STRING920)
                    ;
                    adaptor.addChild(root_0, QUOTED_STRING920_tree);
                    }

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:895:4: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER921=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_simple_expression5534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER921_tree = 
                    (Object)adaptor.create(NUMBER921)
                    ;
                    adaptor.addChild(root_0, NUMBER921_tree);
                    }

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:899:4: 'NULL'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal922=(Token)match(input,120,FOLLOW_120_in_simple_expression5542); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal922_tree = 
                    (Object)adaptor.create(string_literal922)
                    ;
                    adaptor.addChild(root_0, string_literal922_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 156, simple_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class compound_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compound_expression"
    // antlr3/PLSQL3.g:901:1: compound_expression : expr_prior ;
    public final PLSQL3Parser.compound_expression_return compound_expression() throws RecognitionException {
        PLSQL3Parser.compound_expression_return retval = new PLSQL3Parser.compound_expression_return();
        retval.start = input.LT(1);

        int compound_expression_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.expr_prior_return expr_prior923 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

            // antlr3/PLSQL3.g:904:2: ( expr_prior )
            // antlr3/PLSQL3.g:904:4: expr_prior
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_prior_in_compound_expression5554);
            expr_prior923=expr_prior();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_prior923.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 157, compound_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compound_expression"


    public static class expr_paren_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_paren"
    // antlr3/PLSQL3.g:908:1: expr_paren : LPAREN nested_expression RPAREN ;
    public final PLSQL3Parser.expr_paren_return expr_paren() throws RecognitionException {
        PLSQL3Parser.expr_paren_return retval = new PLSQL3Parser.expr_paren_return();
        retval.start = input.LT(1);

        int expr_paren_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN924=null;
        Token RPAREN926=null;
        PLSQL3Parser.nested_expression_return nested_expression925 =null;


        Object LPAREN924_tree=null;
        Object RPAREN926_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

            // antlr3/PLSQL3.g:909:2: ( LPAREN nested_expression RPAREN )
            // antlr3/PLSQL3.g:909:4: LPAREN nested_expression RPAREN
            {
            root_0 = (Object)adaptor.nil();


            LPAREN924=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expr_paren5566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN924_tree = 
            (Object)adaptor.create(LPAREN924)
            ;
            adaptor.addChild(root_0, LPAREN924_tree);
            }

            pushFollow(FOLLOW_nested_expression_in_expr_paren5568);
            nested_expression925=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression925.getTree());

            RPAREN926=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expr_paren5570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN926_tree = 
            (Object)adaptor.create(RPAREN926)
            ;
            adaptor.addChild(root_0, RPAREN926_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 158, expr_paren_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_paren"


    public static class expr_prior_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_prior"
    // antlr3/PLSQL3.g:911:1: expr_prior : 'PRIOR' expr_add ;
    public final PLSQL3Parser.expr_prior_return expr_prior() throws RecognitionException {
        PLSQL3Parser.expr_prior_return retval = new PLSQL3Parser.expr_prior_return();
        retval.start = input.LT(1);

        int expr_prior_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal927=null;
        PLSQL3Parser.expr_add_return expr_add928 =null;


        Object string_literal927_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

            // antlr3/PLSQL3.g:912:2: ( 'PRIOR' expr_add )
            // antlr3/PLSQL3.g:912:4: 'PRIOR' expr_add
            {
            root_0 = (Object)adaptor.nil();


            string_literal927=(Token)match(input,134,FOLLOW_134_in_expr_prior5580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal927_tree = 
            (Object)adaptor.create(string_literal927)
            ;
            adaptor.addChild(root_0, string_literal927_tree);
            }

            pushFollow(FOLLOW_expr_add_in_expr_prior5582);
            expr_add928=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add928.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 159, expr_prior_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr_prior"


    public static class case_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expression"
    // antlr3/PLSQL3.g:914:1: case_expression : 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END' ;
    public final PLSQL3Parser.case_expression_return case_expression() throws RecognitionException {
        PLSQL3Parser.case_expression_return retval = new PLSQL3Parser.case_expression_return();
        retval.start = input.LT(1);

        int case_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal929=null;
        Token string_literal933=null;
        PLSQL3Parser.simple_case_expression_return simple_case_expression930 =null;

        PLSQL3Parser.searched_case_expression_return searched_case_expression931 =null;

        PLSQL3Parser.else_case_expression_return else_case_expression932 =null;


        Object string_literal929_tree=null;
        Object string_literal933_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

            // antlr3/PLSQL3.g:915:2: ( 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END' )
            // antlr3/PLSQL3.g:915:4: 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END'
            {
            root_0 = (Object)adaptor.nil();


            string_literal929=(Token)match(input,65,FOLLOW_65_in_case_expression5592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal929_tree = 
            (Object)adaptor.create(string_literal929)
            ;
            adaptor.addChild(root_0, string_literal929_tree);
            }

            // antlr3/PLSQL3.g:915:11: ( simple_case_expression | searched_case_expression )
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==DOUBLEQUOTED_STRING||LA239_0==ID||LA239_0==LPAREN||LA239_0==MINUS||LA239_0==NUMBER||LA239_0==PLUS||LA239_0==QUOTED_STRING||LA239_0==65||LA239_0==81||LA239_0==89||LA239_0==118||LA239_0==120||LA239_0==144||LA239_0==147||LA239_0==151||LA239_0==156) ) {
                alt239=1;
            }
            else if ( (LA239_0==164) ) {
                alt239=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;

            }
            switch (alt239) {
                case 1 :
                    // antlr3/PLSQL3.g:915:13: simple_case_expression
                    {
                    pushFollow(FOLLOW_simple_case_expression_in_case_expression5596);
                    simple_case_expression930=simple_case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_expression930.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:915:38: searched_case_expression
                    {
                    pushFollow(FOLLOW_searched_case_expression_in_case_expression5600);
                    searched_case_expression931=searched_case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_expression931.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:915:65: ( else_case_expression )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==83) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // antlr3/PLSQL3.g:915:67: else_case_expression
                    {
                    pushFollow(FOLLOW_else_case_expression_in_case_expression5606);
                    else_case_expression932=else_case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_case_expression932.getTree());

                    }
                    break;

            }


            string_literal933=(Token)match(input,85,FOLLOW_85_in_case_expression5611); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal933_tree = 
            (Object)adaptor.create(string_literal933)
            ;
            adaptor.addChild(root_0, string_literal933_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 160, case_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "case_expression"


    public static class simple_case_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_case_expression"
    // antlr3/PLSQL3.g:917:1: simple_case_expression : nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+ ;
    public final PLSQL3Parser.simple_case_expression_return simple_case_expression() throws RecognitionException {
        PLSQL3Parser.simple_case_expression_return retval = new PLSQL3Parser.simple_case_expression_return();
        retval.start = input.LT(1);

        int simple_case_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal935=null;
        Token string_literal937=null;
        PLSQL3Parser.nested_expression_return nested_expression934 =null;

        PLSQL3Parser.nested_expression_return nested_expression936 =null;

        PLSQL3Parser.nested_expression_return nested_expression938 =null;


        Object string_literal935_tree=null;
        Object string_literal937_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

            // antlr3/PLSQL3.g:918:2: ( nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+ )
            // antlr3/PLSQL3.g:918:4: nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_nested_expression_in_simple_case_expression5621);
            nested_expression934=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression934.getTree());

            // antlr3/PLSQL3.g:918:22: ( 'WHEN' nested_expression 'THEN' nested_expression )+
            int cnt241=0;
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==164) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // antlr3/PLSQL3.g:918:24: 'WHEN' nested_expression 'THEN' nested_expression
            	    {
            	    string_literal935=(Token)match(input,164,FOLLOW_164_in_simple_case_expression5625); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal935_tree = 
            	    (Object)adaptor.create(string_literal935)
            	    ;
            	    adaptor.addChild(root_0, string_literal935_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression5627);
            	    nested_expression936=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression936.getTree());

            	    string_literal937=(Token)match(input,154,FOLLOW_154_in_simple_case_expression5629); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal937_tree = 
            	    (Object)adaptor.create(string_literal937)
            	    ;
            	    adaptor.addChild(root_0, string_literal937_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression5631);
            	    nested_expression938=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression938.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt241 >= 1 ) break loop241;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(241, input);
                        throw eee;
                }
                cnt241++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 161, simple_case_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simple_case_expression"


    public static class searched_case_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "searched_case_expression"
    // antlr3/PLSQL3.g:920:1: searched_case_expression : ( 'WHEN' nested_condition 'THEN' nested_expression )+ ;
    public final PLSQL3Parser.searched_case_expression_return searched_case_expression() throws RecognitionException {
        PLSQL3Parser.searched_case_expression_return retval = new PLSQL3Parser.searched_case_expression_return();
        retval.start = input.LT(1);

        int searched_case_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal939=null;
        Token string_literal941=null;
        PLSQL3Parser.nested_condition_return nested_condition940 =null;

        PLSQL3Parser.nested_expression_return nested_expression942 =null;


        Object string_literal939_tree=null;
        Object string_literal941_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

            // antlr3/PLSQL3.g:921:2: ( ( 'WHEN' nested_condition 'THEN' nested_expression )+ )
            // antlr3/PLSQL3.g:921:4: ( 'WHEN' nested_condition 'THEN' nested_expression )+
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:921:4: ( 'WHEN' nested_condition 'THEN' nested_expression )+
            int cnt242=0;
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==164) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // antlr3/PLSQL3.g:921:6: 'WHEN' nested_condition 'THEN' nested_expression
            	    {
            	    string_literal939=(Token)match(input,164,FOLLOW_164_in_searched_case_expression5646); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal939_tree = 
            	    (Object)adaptor.create(string_literal939)
            	    ;
            	    adaptor.addChild(root_0, string_literal939_tree);
            	    }

            	    pushFollow(FOLLOW_nested_condition_in_searched_case_expression5648);
            	    nested_condition940=nested_condition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_condition940.getTree());

            	    string_literal941=(Token)match(input,154,FOLLOW_154_in_searched_case_expression5650); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal941_tree = 
            	    (Object)adaptor.create(string_literal941)
            	    ;
            	    adaptor.addChild(root_0, string_literal941_tree);
            	    }

            	    pushFollow(FOLLOW_nested_expression_in_searched_case_expression5652);
            	    nested_expression942=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression942.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt242 >= 1 ) break loop242;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(242, input);
                        throw eee;
                }
                cnt242++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 162, searched_case_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "searched_case_expression"


    public static class else_case_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_case_expression"
    // antlr3/PLSQL3.g:923:1: else_case_expression : 'ELSE' nested_expression ;
    public final PLSQL3Parser.else_case_expression_return else_case_expression() throws RecognitionException {
        PLSQL3Parser.else_case_expression_return retval = new PLSQL3Parser.else_case_expression_return();
        retval.start = input.LT(1);

        int else_case_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal943=null;
        PLSQL3Parser.nested_expression_return nested_expression944 =null;


        Object string_literal943_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

            // antlr3/PLSQL3.g:924:2: ( 'ELSE' nested_expression )
            // antlr3/PLSQL3.g:924:4: 'ELSE' nested_expression
            {
            root_0 = (Object)adaptor.nil();


            string_literal943=(Token)match(input,83,FOLLOW_83_in_else_case_expression5665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal943_tree = 
            (Object)adaptor.create(string_literal943)
            ;
            adaptor.addChild(root_0, string_literal943_tree);
            }

            pushFollow(FOLLOW_nested_expression_in_else_case_expression5667);
            nested_expression944=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression944.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 163, else_case_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "else_case_expression"


    public static class case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_statement"
    // antlr3/PLSQL3.g:926:1: case_statement : ( label_name )? 'CASE' ^ ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )? ;
    public final PLSQL3Parser.case_statement_return case_statement() throws RecognitionException {
        PLSQL3Parser.case_statement_return retval = new PLSQL3Parser.case_statement_return();
        retval.start = input.LT(1);

        int case_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal946=null;
        Token string_literal950=null;
        Token string_literal951=null;
        PLSQL3Parser.label_name_return label_name945 =null;

        PLSQL3Parser.simple_case_statement_return simple_case_statement947 =null;

        PLSQL3Parser.searched_case_statement_return searched_case_statement948 =null;

        PLSQL3Parser.else_case_statement_return else_case_statement949 =null;

        PLSQL3Parser.label_name_return label_name952 =null;


        Object string_literal946_tree=null;
        Object string_literal950_tree=null;
        Object string_literal951_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

            // antlr3/PLSQL3.g:927:2: ( ( label_name )? 'CASE' ^ ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )? )
            // antlr3/PLSQL3.g:927:4: ( label_name )? 'CASE' ^ ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:927:4: ( label_name )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==DOUBLEQUOTED_STRING||LA243_0==ID) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // antlr3/PLSQL3.g:927:6: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_case_statement5679);
                    label_name945=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name945.getTree());

                    }
                    break;

            }


            string_literal946=(Token)match(input,65,FOLLOW_65_in_case_statement5684); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal946_tree = 
            (Object)adaptor.create(string_literal946)
            ;
            root_0 = (Object)adaptor.becomeRoot(string_literal946_tree, root_0);
            }

            // antlr3/PLSQL3.g:927:28: ( simple_case_statement | searched_case_statement )
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==DOUBLEQUOTED_STRING||LA244_0==ID||LA244_0==LPAREN||LA244_0==MINUS||LA244_0==NUMBER||LA244_0==PLUS||LA244_0==QUOTED_STRING||LA244_0==65||LA244_0==81||LA244_0==89||LA244_0==118||LA244_0==120||LA244_0==144||LA244_0==147||LA244_0==151||LA244_0==156) ) {
                alt244=1;
            }
            else if ( (LA244_0==164) ) {
                alt244=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;

            }
            switch (alt244) {
                case 1 :
                    // antlr3/PLSQL3.g:927:30: simple_case_statement
                    {
                    pushFollow(FOLLOW_simple_case_statement_in_case_statement5689);
                    simple_case_statement947=simple_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement947.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:927:54: searched_case_statement
                    {
                    pushFollow(FOLLOW_searched_case_statement_in_case_statement5693);
                    searched_case_statement948=searched_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement948.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:927:80: ( else_case_statement )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==83) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // antlr3/PLSQL3.g:927:82: else_case_statement
                    {
                    pushFollow(FOLLOW_else_case_statement_in_case_statement5699);
                    else_case_statement949=else_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_case_statement949.getTree());

                    }
                    break;

            }


            string_literal950=(Token)match(input,85,FOLLOW_85_in_case_statement5704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal950_tree = 
            (Object)adaptor.create(string_literal950)
            ;
            adaptor.addChild(root_0, string_literal950_tree);
            }

            string_literal951=(Token)match(input,65,FOLLOW_65_in_case_statement5706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal951_tree = 
            (Object)adaptor.create(string_literal951)
            ;
            adaptor.addChild(root_0, string_literal951_tree);
            }

            // antlr3/PLSQL3.g:927:118: ( label_name )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==DOUBLEQUOTED_STRING||LA246_0==ID) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // antlr3/PLSQL3.g:927:120: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_case_statement5710);
                    label_name952=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name952.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 164, case_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "case_statement"


    public static class simple_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_case_statement"
    // antlr3/PLSQL3.g:929:1: simple_case_statement : plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ ;
    public final PLSQL3Parser.simple_case_statement_return simple_case_statement() throws RecognitionException {
        PLSQL3Parser.simple_case_statement_return retval = new PLSQL3Parser.simple_case_statement_return();
        retval.start = input.LT(1);

        int simple_case_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal954=null;
        Token string_literal956=null;
        PLSQL3Parser.plsql_expression_return plsql_expression953 =null;

        PLSQL3Parser.plsql_expression_return plsql_expression955 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements957 =null;


        Object string_literal954_tree=null;
        Object string_literal956_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

            // antlr3/PLSQL3.g:930:2: ( plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ )
            // antlr3/PLSQL3.g:930:4: plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_plsql_expression_in_simple_case_statement5723);
            plsql_expression953=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression953.getTree());

            // antlr3/PLSQL3.g:930:21: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            int cnt247=0;
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);

                if ( (LA247_0==164) ) {
                    alt247=1;
                }


                switch (alt247) {
            	case 1 :
            	    // antlr3/PLSQL3.g:930:23: 'WHEN' plsql_expression 'THEN' seq_of_statements
            	    {
            	    string_literal954=(Token)match(input,164,FOLLOW_164_in_simple_case_statement5727); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal954_tree = 
            	    (Object)adaptor.create(string_literal954)
            	    ;
            	    adaptor.addChild(root_0, string_literal954_tree);
            	    }

            	    pushFollow(FOLLOW_plsql_expression_in_simple_case_statement5729);
            	    plsql_expression955=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression955.getTree());

            	    string_literal956=(Token)match(input,154,FOLLOW_154_in_simple_case_statement5731); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal956_tree = 
            	    (Object)adaptor.create(string_literal956)
            	    ;
            	    adaptor.addChild(root_0, string_literal956_tree);
            	    }

            	    pushFollow(FOLLOW_seq_of_statements_in_simple_case_statement5733);
            	    seq_of_statements957=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements957.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt247 >= 1 ) break loop247;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(247, input);
                        throw eee;
                }
                cnt247++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 165, simple_case_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simple_case_statement"


    public static class searched_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "searched_case_statement"
    // antlr3/PLSQL3.g:932:1: searched_case_statement : ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ ;
    public final PLSQL3Parser.searched_case_statement_return searched_case_statement() throws RecognitionException {
        PLSQL3Parser.searched_case_statement_return retval = new PLSQL3Parser.searched_case_statement_return();
        retval.start = input.LT(1);

        int searched_case_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal958=null;
        Token string_literal960=null;
        PLSQL3Parser.plsql_expression_return plsql_expression959 =null;

        PLSQL3Parser.seq_of_statements_return seq_of_statements961 =null;


        Object string_literal958_tree=null;
        Object string_literal960_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

            // antlr3/PLSQL3.g:933:2: ( ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ )
            // antlr3/PLSQL3.g:933:4: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:933:4: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            int cnt248=0;
            loop248:
            do {
                int alt248=2;
                int LA248_0 = input.LA(1);

                if ( (LA248_0==164) ) {
                    alt248=1;
                }


                switch (alt248) {
            	case 1 :
            	    // antlr3/PLSQL3.g:933:6: 'WHEN' plsql_expression 'THEN' seq_of_statements
            	    {
            	    string_literal958=(Token)match(input,164,FOLLOW_164_in_searched_case_statement5748); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal958_tree = 
            	    (Object)adaptor.create(string_literal958)
            	    ;
            	    adaptor.addChild(root_0, string_literal958_tree);
            	    }

            	    pushFollow(FOLLOW_plsql_expression_in_searched_case_statement5750);
            	    plsql_expression959=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression959.getTree());

            	    string_literal960=(Token)match(input,154,FOLLOW_154_in_searched_case_statement5752); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal960_tree = 
            	    (Object)adaptor.create(string_literal960)
            	    ;
            	    adaptor.addChild(root_0, string_literal960_tree);
            	    }

            	    pushFollow(FOLLOW_seq_of_statements_in_searched_case_statement5754);
            	    seq_of_statements961=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements961.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt248 >= 1 ) break loop248;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(248, input);
                        throw eee;
                }
                cnt248++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 166, searched_case_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "searched_case_statement"


    public static class else_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_case_statement"
    // antlr3/PLSQL3.g:935:1: else_case_statement : 'ELSE' seq_of_statements ;
    public final PLSQL3Parser.else_case_statement_return else_case_statement() throws RecognitionException {
        PLSQL3Parser.else_case_statement_return retval = new PLSQL3Parser.else_case_statement_return();
        retval.start = input.LT(1);

        int else_case_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal962=null;
        PLSQL3Parser.seq_of_statements_return seq_of_statements963 =null;


        Object string_literal962_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

            // antlr3/PLSQL3.g:936:2: ( 'ELSE' seq_of_statements )
            // antlr3/PLSQL3.g:936:4: 'ELSE' seq_of_statements
            {
            root_0 = (Object)adaptor.nil();


            string_literal962=(Token)match(input,83,FOLLOW_83_in_else_case_statement5767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal962_tree = 
            (Object)adaptor.create(string_literal962)
            ;
            adaptor.addChild(root_0, string_literal962_tree);
            }

            pushFollow(FOLLOW_seq_of_statements_in_else_case_statement5769);
            seq_of_statements963=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements963.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 167, else_case_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "else_case_statement"


    public static class cursor_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_expression"
    // antlr3/PLSQL3.g:938:1: cursor_expression : keyCURSOR LPAREN subquery RPAREN ;
    public final PLSQL3Parser.cursor_expression_return cursor_expression() throws RecognitionException {
        PLSQL3Parser.cursor_expression_return retval = new PLSQL3Parser.cursor_expression_return();
        retval.start = input.LT(1);

        int cursor_expression_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN965=null;
        Token RPAREN967=null;
        PLSQL3Parser.keyCURSOR_return keyCURSOR964 =null;

        PLSQL3Parser.subquery_return subquery966 =null;


        Object LPAREN965_tree=null;
        Object RPAREN967_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

            // antlr3/PLSQL3.g:939:2: ( keyCURSOR LPAREN subquery RPAREN )
            // antlr3/PLSQL3.g:939:4: keyCURSOR LPAREN subquery RPAREN
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyCURSOR_in_cursor_expression5779);
            keyCURSOR964=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURSOR964.getTree());

            LPAREN965=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_expression5781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN965_tree = 
            (Object)adaptor.create(LPAREN965)
            ;
            adaptor.addChild(root_0, LPAREN965_tree);
            }

            pushFollow(FOLLOW_subquery_in_cursor_expression5783);
            subquery966=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery966.getTree());

            RPAREN967=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_expression5785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN967_tree = 
            (Object)adaptor.create(RPAREN967)
            ;
            adaptor.addChild(root_0, RPAREN967_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 168, cursor_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cursor_expression"


    public static class datetime_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "datetime_expression"
    // antlr3/PLSQL3.g:941:1: datetime_expression : sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) ) ;
    public final PLSQL3Parser.datetime_expression_return datetime_expression() throws RecognitionException {
        PLSQL3Parser.datetime_expression_return retval = new PLSQL3Parser.datetime_expression_return();
        retval.start = input.LT(1);

        int datetime_expression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal969=null;
        PLSQL3Parser.sql_expression_return sql_expression968 =null;

        PLSQL3Parser.keyLOCAL_return keyLOCAL970 =null;

        PLSQL3Parser.keyTIME_return keyTIME971 =null;

        PLSQL3Parser.keyZONE_return keyZONE972 =null;

        PLSQL3Parser.keyDBTIMEZONE_return keyDBTIMEZONE973 =null;

        PLSQL3Parser.keySESSIONTIMEZONE_return keySESSIONTIMEZONE974 =null;

        PLSQL3Parser.sql_expression_return sql_expression975 =null;


        Object string_literal969_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

            // antlr3/PLSQL3.g:942:2: ( sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) ) )
            // antlr3/PLSQL3.g:942:4: sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_datetime_expression5795);
            sql_expression968=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression968.getTree());

            string_literal969=(Token)match(input,55,FOLLOW_55_in_datetime_expression5797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal969_tree = 
            (Object)adaptor.create(string_literal969)
            ;
            adaptor.addChild(root_0, string_literal969_tree);
            }

            // antlr3/PLSQL3.g:943:3: ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) )
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==ID) ) {
                int LA250_1 = input.LA(2);

                if ( (LA250_1==EOF) ) {
                    alt250=1;
                }
                else if ( (LA250_1==ID) ) {
                    alt250=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);

                throw nvae;

            }
            switch (alt250) {
                case 1 :
                    // antlr3/PLSQL3.g:943:5: keyLOCAL
                    {
                    pushFollow(FOLLOW_keyLOCAL_in_datetime_expression5803);
                    keyLOCAL970=keyLOCAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOCAL970.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:944:5: keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression )
                    {
                    pushFollow(FOLLOW_keyTIME_in_datetime_expression5809);
                    keyTIME971=keyTIME();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIME971.getTree());

                    pushFollow(FOLLOW_keyZONE_in_datetime_expression5811);
                    keyZONE972=keyZONE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyZONE972.getTree());

                    // antlr3/PLSQL3.g:944:21: ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression )
                    int alt249=3;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==ID) ) {
                        int LA249_1 = input.LA(2);

                        if ( ((((input.LT(1).getText().equalsIgnoreCase("DBTIMEZONE"))&&(input.LT(1).getText().equalsIgnoreCase("DBTIMEZONE")))&&synpred410_PLSQL3())) ) {
                            alt249=1;
                        }
                        else if ( ((((input.LT(1).getText().equalsIgnoreCase("SESSIONTIMEZONE"))&&(input.LT(1).getText().equalsIgnoreCase("SESSIONTIMEZONE")))&&synpred411_PLSQL3())) ) {
                            alt249=2;
                        }
                        else if ( (true) ) {
                            alt249=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 249, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA249_0==DOUBLEQUOTED_STRING||LA249_0==LPAREN||LA249_0==MINUS||LA249_0==NUMBER||LA249_0==PLUS||LA249_0==QUOTED_STRING||LA249_0==65||LA249_0==81||LA249_0==89||LA249_0==120||LA249_0==144||LA249_0==147||LA249_0==151||LA249_0==156) ) {
                        alt249=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 249, 0, input);

                        throw nvae;

                    }
                    switch (alt249) {
                        case 1 :
                            // antlr3/PLSQL3.g:944:23: keyDBTIMEZONE
                            {
                            pushFollow(FOLLOW_keyDBTIMEZONE_in_datetime_expression5815);
                            keyDBTIMEZONE973=keyDBTIMEZONE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDBTIMEZONE973.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:944:39: keySESSIONTIMEZONE
                            {
                            pushFollow(FOLLOW_keySESSIONTIMEZONE_in_datetime_expression5819);
                            keySESSIONTIMEZONE974=keySESSIONTIMEZONE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySESSIONTIMEZONE974.getTree());

                            }
                            break;
                        case 3 :
                            // antlr3/PLSQL3.g:944:60: sql_expression
                            {
                            pushFollow(FOLLOW_sql_expression_in_datetime_expression5823);
                            sql_expression975=sql_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression975.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 169, datetime_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "datetime_expression"


    public static class function_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_expression"
    // antlr3/PLSQL3.g:947:1: function_expression : ( function_call ( DOT nested_expression )? |{...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) ) );
    public final PLSQL3Parser.function_expression_return function_expression() throws RecognitionException {
        PLSQL3Parser.function_expression_return retval = new PLSQL3Parser.function_expression_return();
        retval.start = input.LT(1);

        int function_expression_StartIndex = input.index();

        Object root_0 = null;

        Token DOT977=null;
        Token LPAREN980=null;
        Token ASTERISK981=null;
        Token RPAREN983=null;
        Token string_literal984=null;
        Token LPAREN985=null;
        Token RPAREN987=null;
        PLSQL3Parser.function_call_return function_call976 =null;

        PLSQL3Parser.nested_expression_return nested_expression978 =null;

        PLSQL3Parser.keyCOUNT_return keyCOUNT979 =null;

        PLSQL3Parser.nested_expression_return nested_expression982 =null;

        PLSQL3Parser.nested_expression_return nested_expression986 =null;

        PLSQL3Parser.nested_expression_return nested_expression988 =null;


        Object DOT977_tree=null;
        Object LPAREN980_tree=null;
        Object ASTERISK981_tree=null;
        Object RPAREN983_tree=null;
        Object string_literal984_tree=null;
        Object LPAREN985_tree=null;
        Object RPAREN987_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

            // antlr3/PLSQL3.g:948:2: ( function_call ( DOT nested_expression )? |{...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) ) )
            int alt255=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA255_1 = input.LA(2);

                if ( (synpred413_PLSQL3()) ) {
                    alt255=1;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("COUNT"))&&(input.LT(1).getText().equalsIgnoreCase("COUNT")))&&( is_sql ))) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 1, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
            case 144:
                {
                alt255=1;
                }
                break;
            case 81:
                {
                alt255=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;

            }

            switch (alt255) {
                case 1 :
                    // antlr3/PLSQL3.g:948:4: function_call ( DOT nested_expression )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_function_call_in_function_expression5839);
                    function_call976=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call976.getTree());

                    // antlr3/PLSQL3.g:948:18: ( DOT nested_expression )?
                    int alt251=2;
                    int LA251_0 = input.LA(1);

                    if ( (LA251_0==DOT) ) {
                        alt251=1;
                    }
                    switch (alt251) {
                        case 1 :
                            // antlr3/PLSQL3.g:948:20: DOT nested_expression
                            {
                            DOT977=(Token)match(input,DOT,FOLLOW_DOT_in_function_expression5843); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT977_tree = 
                            (Object)adaptor.create(DOT977)
                            ;
                            adaptor.addChild(root_0, DOT977_tree);
                            }

                            pushFollow(FOLLOW_nested_expression_in_function_expression5845);
                            nested_expression978=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression978.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:949:4: {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) )
                    {
                    root_0 = (Object)adaptor.nil();


                    if ( !(( is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_expression", " is_sql ");
                    }

                    // antlr3/PLSQL3.g:950:3: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) )
                    int alt254=2;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==ID) ) {
                        alt254=1;
                    }
                    else if ( (LA254_0==81) ) {
                        alt254=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 254, 0, input);

                        throw nvae;

                    }
                    switch (alt254) {
                        case 1 :
                            // antlr3/PLSQL3.g:950:5: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
                            {
                            pushFollow(FOLLOW_keyCOUNT_in_function_expression5859);
                            keyCOUNT979=keyCOUNT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOUNT979.getTree());

                            LPAREN980=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression5861); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN980_tree = 
                            (Object)adaptor.create(LPAREN980)
                            ;
                            adaptor.addChild(root_0, LPAREN980_tree);
                            }

                            // antlr3/PLSQL3.g:950:21: ( ASTERISK | nested_expression )
                            int alt252=2;
                            int LA252_0 = input.LA(1);

                            if ( (LA252_0==ASTERISK) ) {
                                alt252=1;
                            }
                            else if ( (LA252_0==DOUBLEQUOTED_STRING||LA252_0==ID||LA252_0==LPAREN||LA252_0==MINUS||LA252_0==NUMBER||LA252_0==PLUS||LA252_0==QUOTED_STRING||LA252_0==65||LA252_0==81||LA252_0==89||LA252_0==118||LA252_0==120||LA252_0==144||LA252_0==147||LA252_0==151||LA252_0==156) ) {
                                alt252=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 252, 0, input);

                                throw nvae;

                            }
                            switch (alt252) {
                                case 1 :
                                    // antlr3/PLSQL3.g:950:23: ASTERISK
                                    {
                                    ASTERISK981=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_function_expression5865); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    ASTERISK981_tree = 
                                    (Object)adaptor.create(ASTERISK981)
                                    ;
                                    adaptor.addChild(root_0, ASTERISK981_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:950:34: nested_expression
                                    {
                                    pushFollow(FOLLOW_nested_expression_in_function_expression5869);
                                    nested_expression982=nested_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression982.getTree());

                                    }
                                    break;

                            }


                            RPAREN983=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression5873); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN983_tree = 
                            (Object)adaptor.create(RPAREN983)
                            ;
                            adaptor.addChild(root_0, RPAREN983_tree);
                            }

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:951:5: 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression )
                            {
                            string_literal984=(Token)match(input,81,FOLLOW_81_in_function_expression5879); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal984_tree = 
                            (Object)adaptor.create(string_literal984)
                            ;
                            adaptor.addChild(root_0, string_literal984_tree);
                            }

                            // antlr3/PLSQL3.g:951:16: ( LPAREN nested_expression RPAREN | nested_expression )
                            int alt253=2;
                            int LA253_0 = input.LA(1);

                            if ( (LA253_0==LPAREN) ) {
                                int LA253_1 = input.LA(2);

                                if ( (synpred416_PLSQL3()) ) {
                                    alt253=1;
                                }
                                else if ( ((( !is_sql )||(  is_sql ))) ) {
                                    alt253=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 253, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( (LA253_0==DOUBLEQUOTED_STRING||LA253_0==ID||LA253_0==MINUS||LA253_0==NUMBER||LA253_0==PLUS||LA253_0==QUOTED_STRING||LA253_0==65||LA253_0==81||LA253_0==89||LA253_0==118||LA253_0==120||LA253_0==144||LA253_0==147||LA253_0==151||LA253_0==156) ) {
                                alt253=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 253, 0, input);

                                throw nvae;

                            }
                            switch (alt253) {
                                case 1 :
                                    // antlr3/PLSQL3.g:951:18: LPAREN nested_expression RPAREN
                                    {
                                    LPAREN985=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression5883); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    LPAREN985_tree = 
                                    (Object)adaptor.create(LPAREN985)
                                    ;
                                    adaptor.addChild(root_0, LPAREN985_tree);
                                    }

                                    pushFollow(FOLLOW_nested_expression_in_function_expression5885);
                                    nested_expression986=nested_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression986.getTree());

                                    RPAREN987=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression5887); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    RPAREN987_tree = 
                                    (Object)adaptor.create(RPAREN987)
                                    ;
                                    adaptor.addChild(root_0, RPAREN987_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // antlr3/PLSQL3.g:951:52: nested_expression
                                    {
                                    pushFollow(FOLLOW_nested_expression_in_function_expression5891);
                                    nested_expression988=nested_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression988.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 170, function_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "function_expression"


    public static class special_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "special_expression"
    // antlr3/PLSQL3.g:954:1: special_expression :{...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN ) ;
    public final PLSQL3Parser.special_expression_return special_expression() throws RecognitionException {
        PLSQL3Parser.special_expression_return retval = new PLSQL3Parser.special_expression_return();
        retval.start = input.LT(1);

        int special_expression_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN990=null;
        Token ASTERISK991=null;
        Token RPAREN993=null;
        Token string_literal994=null;
        Token LPAREN995=null;
        Token RPAREN997=null;
        PLSQL3Parser.keyCOUNT_return keyCOUNT989 =null;

        PLSQL3Parser.nested_expression_return nested_expression992 =null;

        PLSQL3Parser.nested_expression_return nested_expression996 =null;


        Object LPAREN990_tree=null;
        Object ASTERISK991_tree=null;
        Object RPAREN993_tree=null;
        Object string_literal994_tree=null;
        Object LPAREN995_tree=null;
        Object RPAREN997_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

            // antlr3/PLSQL3.g:955:2: ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN ) )
            // antlr3/PLSQL3.g:955:4: {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN )
            {
            root_0 = (Object)adaptor.nil();


            if ( !(( is_sql )) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "special_expression", " is_sql ");
            }

            // antlr3/PLSQL3.g:956:3: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN )
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==ID) ) {
                alt257=1;
            }
            else if ( (LA257_0==81) ) {
                alt257=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;

            }
            switch (alt257) {
                case 1 :
                    // antlr3/PLSQL3.g:956:5: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
                    {
                    pushFollow(FOLLOW_keyCOUNT_in_special_expression5913);
                    keyCOUNT989=keyCOUNT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOUNT989.getTree());

                    LPAREN990=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_special_expression5915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN990_tree = 
                    (Object)adaptor.create(LPAREN990)
                    ;
                    adaptor.addChild(root_0, LPAREN990_tree);
                    }

                    // antlr3/PLSQL3.g:956:21: ( ASTERISK | nested_expression )
                    int alt256=2;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==ASTERISK) ) {
                        alt256=1;
                    }
                    else if ( (LA256_0==DOUBLEQUOTED_STRING||LA256_0==ID||LA256_0==LPAREN||LA256_0==MINUS||LA256_0==NUMBER||LA256_0==PLUS||LA256_0==QUOTED_STRING||LA256_0==65||LA256_0==81||LA256_0==89||LA256_0==118||LA256_0==120||LA256_0==144||LA256_0==147||LA256_0==151||LA256_0==156) ) {
                        alt256=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 256, 0, input);

                        throw nvae;

                    }
                    switch (alt256) {
                        case 1 :
                            // antlr3/PLSQL3.g:956:23: ASTERISK
                            {
                            ASTERISK991=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_special_expression5919); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASTERISK991_tree = 
                            (Object)adaptor.create(ASTERISK991)
                            ;
                            adaptor.addChild(root_0, ASTERISK991_tree);
                            }

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:956:34: nested_expression
                            {
                            pushFollow(FOLLOW_nested_expression_in_special_expression5923);
                            nested_expression992=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression992.getTree());

                            }
                            break;

                    }


                    RPAREN993=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_special_expression5927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN993_tree = 
                    (Object)adaptor.create(RPAREN993)
                    ;
                    adaptor.addChild(root_0, RPAREN993_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:957:5: 'DISTINCT' LPAREN nested_expression RPAREN
                    {
                    string_literal994=(Token)match(input,81,FOLLOW_81_in_special_expression5933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal994_tree = 
                    (Object)adaptor.create(string_literal994)
                    ;
                    adaptor.addChild(root_0, string_literal994_tree);
                    }

                    LPAREN995=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_special_expression5935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN995_tree = 
                    (Object)adaptor.create(LPAREN995)
                    ;
                    adaptor.addChild(root_0, LPAREN995_tree);
                    }

                    pushFollow(FOLLOW_nested_expression_in_special_expression5937);
                    nested_expression996=nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression996.getTree());

                    RPAREN997=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_special_expression5939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN997_tree = 
                    (Object)adaptor.create(RPAREN997)
                    ;
                    adaptor.addChild(root_0, RPAREN997_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 171, special_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "special_expression"


    public static class interval_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interval_expression"
    // antlr3/PLSQL3.g:960:1: interval_expression : sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH ) ;
    public final PLSQL3Parser.interval_expression_return interval_expression() throws RecognitionException {
        PLSQL3Parser.interval_expression_return retval = new PLSQL3Parser.interval_expression_return();
        retval.start = input.LT(1);

        int interval_expression_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1000=null;
        Token RPAREN1002=null;
        Token string_literal1003=null;
        Token LPAREN1005=null;
        Token RPAREN1007=null;
        Token LPAREN1009=null;
        Token RPAREN1011=null;
        Token string_literal1012=null;
        PLSQL3Parser.sql_expression_return sql_expression998 =null;

        PLSQL3Parser.keyDAY_return keyDAY999 =null;

        PLSQL3Parser.leading_field_precision_return leading_field_precision1001 =null;

        PLSQL3Parser.keySECOND_return keySECOND1004 =null;

        PLSQL3Parser.fractional_second_precision_return fractional_second_precision1006 =null;

        PLSQL3Parser.keyYEAR_return keyYEAR1008 =null;

        PLSQL3Parser.leading_field_precision_return leading_field_precision1010 =null;

        PLSQL3Parser.keyMONTH_return keyMONTH1013 =null;


        Object LPAREN1000_tree=null;
        Object RPAREN1002_tree=null;
        Object string_literal1003_tree=null;
        Object LPAREN1005_tree=null;
        Object RPAREN1007_tree=null;
        Object LPAREN1009_tree=null;
        Object RPAREN1011_tree=null;
        Object string_literal1012_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

            // antlr3/PLSQL3.g:961:2: ( sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH ) )
            // antlr3/PLSQL3.g:961:4: sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_interval_expression5953);
            sql_expression998=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression998.getTree());

            // antlr3/PLSQL3.g:962:3: ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH )
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==ID) ) {
                int LA261_1 = input.LA(2);

                if ( (LA261_1==LPAREN) ) {
                    int LA261_2 = input.LA(3);

                    if ( (LA261_2==NUMBER) ) {
                        int LA261_4 = input.LA(4);

                        if ( (LA261_4==RPAREN) ) {
                            int LA261_6 = input.LA(5);

                            if ( (LA261_6==155) ) {
                                int LA261_3 = input.LA(6);

                                if ( (LA261_3==ID) ) {
                                    int LA261_5 = input.LA(7);

                                    if ( ((((input.LT(1).getText().equalsIgnoreCase("DAY"))&&(input.LT(1).getText().equalsIgnoreCase("DAY")))&&synpred421_PLSQL3())) ) {
                                        alt261=1;
                                    }
                                    else if ( ((input.LT(1).getText().equalsIgnoreCase("YEAR"))) ) {
                                        alt261=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 261, 5, input);

                                        throw nvae;

                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 261, 3, input);

                                    throw nvae;

                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 6, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 4, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA261_1==155) ) {
                    int LA261_3 = input.LA(3);

                    if ( (LA261_3==ID) ) {
                        int LA261_5 = input.LA(4);

                        if ( ((((input.LT(1).getText().equalsIgnoreCase("DAY"))&&(input.LT(1).getText().equalsIgnoreCase("DAY")))&&synpred421_PLSQL3())) ) {
                            alt261=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("YEAR"))) ) {
                            alt261=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 5, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;

            }
            switch (alt261) {
                case 1 :
                    // antlr3/PLSQL3.g:962:5: keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )?
                    {
                    pushFollow(FOLLOW_keyDAY_in_interval_expression5959);
                    keyDAY999=keyDAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDAY999.getTree());

                    // antlr3/PLSQL3.g:962:12: ( LPAREN leading_field_precision RPAREN )?
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==LPAREN) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            // antlr3/PLSQL3.g:962:14: LPAREN leading_field_precision RPAREN
                            {
                            LPAREN1000=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression5963); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1000_tree = 
                            (Object)adaptor.create(LPAREN1000)
                            ;
                            adaptor.addChild(root_0, LPAREN1000_tree);
                            }

                            pushFollow(FOLLOW_leading_field_precision_in_interval_expression5965);
                            leading_field_precision1001=leading_field_precision();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, leading_field_precision1001.getTree());

                            RPAREN1002=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression5967); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1002_tree = 
                            (Object)adaptor.create(RPAREN1002)
                            ;
                            adaptor.addChild(root_0, RPAREN1002_tree);
                            }

                            }
                            break;

                    }


                    string_literal1003=(Token)match(input,155,FOLLOW_155_in_interval_expression5972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1003_tree = 
                    (Object)adaptor.create(string_literal1003)
                    ;
                    adaptor.addChild(root_0, string_literal1003_tree);
                    }

                    pushFollow(FOLLOW_keySECOND_in_interval_expression5974);
                    keySECOND1004=keySECOND();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySECOND1004.getTree());

                    // antlr3/PLSQL3.g:962:70: ( LPAREN fractional_second_precision RPAREN )?
                    int alt259=2;
                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==LPAREN) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            // antlr3/PLSQL3.g:962:72: LPAREN fractional_second_precision RPAREN
                            {
                            LPAREN1005=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression5978); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1005_tree = 
                            (Object)adaptor.create(LPAREN1005)
                            ;
                            adaptor.addChild(root_0, LPAREN1005_tree);
                            }

                            pushFollow(FOLLOW_fractional_second_precision_in_interval_expression5980);
                            fractional_second_precision1006=fractional_second_precision();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fractional_second_precision1006.getTree());

                            RPAREN1007=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression5982); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1007_tree = 
                            (Object)adaptor.create(RPAREN1007)
                            ;
                            adaptor.addChild(root_0, RPAREN1007_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:963:5: keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH
                    {
                    pushFollow(FOLLOW_keyYEAR_in_interval_expression5991);
                    keyYEAR1008=keyYEAR();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyYEAR1008.getTree());

                    // antlr3/PLSQL3.g:963:13: ( LPAREN leading_field_precision RPAREN )?
                    int alt260=2;
                    int LA260_0 = input.LA(1);

                    if ( (LA260_0==LPAREN) ) {
                        alt260=1;
                    }
                    switch (alt260) {
                        case 1 :
                            // antlr3/PLSQL3.g:963:15: LPAREN leading_field_precision RPAREN
                            {
                            LPAREN1009=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression5995); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1009_tree = 
                            (Object)adaptor.create(LPAREN1009)
                            ;
                            adaptor.addChild(root_0, LPAREN1009_tree);
                            }

                            pushFollow(FOLLOW_leading_field_precision_in_interval_expression5997);
                            leading_field_precision1010=leading_field_precision();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, leading_field_precision1010.getTree());

                            RPAREN1011=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression5999); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1011_tree = 
                            (Object)adaptor.create(RPAREN1011)
                            ;
                            adaptor.addChild(root_0, RPAREN1011_tree);
                            }

                            }
                            break;

                    }


                    string_literal1012=(Token)match(input,155,FOLLOW_155_in_interval_expression6004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1012_tree = 
                    (Object)adaptor.create(string_literal1012)
                    ;
                    adaptor.addChild(root_0, string_literal1012_tree);
                    }

                    pushFollow(FOLLOW_keyMONTH_in_interval_expression6006);
                    keyMONTH1013=keyMONTH();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMONTH1013.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 172, interval_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interval_expression"


    public static class leading_field_precision_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "leading_field_precision"
    // antlr3/PLSQL3.g:966:1: leading_field_precision : integer ;
    public final PLSQL3Parser.leading_field_precision_return leading_field_precision() throws RecognitionException {
        PLSQL3Parser.leading_field_precision_return retval = new PLSQL3Parser.leading_field_precision_return();
        retval.start = input.LT(1);

        int leading_field_precision_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.integer_return integer1014 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

            // antlr3/PLSQL3.g:967:2: ( integer )
            // antlr3/PLSQL3.g:967:4: integer
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_integer_in_leading_field_precision6020);
            integer1014=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1014.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 173, leading_field_precision_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "leading_field_precision"


    public static class fractional_second_precision_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fractional_second_precision"
    // antlr3/PLSQL3.g:969:1: fractional_second_precision : integer ;
    public final PLSQL3Parser.fractional_second_precision_return fractional_second_precision() throws RecognitionException {
        PLSQL3Parser.fractional_second_precision_return retval = new PLSQL3Parser.fractional_second_precision_return();
        retval.start = input.LT(1);

        int fractional_second_precision_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.integer_return integer1015 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

            // antlr3/PLSQL3.g:970:2: ( integer )
            // antlr3/PLSQL3.g:970:4: integer
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_integer_in_fractional_second_precision6031);
            integer1015=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1015.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 174, fractional_second_precision_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fractional_second_precision"


    public static class object_access_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_expression"
    // antlr3/PLSQL3.g:972:1: object_access_expression :;
    public final PLSQL3Parser.object_access_expression_return object_access_expression() throws RecognitionException {
        PLSQL3Parser.object_access_expression_return retval = new PLSQL3Parser.object_access_expression_return();
        retval.start = input.LT(1);

        int object_access_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

            // antlr3/PLSQL3.g:973:2: ()
            // antlr3/PLSQL3.g:974:2: 
            {
            root_0 = (Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 175, object_access_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "object_access_expression"


    public static class scalar_subquery_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar_subquery_expression"
    // antlr3/PLSQL3.g:975:1: scalar_subquery_expression :;
    public final PLSQL3Parser.scalar_subquery_expression_return scalar_subquery_expression() throws RecognitionException {
        PLSQL3Parser.scalar_subquery_expression_return retval = new PLSQL3Parser.scalar_subquery_expression_return();
        retval.start = input.LT(1);

        int scalar_subquery_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

            // antlr3/PLSQL3.g:976:2: ()
            // antlr3/PLSQL3.g:977:2: 
            {
            root_0 = (Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 176, scalar_subquery_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "scalar_subquery_expression"


    public static class model_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_expression"
    // antlr3/PLSQL3.g:978:1: model_expression :;
    public final PLSQL3Parser.model_expression_return model_expression() throws RecognitionException {
        PLSQL3Parser.model_expression_return retval = new PLSQL3Parser.model_expression_return();
        retval.start = input.LT(1);

        int model_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }

            // antlr3/PLSQL3.g:979:2: ()
            // antlr3/PLSQL3.g:980:2: 
            {
            root_0 = (Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 177, model_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "model_expression"


    public static class type_constructor_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_constructor_expression"
    // antlr3/PLSQL3.g:981:1: type_constructor_expression :;
    public final PLSQL3Parser.type_constructor_expression_return type_constructor_expression() throws RecognitionException {
        PLSQL3Parser.type_constructor_expression_return retval = new PLSQL3Parser.type_constructor_expression_return();
        retval.start = input.LT(1);

        int type_constructor_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }

            // antlr3/PLSQL3.g:982:2: ()
            // antlr3/PLSQL3.g:983:2: 
            {
            root_0 = (Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 178, type_constructor_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_constructor_expression"


    public static class variable_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_expression"
    // antlr3/PLSQL3.g:984:1: variable_expression :;
    public final PLSQL3Parser.variable_expression_return variable_expression() throws RecognitionException {
        PLSQL3Parser.variable_expression_return retval = new PLSQL3Parser.variable_expression_return();
        retval.start = input.LT(1);

        int variable_expression_StartIndex = input.index();

        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }

            // antlr3/PLSQL3.g:985:2: ()
            // antlr3/PLSQL3.g:986:2: 
            {
            root_0 = (Object)adaptor.nil();


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 179, variable_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_expression"


    public static class sequence_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sequence_name"
    // antlr3/PLSQL3.g:987:1: sequence_name : identifier ;
    public final PLSQL3Parser.sequence_name_return sequence_name() throws RecognitionException {
        PLSQL3Parser.sequence_name_return retval = new PLSQL3Parser.sequence_name_return();
        retval.start = input.LT(1);

        int sequence_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier1016 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }

            // antlr3/PLSQL3.g:988:2: ( identifier )
            // antlr3/PLSQL3.g:988:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_sequence_name6082);
            identifier1016=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1016.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 180, sequence_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sequence_name"


    public static class integer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "integer"
    // antlr3/PLSQL3.g:990:1: integer : NUMBER ;
    public final PLSQL3Parser.integer_return integer() throws RecognitionException {
        PLSQL3Parser.integer_return retval = new PLSQL3Parser.integer_return();
        retval.start = input.LT(1);

        int integer_StartIndex = input.index();

        Object root_0 = null;

        Token NUMBER1017=null;

        Object NUMBER1017_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }

            // antlr3/PLSQL3.g:991:2: ( NUMBER )
            // antlr3/PLSQL3.g:991:4: NUMBER
            {
            root_0 = (Object)adaptor.nil();


            NUMBER1017=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_integer6092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER1017_tree = 
            (Object)adaptor.create(NUMBER1017)
            ;
            adaptor.addChild(root_0, NUMBER1017_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 181, integer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "integer"


    public static class alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias"
    // antlr3/PLSQL3.g:995:1: alias : ( 'AS' )? sql_identifier ;
    public final PLSQL3Parser.alias_return alias() throws RecognitionException {
        PLSQL3Parser.alias_return retval = new PLSQL3Parser.alias_return();
        retval.start = input.LT(1);

        int alias_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1018=null;
        PLSQL3Parser.sql_identifier_return sql_identifier1019 =null;


        Object string_literal1018_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }

            // antlr3/PLSQL3.g:996:2: ( ( 'AS' )? sql_identifier )
            // antlr3/PLSQL3.g:996:4: ( 'AS' )? sql_identifier
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:996:4: ( 'AS' )?
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==53) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    // antlr3/PLSQL3.g:996:6: 'AS'
                    {
                    string_literal1018=(Token)match(input,53,FOLLOW_53_in_alias6106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1018_tree = 
                    (Object)adaptor.create(string_literal1018)
                    ;
                    adaptor.addChild(root_0, string_literal1018_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_sql_identifier_in_alias6111);
            sql_identifier1019=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1019.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 182, alias_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "alias"


    public static class column_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "column_specs"
    // antlr3/PLSQL3.g:999:1: column_specs : column_spec ( COMMA column_spec )* ;
    public final PLSQL3Parser.column_specs_return column_specs() throws RecognitionException {
        PLSQL3Parser.column_specs_return retval = new PLSQL3Parser.column_specs_return();
        retval.start = input.LT(1);

        int column_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1021=null;
        PLSQL3Parser.column_spec_return column_spec1020 =null;

        PLSQL3Parser.column_spec_return column_spec1022 =null;


        Object COMMA1021_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }

            // antlr3/PLSQL3.g:1000:2: ( column_spec ( COMMA column_spec )* )
            // antlr3/PLSQL3.g:1000:4: column_spec ( COMMA column_spec )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_column_spec_in_column_specs6122);
            column_spec1020=column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1020.getTree());

            // antlr3/PLSQL3.g:1000:16: ( COMMA column_spec )*
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);

                if ( (LA263_0==COMMA) ) {
                    alt263=1;
                }


                switch (alt263) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1000:18: COMMA column_spec
            	    {
            	    COMMA1021=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_specs6126); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1021_tree = 
            	    (Object)adaptor.create(COMMA1021)
            	    ;
            	    adaptor.addChild(root_0, COMMA1021_tree);
            	    }

            	    pushFollow(FOLLOW_column_spec_in_column_specs6128);
            	    column_spec1022=column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1022.getTree());

            	    }
            	    break;

            	default :
            	    break loop263;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 183, column_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "column_specs"


    public static class column_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "column_spec"
    // antlr3/PLSQL3.g:1003:1: column_spec : sql_identifier ( DOT sql_identifier ( DOT sql_identifier )? )? ;
    public final PLSQL3Parser.column_spec_return column_spec() throws RecognitionException {
        PLSQL3Parser.column_spec_return retval = new PLSQL3Parser.column_spec_return();
        retval.start = input.LT(1);

        int column_spec_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1024=null;
        Token DOT1026=null;
        PLSQL3Parser.sql_identifier_return sql_identifier1023 =null;

        PLSQL3Parser.sql_identifier_return sql_identifier1025 =null;

        PLSQL3Parser.sql_identifier_return sql_identifier1027 =null;


        Object DOT1024_tree=null;
        Object DOT1026_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }

            // antlr3/PLSQL3.g:1004:2: ( sql_identifier ( DOT sql_identifier ( DOT sql_identifier )? )? )
            // antlr3/PLSQL3.g:1004:4: sql_identifier ( DOT sql_identifier ( DOT sql_identifier )? )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_column_spec6142);
            sql_identifier1023=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1023.getTree());

            // antlr3/PLSQL3.g:1004:19: ( DOT sql_identifier ( DOT sql_identifier )? )?
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==DOT) ) {
                int LA265_1 = input.LA(2);

                if ( (LA265_1==DOUBLEQUOTED_STRING||LA265_1==ID||LA265_1==144) ) {
                    alt265=1;
                }
            }
            switch (alt265) {
                case 1 :
                    // antlr3/PLSQL3.g:1004:21: DOT sql_identifier ( DOT sql_identifier )?
                    {
                    DOT1024=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec6146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1024_tree = 
                    (Object)adaptor.create(DOT1024)
                    ;
                    adaptor.addChild(root_0, DOT1024_tree);
                    }

                    pushFollow(FOLLOW_sql_identifier_in_column_spec6148);
                    sql_identifier1025=sql_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1025.getTree());

                    // antlr3/PLSQL3.g:1004:40: ( DOT sql_identifier )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==DOT) ) {
                        int LA264_1 = input.LA(2);

                        if ( (LA264_1==DOUBLEQUOTED_STRING||LA264_1==ID||LA264_1==144) ) {
                            alt264=1;
                        }
                    }
                    switch (alt264) {
                        case 1 :
                            // antlr3/PLSQL3.g:1004:42: DOT sql_identifier
                            {
                            DOT1026=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec6152); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT1026_tree = 
                            (Object)adaptor.create(DOT1026)
                            ;
                            adaptor.addChild(root_0, DOT1026_tree);
                            }

                            pushFollow(FOLLOW_sql_identifier_in_column_spec6154);
                            sql_identifier1027=sql_identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1027.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 184, column_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "column_spec"


    public static class column_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "column_name"
    // antlr3/PLSQL3.g:1012:1: column_name : sql_identifier ;
    public final PLSQL3Parser.column_name_return column_name() throws RecognitionException {
        PLSQL3Parser.column_name_return retval = new PLSQL3Parser.column_name_return();
        retval.start = input.LT(1);

        int column_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_identifier_return sql_identifier1028 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }

            // antlr3/PLSQL3.g:1013:2: ( sql_identifier )
            // antlr3/PLSQL3.g:1013:4: sql_identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_column_name6176);
            sql_identifier1028=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1028.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 185, column_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "column_name"


    public static class nested_table_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_table"
    // antlr3/PLSQL3.g:1015:1: nested_table : sql_identifier ;
    public final PLSQL3Parser.nested_table_return nested_table() throws RecognitionException {
        PLSQL3Parser.nested_table_return retval = new PLSQL3Parser.nested_table_return();
        retval.start = input.LT(1);

        int nested_table_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_identifier_return sql_identifier1029 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }

            // antlr3/PLSQL3.g:1016:2: ( sql_identifier )
            // antlr3/PLSQL3.g:1016:4: sql_identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_nested_table6186);
            sql_identifier1029=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1029.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 186, nested_table_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_table"


    public static class nested_table_column_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_table_column_name"
    // antlr3/PLSQL3.g:1018:1: nested_table_column_name : ( schema_name DOT )? table_name DOT nested_table DOT column_name ;
    public final PLSQL3Parser.nested_table_column_name_return nested_table_column_name() throws RecognitionException {
        PLSQL3Parser.nested_table_column_name_return retval = new PLSQL3Parser.nested_table_column_name_return();
        retval.start = input.LT(1);

        int nested_table_column_name_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1031=null;
        Token DOT1033=null;
        Token DOT1035=null;
        PLSQL3Parser.schema_name_return schema_name1030 =null;

        PLSQL3Parser.table_name_return table_name1032 =null;

        PLSQL3Parser.nested_table_return nested_table1034 =null;

        PLSQL3Parser.column_name_return column_name1036 =null;


        Object DOT1031_tree=null;
        Object DOT1033_tree=null;
        Object DOT1035_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }

            // antlr3/PLSQL3.g:1019:2: ( ( schema_name DOT )? table_name DOT nested_table DOT column_name )
            // antlr3/PLSQL3.g:1019:4: ( schema_name DOT )? table_name DOT nested_table DOT column_name
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1019:4: ( schema_name DOT )?
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==DOUBLEQUOTED_STRING||LA266_0==ID) ) {
                int LA266_1 = input.LA(2);

                if ( (LA266_1==DOT) ) {
                    int LA266_3 = input.LA(3);

                    if ( (LA266_3==DOUBLEQUOTED_STRING||LA266_3==ID) ) {
                        int LA266_4 = input.LA(4);

                        if ( (LA266_4==DOT) ) {
                            int LA266_6 = input.LA(5);

                            if ( (LA266_6==DOUBLEQUOTED_STRING||LA266_6==ID) ) {
                                int LA266_7 = input.LA(6);

                                if ( (LA266_7==DOT) ) {
                                    alt266=1;
                                }
                            }
                            else if ( (LA266_6==144) ) {
                                int LA266_8 = input.LA(6);

                                if ( (LA266_8==DOT) ) {
                                    alt266=1;
                                }
                            }
                        }
                    }
                    else if ( (LA266_3==144) ) {
                        int LA266_5 = input.LA(4);

                        if ( (LA266_5==DOT) ) {
                            int LA266_6 = input.LA(5);

                            if ( (LA266_6==DOUBLEQUOTED_STRING||LA266_6==ID) ) {
                                int LA266_7 = input.LA(6);

                                if ( (LA266_7==DOT) ) {
                                    alt266=1;
                                }
                            }
                            else if ( (LA266_6==144) ) {
                                int LA266_8 = input.LA(6);

                                if ( (LA266_8==DOT) ) {
                                    alt266=1;
                                }
                            }
                        }
                    }
                }
            }
            else if ( (LA266_0==144) ) {
                int LA266_2 = input.LA(2);

                if ( (LA266_2==DOT) ) {
                    int LA266_3 = input.LA(3);

                    if ( (LA266_3==DOUBLEQUOTED_STRING||LA266_3==ID) ) {
                        int LA266_4 = input.LA(4);

                        if ( (LA266_4==DOT) ) {
                            int LA266_6 = input.LA(5);

                            if ( (LA266_6==DOUBLEQUOTED_STRING||LA266_6==ID) ) {
                                int LA266_7 = input.LA(6);

                                if ( (LA266_7==DOT) ) {
                                    alt266=1;
                                }
                            }
                            else if ( (LA266_6==144) ) {
                                int LA266_8 = input.LA(6);

                                if ( (LA266_8==DOT) ) {
                                    alt266=1;
                                }
                            }
                        }
                    }
                    else if ( (LA266_3==144) ) {
                        int LA266_5 = input.LA(4);

                        if ( (LA266_5==DOT) ) {
                            int LA266_6 = input.LA(5);

                            if ( (LA266_6==DOUBLEQUOTED_STRING||LA266_6==ID) ) {
                                int LA266_7 = input.LA(6);

                                if ( (LA266_7==DOT) ) {
                                    alt266=1;
                                }
                            }
                            else if ( (LA266_6==144) ) {
                                int LA266_8 = input.LA(6);

                                if ( (LA266_8==DOT) ) {
                                    alt266=1;
                                }
                            }
                        }
                    }
                }
            }
            switch (alt266) {
                case 1 :
                    // antlr3/PLSQL3.g:1019:6: schema_name DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_nested_table_column_name6198);
                    schema_name1030=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name1030.getTree());

                    DOT1031=(Token)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name6200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1031_tree = 
                    (Object)adaptor.create(DOT1031)
                    ;
                    adaptor.addChild(root_0, DOT1031_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_table_name_in_nested_table_column_name6205);
            table_name1032=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1032.getTree());

            DOT1033=(Token)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name6207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT1033_tree = 
            (Object)adaptor.create(DOT1033)
            ;
            adaptor.addChild(root_0, DOT1033_tree);
            }

            pushFollow(FOLLOW_nested_table_in_nested_table_column_name6209);
            nested_table1034=nested_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table1034.getTree());

            DOT1035=(Token)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name6211); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT1035_tree = 
            (Object)adaptor.create(DOT1035)
            ;
            adaptor.addChild(root_0, DOT1035_tree);
            }

            pushFollow(FOLLOW_column_name_in_nested_table_column_name6213);
            column_name1036=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1036.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 187, nested_table_column_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_table_column_name"


    public static class user_defined_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "user_defined_function"
    // antlr3/PLSQL3.g:1022:1: user_defined_function : sql_identifier ( DOT sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )? ;
    public final PLSQL3Parser.user_defined_function_return user_defined_function() throws RecognitionException {
        PLSQL3Parser.user_defined_function_return retval = new PLSQL3Parser.user_defined_function_return();
        retval.start = input.LT(1);

        int user_defined_function_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1038=null;
        Token DOT1040=null;
        Token set1041=null;
        PLSQL3Parser.sql_identifier_return sql_identifier1037 =null;

        PLSQL3Parser.sql_identifier_return sql_identifier1039 =null;


        Object DOT1038_tree=null;
        Object DOT1040_tree=null;
        Object set1041_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }

            // antlr3/PLSQL3.g:1023:2: ( sql_identifier ( DOT sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )? )
            // antlr3/PLSQL3.g:1023:4: sql_identifier ( DOT sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_user_defined_function6224);
            sql_identifier1037=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1037.getTree());

            // antlr3/PLSQL3.g:1023:19: ( DOT sql_identifier )*
            loop267:
            do {
                int alt267=2;
                int LA267_0 = input.LA(1);

                if ( (LA267_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case ID:
                        {
                        int LA267_3 = input.LA(3);

                        if ( (synpred428_PLSQL3()) ) {
                            alt267=1;
                        }


                        }
                        break;
                    case 144:
                        {
                        int LA267_4 = input.LA(3);

                        if ( (synpred428_PLSQL3()) ) {
                            alt267=1;
                        }


                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA267_5 = input.LA(3);

                        if ( (synpred428_PLSQL3()) ) {
                            alt267=1;
                        }


                        }
                        break;

                    }

                }


                switch (alt267) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1023:21: DOT sql_identifier
            	    {
            	    DOT1038=(Token)match(input,DOT,FOLLOW_DOT_in_user_defined_function6228); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT1038_tree = 
            	    (Object)adaptor.create(DOT1038)
            	    ;
            	    adaptor.addChild(root_0, DOT1038_tree);
            	    }

            	    pushFollow(FOLLOW_sql_identifier_in_user_defined_function6230);
            	    sql_identifier1039=sql_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1039.getTree());

            	    }
            	    break;

            	default :
            	    break loop267;
                }
            } while (true);


            // antlr3/PLSQL3.g:1023:43: ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==DOT) ) {
                int LA268_1 = input.LA(2);

                if ( (LA268_1==79||LA268_1==88||LA268_1==134) ) {
                    alt268=1;
                }
            }
            switch (alt268) {
                case 1 :
                    // antlr3/PLSQL3.g:1023:45: DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' )
                    {
                    DOT1040=(Token)match(input,DOT,FOLLOW_DOT_in_user_defined_function6237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1040_tree = 
                    (Object)adaptor.create(DOT1040)
                    ;
                    adaptor.addChild(root_0, DOT1040_tree);
                    }

                    set1041=(Token)input.LT(1);

                    if ( input.LA(1)==79||input.LA(1)==88||input.LA(1)==134 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set1041)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 188, user_defined_function_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "user_defined_function"


    public static class selected_table_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selected_table"
    // antlr3/PLSQL3.g:1035:1: selected_table : ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias )? ;
    public final PLSQL3Parser.selected_table_return selected_table() throws RecognitionException {
        PLSQL3Parser.selected_table_return retval = new PLSQL3Parser.selected_table_return();
        retval.start = input.LT(1);

        int selected_table_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1043=null;
        PLSQL3Parser.table_spec_return table_spec1042 =null;

        PLSQL3Parser.keyTHE_return keyTHE1044 =null;

        PLSQL3Parser.subquery_return subquery1045 =null;

        PLSQL3Parser.alias_return alias1046 =null;


        Object string_literal1043_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }

            // antlr3/PLSQL3.g:1036:2: ( ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias )? )
            // antlr3/PLSQL3.g:1036:4: ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1036:4: ( table_spec | ( 'TABLE' | keyTHE )? subquery )
            int alt270=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA270_1 = input.LA(2);

                if ( (synpred432_PLSQL3()) ) {
                    alt270=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("THE"))) ) {
                    alt270=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 270, 1, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
            case 144:
                {
                alt270=1;
                }
                break;
            case LPAREN:
            case 153:
                {
                alt270=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                throw nvae;

            }

            switch (alt270) {
                case 1 :
                    // antlr3/PLSQL3.g:1036:6: table_spec
                    {
                    pushFollow(FOLLOW_table_spec_in_selected_table6277);
                    table_spec1042=table_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec1042.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1036:19: ( 'TABLE' | keyTHE )? subquery
                    {
                    // antlr3/PLSQL3.g:1036:19: ( 'TABLE' | keyTHE )?
                    int alt269=3;
                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==153) ) {
                        alt269=1;
                    }
                    else if ( (LA269_0==ID) ) {
                        alt269=2;
                    }
                    switch (alt269) {
                        case 1 :
                            // antlr3/PLSQL3.g:1036:21: 'TABLE'
                            {
                            string_literal1043=(Token)match(input,153,FOLLOW_153_in_selected_table6283); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1043_tree = 
                            (Object)adaptor.create(string_literal1043)
                            ;
                            adaptor.addChild(root_0, string_literal1043_tree);
                            }

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1036:31: keyTHE
                            {
                            pushFollow(FOLLOW_keyTHE_in_selected_table6287);
                            keyTHE1044=keyTHE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTHE1044.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_subquery_in_selected_table6292);
                    subquery1045=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1045.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1036:52: ( alias )?
            int alt271=2;
            switch ( input.LA(1) ) {
                case 53:
                    {
                    int LA271_1 = input.LA(2);

                    if ( (LA271_1==DOUBLEQUOTED_STRING||LA271_1==ID) ) {
                        int LA271_6 = input.LA(3);

                        if ( (synpred435_PLSQL3()) ) {
                            alt271=1;
                        }
                    }
                    else if ( (LA271_1==144) ) {
                        int LA271_7 = input.LA(3);

                        if ( (synpred435_PLSQL3()) ) {
                            alt271=1;
                        }
                    }
                    }
                    break;
                case ID:
                    {
                    int LA271_2 = input.LA(2);

                    if ( (synpred435_PLSQL3()) ) {
                        alt271=1;
                    }
                    }
                    break;
                case 144:
                    {
                    int LA271_3 = input.LA(2);

                    if ( (synpred435_PLSQL3()) ) {
                        alt271=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA271_5 = input.LA(2);

                    if ( (synpred435_PLSQL3()) ) {
                        alt271=1;
                    }
                    }
                    break;
            }

            switch (alt271) {
                case 1 :
                    // antlr3/PLSQL3.g:1036:54: alias
                    {
                    pushFollow(FOLLOW_alias_in_selected_table6298);
                    alias1046=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias1046.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 189, selected_table_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "selected_table"


    public static class table_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_spec"
    // antlr3/PLSQL3.g:1039:1: table_spec : ( schema_name DOT )? table_name ( AT_SIGN link_name )? ;
    public final PLSQL3Parser.table_spec_return table_spec() throws RecognitionException {
        PLSQL3Parser.table_spec_return retval = new PLSQL3Parser.table_spec_return();
        retval.start = input.LT(1);

        int table_spec_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1048=null;
        Token AT_SIGN1050=null;
        PLSQL3Parser.schema_name_return schema_name1047 =null;

        PLSQL3Parser.table_name_return table_name1049 =null;

        PLSQL3Parser.link_name_return link_name1051 =null;


        Object DOT1048_tree=null;
        Object AT_SIGN1050_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }

            // antlr3/PLSQL3.g:1040:2: ( ( schema_name DOT )? table_name ( AT_SIGN link_name )? )
            // antlr3/PLSQL3.g:1040:4: ( schema_name DOT )? table_name ( AT_SIGN link_name )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1040:4: ( schema_name DOT )?
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==DOUBLEQUOTED_STRING||LA272_0==ID) ) {
                int LA272_1 = input.LA(2);

                if ( (LA272_1==DOT) ) {
                    alt272=1;
                }
            }
            else if ( (LA272_0==144) ) {
                int LA272_2 = input.LA(2);

                if ( (LA272_2==DOT) ) {
                    alt272=1;
                }
            }
            switch (alt272) {
                case 1 :
                    // antlr3/PLSQL3.g:1040:6: schema_name DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_table_spec6314);
                    schema_name1047=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name1047.getTree());

                    DOT1048=(Token)match(input,DOT,FOLLOW_DOT_in_table_spec6316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1048_tree = 
                    (Object)adaptor.create(DOT1048)
                    ;
                    adaptor.addChild(root_0, DOT1048_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_table_name_in_table_spec6321);
            table_name1049=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1049.getTree());

            // antlr3/PLSQL3.g:1040:36: ( AT_SIGN link_name )?
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==AT_SIGN) ) {
                alt273=1;
            }
            switch (alt273) {
                case 1 :
                    // antlr3/PLSQL3.g:1040:38: AT_SIGN link_name
                    {
                    AT_SIGN1050=(Token)match(input,AT_SIGN,FOLLOW_AT_SIGN_in_table_spec6325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT_SIGN1050_tree = 
                    (Object)adaptor.create(AT_SIGN1050)
                    ;
                    adaptor.addChild(root_0, AT_SIGN1050_tree);
                    }

                    pushFollow(FOLLOW_link_name_in_table_spec6327);
                    link_name1051=link_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, link_name1051.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 190, table_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_spec"


    public static class table_alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_alias"
    // antlr3/PLSQL3.g:1043:1: table_alias : ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias )? ;
    public final PLSQL3Parser.table_alias_return table_alias() throws RecognitionException {
        PLSQL3Parser.table_alias_return retval = new PLSQL3Parser.table_alias_return();
        retval.start = input.LT(1);

        int table_alias_StartIndex = input.index();

        Object root_0 = null;

        Token DOT1053=null;
        Token AT_SIGN1055=null;
        PLSQL3Parser.schema_name_return schema_name1052 =null;

        PLSQL3Parser.table_name_return table_name1054 =null;

        PLSQL3Parser.link_name_return link_name1056 =null;

        PLSQL3Parser.alias_return alias1057 =null;


        Object DOT1053_tree=null;
        Object AT_SIGN1055_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }

            // antlr3/PLSQL3.g:1044:2: ( ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias )? )
            // antlr3/PLSQL3.g:1044:4: ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1044:4: ( schema_name DOT )?
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==DOUBLEQUOTED_STRING||LA274_0==ID) ) {
                int LA274_1 = input.LA(2);

                if ( (LA274_1==DOT) ) {
                    alt274=1;
                }
            }
            else if ( (LA274_0==144) ) {
                int LA274_2 = input.LA(2);

                if ( (LA274_2==DOT) ) {
                    alt274=1;
                }
            }
            switch (alt274) {
                case 1 :
                    // antlr3/PLSQL3.g:1044:6: schema_name DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_table_alias6343);
                    schema_name1052=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name1052.getTree());

                    DOT1053=(Token)match(input,DOT,FOLLOW_DOT_in_table_alias6345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1053_tree = 
                    (Object)adaptor.create(DOT1053)
                    ;
                    adaptor.addChild(root_0, DOT1053_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_table_name_in_table_alias6350);
            table_name1054=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1054.getTree());

            // antlr3/PLSQL3.g:1044:36: ( AT_SIGN link_name )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==AT_SIGN) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    // antlr3/PLSQL3.g:1044:38: AT_SIGN link_name
                    {
                    AT_SIGN1055=(Token)match(input,AT_SIGN,FOLLOW_AT_SIGN_in_table_alias6354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT_SIGN1055_tree = 
                    (Object)adaptor.create(AT_SIGN1055)
                    ;
                    adaptor.addChild(root_0, AT_SIGN1055_tree);
                    }

                    pushFollow(FOLLOW_link_name_in_table_alias6356);
                    link_name1056=link_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, link_name1056.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1044:59: ( alias )?
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==DOUBLEQUOTED_STRING||LA276_0==ID||LA276_0==53||LA276_0==144) ) {
                alt276=1;
            }
            switch (alt276) {
                case 1 :
                    // antlr3/PLSQL3.g:1044:61: alias
                    {
                    pushFollow(FOLLOW_alias_in_table_alias6363);
                    alias1057=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias1057.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 191, table_alias_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "table_alias"


    public static class link_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "link_name"
    // antlr3/PLSQL3.g:1047:1: link_name : sql_identifier ;
    public final PLSQL3Parser.link_name_return link_name() throws RecognitionException {
        PLSQL3Parser.link_name_return retval = new PLSQL3Parser.link_name_return();
        retval.start = input.LT(1);

        int link_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_identifier_return sql_identifier1058 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }

            // antlr3/PLSQL3.g:1048:2: ( sql_identifier )
            // antlr3/PLSQL3.g:1048:4: sql_identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_link_name6377);
            sql_identifier1058=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1058.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 192, link_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "link_name"


    public static class nested_condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_condition"
    // antlr3/PLSQL3.g:1050:1: nested_condition : ({...}? condition_or |{...}? expr_bool );
    public final PLSQL3Parser.nested_condition_return nested_condition() throws RecognitionException {
        PLSQL3Parser.nested_condition_return retval = new PLSQL3Parser.nested_condition_return();
        retval.start = input.LT(1);

        int nested_condition_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.condition_or_return condition_or1059 =null;

        PLSQL3Parser.expr_bool_return expr_bool1060 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }

            // antlr3/PLSQL3.g:1051:2: ({...}? condition_or |{...}? expr_bool )
            int alt277=2;
            switch ( input.LA(1) ) {
            case 118:
                {
                int LA277_1 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 1, input);

                    throw nvae;

                }
                }
                break;
            case 52:
            case 88:
            case 134:
                {
                alt277=1;
                }
                break;
            case MINUS:
            case PLUS:
                {
                int LA277_3 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 3, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA277_4 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 4, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA277_5 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 5, input);

                    throw nvae;

                }
                }
                break;
            case 144:
                {
                int LA277_6 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 6, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA277_7 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 7, input);

                    throw nvae;

                }
                }
                break;
            case 81:
                {
                int LA277_8 = input.LA(2);

                if ( ((((( is_sql )&&( is_sql ))&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (((( is_sql )&&( is_sql ))&&( !is_sql ))) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 8, input);

                    throw nvae;

                }
                }
                break;
            case 65:
                {
                int LA277_9 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 9, input);

                    throw nvae;

                }
                }
                break;
            case 89:
            case 156:
                {
                int LA277_10 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 10, input);

                    throw nvae;

                }
                }
                break;
            case 151:
                {
                int LA277_11 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 11, input);

                    throw nvae;

                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA277_12 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 12, input);

                    throw nvae;

                }
                }
                break;
            case NUMBER:
                {
                int LA277_13 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 13, input);

                    throw nvae;

                }
                }
                break;
            case 120:
                {
                int LA277_14 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 14, input);

                    throw nvae;

                }
                }
                break;
            case 147:
                {
                int LA277_15 = input.LA(2);

                if ( (((synpred441_PLSQL3()&&synpred441_PLSQL3())&&(  is_sql ))) ) {
                    alt277=1;
                }
                else if ( (( !is_sql )) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 15, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;

            }

            switch (alt277) {
                case 1 :
                    // antlr3/PLSQL3.g:1051:4: {...}? condition_or
                    {
                    root_0 = (Object)adaptor.nil();


                    if ( !((  is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", "  is_sql ");
                    }

                    pushFollow(FOLLOW_condition_or_in_nested_condition6389);
                    condition_or1059=condition_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_or1059.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1052:4: {...}? expr_bool
                    {
                    root_0 = (Object)adaptor.nil();


                    if ( !(( !is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", " !is_sql ");
                    }

                    pushFollow(FOLLOW_expr_bool_in_nested_condition6396);
                    expr_bool1060=expr_bool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_bool1060.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 193, nested_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nested_condition"


    public static class sql_condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_condition"
    // antlr3/PLSQL3.g:1054:1: sql_condition : condition_or ;
    public final PLSQL3Parser.sql_condition_return sql_condition() throws RecognitionException {
        PLSQL3Parser.sql_condition_return retval = new PLSQL3Parser.sql_condition_return();
        retval.start = input.LT(1);

        int sql_condition_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.condition_or_return condition_or1061 =null;



         is_sql = true; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }

            // antlr3/PLSQL3.g:1056:2: ( condition_or )
            // antlr3/PLSQL3.g:1056:4: condition_or
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_condition_or_in_sql_condition6413);
            condition_or1061=condition_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_or1061.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 194, sql_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_condition"


    public static class condition_paren_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_paren"
    // antlr3/PLSQL3.g:1059:1: condition_paren : LPAREN sql_condition RPAREN ;
    public final PLSQL3Parser.condition_paren_return condition_paren() throws RecognitionException {
        PLSQL3Parser.condition_paren_return retval = new PLSQL3Parser.condition_paren_return();
        retval.start = input.LT(1);

        int condition_paren_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1062=null;
        Token RPAREN1064=null;
        PLSQL3Parser.sql_condition_return sql_condition1063 =null;


        Object LPAREN1062_tree=null;
        Object RPAREN1064_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }

            // antlr3/PLSQL3.g:1060:2: ( LPAREN sql_condition RPAREN )
            // antlr3/PLSQL3.g:1060:4: LPAREN sql_condition RPAREN
            {
            root_0 = (Object)adaptor.nil();


            LPAREN1062=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_paren6424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1062_tree = 
            (Object)adaptor.create(LPAREN1062)
            ;
            adaptor.addChild(root_0, LPAREN1062_tree);
            }

            pushFollow(FOLLOW_sql_condition_in_condition_paren6426);
            sql_condition1063=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1063.getTree());

            RPAREN1064=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_paren6428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1064_tree = 
            (Object)adaptor.create(RPAREN1064)
            ;
            adaptor.addChild(root_0, RPAREN1064_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 195, condition_paren_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_paren"


    public static class condition_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_or"
    // antlr3/PLSQL3.g:1062:1: condition_or : condition_and ( 'OR' condition_and )* ;
    public final PLSQL3Parser.condition_or_return condition_or() throws RecognitionException {
        PLSQL3Parser.condition_or_return retval = new PLSQL3Parser.condition_or_return();
        retval.start = input.LT(1);

        int condition_or_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1066=null;
        PLSQL3Parser.condition_and_return condition_and1065 =null;

        PLSQL3Parser.condition_and_return condition_and1067 =null;


        Object string_literal1066_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }

            // antlr3/PLSQL3.g:1063:2: ( condition_and ( 'OR' condition_and )* )
            // antlr3/PLSQL3.g:1063:4: condition_and ( 'OR' condition_and )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_condition_and_in_condition_or6438);
            condition_and1065=condition_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_and1065.getTree());

            // antlr3/PLSQL3.g:1063:18: ( 'OR' condition_and )*
            loop278:
            do {
                int alt278=2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0==127) ) {
                    int LA278_2 = input.LA(2);

                    if ( (synpred442_PLSQL3()) ) {
                        alt278=1;
                    }


                }


                switch (alt278) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1063:20: 'OR' condition_and
            	    {
            	    string_literal1066=(Token)match(input,127,FOLLOW_127_in_condition_or6442); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1066_tree = 
            	    (Object)adaptor.create(string_literal1066)
            	    ;
            	    adaptor.addChild(root_0, string_literal1066_tree);
            	    }

            	    pushFollow(FOLLOW_condition_and_in_condition_or6444);
            	    condition_and1067=condition_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_and1067.getTree());

            	    }
            	    break;

            	default :
            	    break loop278;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 196, condition_or_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_or"


    public static class condition_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_and"
    // antlr3/PLSQL3.g:1065:1: condition_and : condition_not ( 'AND' condition_not )* ;
    public final PLSQL3Parser.condition_and_return condition_and() throws RecognitionException {
        PLSQL3Parser.condition_and_return retval = new PLSQL3Parser.condition_and_return();
        retval.start = input.LT(1);

        int condition_and_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1069=null;
        PLSQL3Parser.condition_not_return condition_not1068 =null;

        PLSQL3Parser.condition_not_return condition_not1070 =null;


        Object string_literal1069_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }

            // antlr3/PLSQL3.g:1066:2: ( condition_not ( 'AND' condition_not )* )
            // antlr3/PLSQL3.g:1066:4: condition_not ( 'AND' condition_not )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_condition_not_in_condition_and6457);
            condition_not1068=condition_not();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_not1068.getTree());

            // antlr3/PLSQL3.g:1066:18: ( 'AND' condition_not )*
            loop279:
            do {
                int alt279=2;
                int LA279_0 = input.LA(1);

                if ( (LA279_0==51) ) {
                    int LA279_2 = input.LA(2);

                    if ( (synpred443_PLSQL3()) ) {
                        alt279=1;
                    }


                }


                switch (alt279) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1066:20: 'AND' condition_not
            	    {
            	    string_literal1069=(Token)match(input,51,FOLLOW_51_in_condition_and6461); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1069_tree = 
            	    (Object)adaptor.create(string_literal1069)
            	    ;
            	    adaptor.addChild(root_0, string_literal1069_tree);
            	    }

            	    pushFollow(FOLLOW_condition_not_in_condition_and6463);
            	    condition_not1070=condition_not();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_not1070.getTree());

            	    }
            	    break;

            	default :
            	    break loop279;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 197, condition_and_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_and"


    public static class condition_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_not"
    // antlr3/PLSQL3.g:1068:1: condition_not : ( 'NOT' condition_expr | condition_expr );
    public final PLSQL3Parser.condition_not_return condition_not() throws RecognitionException {
        PLSQL3Parser.condition_not_return retval = new PLSQL3Parser.condition_not_return();
        retval.start = input.LT(1);

        int condition_not_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1071=null;
        PLSQL3Parser.condition_expr_return condition_expr1072 =null;

        PLSQL3Parser.condition_expr_return condition_expr1073 =null;


        Object string_literal1071_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }

            // antlr3/PLSQL3.g:1069:2: ( 'NOT' condition_expr | condition_expr )
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==118) ) {
                alt280=1;
            }
            else if ( (LA280_0==DOUBLEQUOTED_STRING||LA280_0==ID||LA280_0==LPAREN||LA280_0==MINUS||LA280_0==NUMBER||LA280_0==PLUS||LA280_0==QUOTED_STRING||LA280_0==52||LA280_0==65||LA280_0==81||(LA280_0 >= 88 && LA280_0 <= 89)||LA280_0==120||LA280_0==134||LA280_0==144||LA280_0==147||LA280_0==151||LA280_0==156) ) {
                alt280=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 280, 0, input);

                throw nvae;

            }
            switch (alt280) {
                case 1 :
                    // antlr3/PLSQL3.g:1069:4: 'NOT' condition_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal1071=(Token)match(input,118,FOLLOW_118_in_condition_not6476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1071_tree = 
                    (Object)adaptor.create(string_literal1071)
                    ;
                    adaptor.addChild(root_0, string_literal1071_tree);
                    }

                    pushFollow(FOLLOW_condition_expr_in_condition_not6478);
                    condition_expr1072=condition_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_expr1072.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1070:4: condition_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_expr_in_condition_not6483);
                    condition_expr1073=condition_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_expr1073.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 198, condition_not_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_not"


    public static class condition_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_expr"
    // antlr3/PLSQL3.g:1072:1: condition_expr : ( condition_exists | condition_is | condition_comparison | condition_group_comparison | condition_in | condition_is_a_set | condition_is_any | condition_is_empty | condition_is_of_type | condition_is_present | condition_like | condition_memeber | condition_between | condition_regexp_like | condition_submultiset | condition_equals_path | condition_under_path | condition_paren );
    public final PLSQL3Parser.condition_expr_return condition_expr() throws RecognitionException {
        PLSQL3Parser.condition_expr_return retval = new PLSQL3Parser.condition_expr_return();
        retval.start = input.LT(1);

        int condition_expr_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.condition_exists_return condition_exists1074 =null;

        PLSQL3Parser.condition_is_return condition_is1075 =null;

        PLSQL3Parser.condition_comparison_return condition_comparison1076 =null;

        PLSQL3Parser.condition_group_comparison_return condition_group_comparison1077 =null;

        PLSQL3Parser.condition_in_return condition_in1078 =null;

        PLSQL3Parser.condition_is_a_set_return condition_is_a_set1079 =null;

        PLSQL3Parser.condition_is_any_return condition_is_any1080 =null;

        PLSQL3Parser.condition_is_empty_return condition_is_empty1081 =null;

        PLSQL3Parser.condition_is_of_type_return condition_is_of_type1082 =null;

        PLSQL3Parser.condition_is_present_return condition_is_present1083 =null;

        PLSQL3Parser.condition_like_return condition_like1084 =null;

        PLSQL3Parser.condition_memeber_return condition_memeber1085 =null;

        PLSQL3Parser.condition_between_return condition_between1086 =null;

        PLSQL3Parser.condition_regexp_like_return condition_regexp_like1087 =null;

        PLSQL3Parser.condition_submultiset_return condition_submultiset1088 =null;

        PLSQL3Parser.condition_equals_path_return condition_equals_path1089 =null;

        PLSQL3Parser.condition_under_path_return condition_under_path1090 =null;

        PLSQL3Parser.condition_paren_return condition_paren1091 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }

            // antlr3/PLSQL3.g:1073:2: ( condition_exists | condition_is | condition_comparison | condition_group_comparison | condition_in | condition_is_a_set | condition_is_any | condition_is_empty | condition_is_of_type | condition_is_present | condition_like | condition_memeber | condition_between | condition_regexp_like | condition_submultiset | condition_equals_path | condition_under_path | condition_paren )
            int alt281=18;
            switch ( input.LA(1) ) {
            case 88:
                {
                alt281=1;
                }
                break;
            case MINUS:
            case PLUS:
                {
                int LA281_2 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 2, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA281_3 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else if ( (true) ) {
                    alt281=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 3, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA281_4 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred450_PLSQL3()) ) {
                    alt281=6;
                }
                else if ( (synpred451_PLSQL3()) ) {
                    alt281=7;
                }
                else if ( (synpred452_PLSQL3()) ) {
                    alt281=8;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred454_PLSQL3()) ) {
                    alt281=10;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("REGEXP_LIKE"))&&(input.LT(1).getText().equalsIgnoreCase("REGEXP_LIKE")))&&synpred458_PLSQL3())) ) {
                    alt281=14;
                }
                else if ( (synpred459_PLSQL3()) ) {
                    alt281=15;
                }
                else if ( (((synpred460_PLSQL3()&&synpred460_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("EQUALS_PATH")))) ) {
                    alt281=16;
                }
                else if ( (((synpred461_PLSQL3()&&synpred461_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("UNDER_PATH")))) ) {
                    alt281=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 4, input);

                    throw nvae;

                }
                }
                break;
            case 144:
                {
                int LA281_5 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred450_PLSQL3()) ) {
                    alt281=6;
                }
                else if ( (synpred451_PLSQL3()) ) {
                    alt281=7;
                }
                else if ( (synpred452_PLSQL3()) ) {
                    alt281=8;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred454_PLSQL3()) ) {
                    alt281=10;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else if ( (synpred459_PLSQL3()) ) {
                    alt281=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 5, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA281_6 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred450_PLSQL3()) ) {
                    alt281=6;
                }
                else if ( (synpred451_PLSQL3()) ) {
                    alt281=7;
                }
                else if ( (synpred452_PLSQL3()) ) {
                    alt281=8;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred454_PLSQL3()) ) {
                    alt281=10;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else if ( (synpred459_PLSQL3()) ) {
                    alt281=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 6, input);

                    throw nvae;

                }
                }
                break;
            case 81:
                {
                int LA281_7 = input.LA(2);

                if ( (((( is_sql )&&( is_sql ))&&synpred446_PLSQL3())) ) {
                    alt281=2;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred447_PLSQL3())) ) {
                    alt281=3;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred448_PLSQL3())) ) {
                    alt281=4;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred449_PLSQL3())) ) {
                    alt281=5;
                }
                else if ( (((synpred453_PLSQL3()&&synpred453_PLSQL3())&&( is_sql ))) ) {
                    alt281=9;
                }
                else if ( (((synpred455_PLSQL3()&&synpred455_PLSQL3())&&( is_sql ))) ) {
                    alt281=11;
                }
                else if ( (((( is_sql )&&( is_sql ))&&synpred456_PLSQL3())) ) {
                    alt281=12;
                }
                else if ( (((synpred457_PLSQL3()&&synpred457_PLSQL3())&&( is_sql ))) ) {
                    alt281=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 7, input);

                    throw nvae;

                }
                }
                break;
            case 65:
                {
                int LA281_8 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 8, input);

                    throw nvae;

                }
                }
                break;
            case 89:
            case 156:
                {
                int LA281_9 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 9, input);

                    throw nvae;

                }
                }
                break;
            case 151:
                {
                int LA281_10 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 10, input);

                    throw nvae;

                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA281_11 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 11, input);

                    throw nvae;

                }
                }
                break;
            case NUMBER:
                {
                int LA281_12 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 12, input);

                    throw nvae;

                }
                }
                break;
            case 120:
                {
                int LA281_13 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 13, input);

                    throw nvae;

                }
                }
                break;
            case 147:
                {
                int LA281_14 = input.LA(2);

                if ( (synpred446_PLSQL3()) ) {
                    alt281=2;
                }
                else if ( (synpred447_PLSQL3()) ) {
                    alt281=3;
                }
                else if ( (synpred448_PLSQL3()) ) {
                    alt281=4;
                }
                else if ( (synpred449_PLSQL3()) ) {
                    alt281=5;
                }
                else if ( (synpred453_PLSQL3()) ) {
                    alt281=9;
                }
                else if ( (synpred455_PLSQL3()) ) {
                    alt281=11;
                }
                else if ( (synpred456_PLSQL3()) ) {
                    alt281=12;
                }
                else if ( (synpred457_PLSQL3()) ) {
                    alt281=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 281, 14, input);

                    throw nvae;

                }
                }
                break;
            case 134:
                {
                alt281=3;
                }
                break;
            case 52:
                {
                alt281=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);

                throw nvae;

            }

            switch (alt281) {
                case 1 :
                    // antlr3/PLSQL3.g:1073:4: condition_exists
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_exists_in_condition_expr6493);
                    condition_exists1074=condition_exists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_exists1074.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1074:4: condition_is
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_in_condition_expr6498);
                    condition_is1075=condition_is();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is1075.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:1075:4: condition_comparison
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_comparison_in_condition_expr6503);
                    condition_comparison1076=condition_comparison();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_comparison1076.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:1076:4: condition_group_comparison
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_group_comparison_in_condition_expr6508);
                    condition_group_comparison1077=condition_group_comparison();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_group_comparison1077.getTree());

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:1077:4: condition_in
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_in_in_condition_expr6513);
                    condition_in1078=condition_in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_in1078.getTree());

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:1078:4: condition_is_a_set
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_a_set_in_condition_expr6518);
                    condition_is_a_set1079=condition_is_a_set();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_a_set1079.getTree());

                    }
                    break;
                case 7 :
                    // antlr3/PLSQL3.g:1079:4: condition_is_any
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_any_in_condition_expr6523);
                    condition_is_any1080=condition_is_any();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_any1080.getTree());

                    }
                    break;
                case 8 :
                    // antlr3/PLSQL3.g:1080:4: condition_is_empty
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_empty_in_condition_expr6528);
                    condition_is_empty1081=condition_is_empty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_empty1081.getTree());

                    }
                    break;
                case 9 :
                    // antlr3/PLSQL3.g:1081:4: condition_is_of_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_of_type_in_condition_expr6533);
                    condition_is_of_type1082=condition_is_of_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_of_type1082.getTree());

                    }
                    break;
                case 10 :
                    // antlr3/PLSQL3.g:1082:4: condition_is_present
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_is_present_in_condition_expr6538);
                    condition_is_present1083=condition_is_present();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_present1083.getTree());

                    }
                    break;
                case 11 :
                    // antlr3/PLSQL3.g:1083:4: condition_like
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_like_in_condition_expr6543);
                    condition_like1084=condition_like();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_like1084.getTree());

                    }
                    break;
                case 12 :
                    // antlr3/PLSQL3.g:1084:4: condition_memeber
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_memeber_in_condition_expr6548);
                    condition_memeber1085=condition_memeber();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_memeber1085.getTree());

                    }
                    break;
                case 13 :
                    // antlr3/PLSQL3.g:1085:4: condition_between
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_between_in_condition_expr6553);
                    condition_between1086=condition_between();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_between1086.getTree());

                    }
                    break;
                case 14 :
                    // antlr3/PLSQL3.g:1086:4: condition_regexp_like
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_regexp_like_in_condition_expr6558);
                    condition_regexp_like1087=condition_regexp_like();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_regexp_like1087.getTree());

                    }
                    break;
                case 15 :
                    // antlr3/PLSQL3.g:1087:4: condition_submultiset
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_submultiset_in_condition_expr6563);
                    condition_submultiset1088=condition_submultiset();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_submultiset1088.getTree());

                    }
                    break;
                case 16 :
                    // antlr3/PLSQL3.g:1088:4: condition_equals_path
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_equals_path_in_condition_expr6568);
                    condition_equals_path1089=condition_equals_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_equals_path1089.getTree());

                    }
                    break;
                case 17 :
                    // antlr3/PLSQL3.g:1089:4: condition_under_path
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_under_path_in_condition_expr6573);
                    condition_under_path1090=condition_under_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_under_path1090.getTree());

                    }
                    break;
                case 18 :
                    // antlr3/PLSQL3.g:1090:4: condition_paren
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_condition_paren_in_condition_expr6578);
                    condition_paren1091=condition_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_paren1091.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 199, condition_expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_expr"


    public static class condition_exists_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_exists"
    // antlr3/PLSQL3.g:1092:1: condition_exists : 'EXISTS' LPAREN select_command RPAREN ;
    public final PLSQL3Parser.condition_exists_return condition_exists() throws RecognitionException {
        PLSQL3Parser.condition_exists_return retval = new PLSQL3Parser.condition_exists_return();
        retval.start = input.LT(1);

        int condition_exists_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1092=null;
        Token LPAREN1093=null;
        Token RPAREN1095=null;
        PLSQL3Parser.select_command_return select_command1094 =null;


        Object string_literal1092_tree=null;
        Object LPAREN1093_tree=null;
        Object RPAREN1095_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }

            // antlr3/PLSQL3.g:1093:2: ( 'EXISTS' LPAREN select_command RPAREN )
            // antlr3/PLSQL3.g:1093:4: 'EXISTS' LPAREN select_command RPAREN
            {
            root_0 = (Object)adaptor.nil();


            string_literal1092=(Token)match(input,88,FOLLOW_88_in_condition_exists6588); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1092_tree = 
            (Object)adaptor.create(string_literal1092)
            ;
            adaptor.addChild(root_0, string_literal1092_tree);
            }

            LPAREN1093=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_exists6590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1093_tree = 
            (Object)adaptor.create(LPAREN1093)
            ;
            adaptor.addChild(root_0, LPAREN1093_tree);
            }

            pushFollow(FOLLOW_select_command_in_condition_exists6592);
            select_command1094=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1094.getTree());

            RPAREN1095=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_exists6594); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1095_tree = 
            (Object)adaptor.create(RPAREN1095)
            ;
            adaptor.addChild(root_0, RPAREN1095_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 200, condition_exists_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_exists"


    public static class condition_is_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is"
    // antlr3/PLSQL3.g:1095:1: condition_is : sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' ) ;
    public final PLSQL3Parser.condition_is_return condition_is() throws RecognitionException {
        PLSQL3Parser.condition_is_return retval = new PLSQL3Parser.condition_is_return();
        retval.start = input.LT(1);

        int condition_is_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1097=null;
        Token string_literal1098=null;
        Token string_literal1101=null;
        PLSQL3Parser.sql_expression_return sql_expression1096 =null;

        PLSQL3Parser.keyNAN_return keyNAN1099 =null;

        PLSQL3Parser.keyINFINITE_return keyINFINITE1100 =null;


        Object string_literal1097_tree=null;
        Object string_literal1098_tree=null;
        Object string_literal1101_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }

            // antlr3/PLSQL3.g:1096:2: ( sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' ) )
            // antlr3/PLSQL3.g:1096:4: sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_is6604);
            sql_expression1096=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1096.getTree());

            string_literal1097=(Token)match(input,106,FOLLOW_106_in_condition_is6606); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1097_tree = 
            (Object)adaptor.create(string_literal1097)
            ;
            adaptor.addChild(root_0, string_literal1097_tree);
            }

            // antlr3/PLSQL3.g:1096:24: ( 'NOT' )?
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==118) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    // antlr3/PLSQL3.g:1096:26: 'NOT'
                    {
                    string_literal1098=(Token)match(input,118,FOLLOW_118_in_condition_is6610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1098_tree = 
                    (Object)adaptor.create(string_literal1098)
                    ;
                    adaptor.addChild(root_0, string_literal1098_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1096:35: ( keyNAN | keyINFINITE | 'NULL' )
            int alt283=3;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==ID) ) {
                int LA283_1 = input.LA(2);

                if ( (((synpred463_PLSQL3()&&synpred463_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("NAN")))) ) {
                    alt283=1;
                }
                else if ( (((synpred464_PLSQL3()&&synpred464_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("INFINITE")))) ) {
                    alt283=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA283_0==120) ) {
                alt283=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);

                throw nvae;

            }
            switch (alt283) {
                case 1 :
                    // antlr3/PLSQL3.g:1096:37: keyNAN
                    {
                    pushFollow(FOLLOW_keyNAN_in_condition_is6617);
                    keyNAN1099=keyNAN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNAN1099.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1096:46: keyINFINITE
                    {
                    pushFollow(FOLLOW_keyINFINITE_in_condition_is6621);
                    keyINFINITE1100=keyINFINITE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINFINITE1100.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:1096:60: 'NULL'
                    {
                    string_literal1101=(Token)match(input,120,FOLLOW_120_in_condition_is6625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1101_tree = 
                    (Object)adaptor.create(string_literal1101)
                    ;
                    adaptor.addChild(root_0, string_literal1101_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 201, condition_is_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is"


    public static class condition_comparison_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_comparison"
    // antlr3/PLSQL3.g:1098:1: condition_comparison : ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? | ( 'PRIOR' )? sql_expression ( outer_join_sign )? ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'PRIOR' )? ( sql_expression | LPAREN select_command RPAREN ) ( outer_join_sign )? );
    public final PLSQL3Parser.condition_comparison_return condition_comparison() throws RecognitionException {
        PLSQL3Parser.condition_comparison_return retval = new PLSQL3Parser.condition_comparison_return();
        retval.start = input.LT(1);

        int condition_comparison_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1102=null;
        Token RPAREN1104=null;
        Token set1106=null;
        Token LPAREN1107=null;
        Token RPAREN1109=null;
        Token string_literal1111=null;
        Token set1114=null;
        Token string_literal1115=null;
        Token LPAREN1117=null;
        Token RPAREN1119=null;
        PLSQL3Parser.sql_expressions_return sql_expressions1103 =null;

        PLSQL3Parser.outer_join_sign_return outer_join_sign1105 =null;

        PLSQL3Parser.select_command_return select_command1108 =null;

        PLSQL3Parser.outer_join_sign_return outer_join_sign1110 =null;

        PLSQL3Parser.sql_expression_return sql_expression1112 =null;

        PLSQL3Parser.outer_join_sign_return outer_join_sign1113 =null;

        PLSQL3Parser.sql_expression_return sql_expression1116 =null;

        PLSQL3Parser.select_command_return select_command1118 =null;

        PLSQL3Parser.outer_join_sign_return outer_join_sign1120 =null;


        Object LPAREN1102_tree=null;
        Object RPAREN1104_tree=null;
        Object set1106_tree=null;
        Object LPAREN1107_tree=null;
        Object RPAREN1109_tree=null;
        Object string_literal1111_tree=null;
        Object set1114_tree=null;
        Object string_literal1115_tree=null;
        Object LPAREN1117_tree=null;
        Object RPAREN1119_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }

            // antlr3/PLSQL3.g:1099:2: ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? | ( 'PRIOR' )? sql_expression ( outer_join_sign )? ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'PRIOR' )? ( sql_expression | LPAREN select_command RPAREN ) ( outer_join_sign )? )
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==LPAREN) ) {
                int LA291_1 = input.LA(2);

                if ( (synpred468_PLSQL3()) ) {
                    alt291=1;
                }
                else if ( (true) ) {
                    alt291=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 291, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA291_0==DOUBLEQUOTED_STRING||LA291_0==ID||LA291_0==MINUS||LA291_0==NUMBER||LA291_0==PLUS||LA291_0==QUOTED_STRING||LA291_0==65||LA291_0==81||LA291_0==89||LA291_0==120||LA291_0==134||LA291_0==144||LA291_0==147||LA291_0==151||LA291_0==156) ) {
                alt291=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);

                throw nvae;

            }
            switch (alt291) {
                case 1 :
                    // antlr3/PLSQL3.g:1099:4: LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )?
                    {
                    root_0 = (Object)adaptor.nil();


                    LPAREN1102=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison6637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1102_tree = 
                    (Object)adaptor.create(LPAREN1102)
                    ;
                    adaptor.addChild(root_0, LPAREN1102_tree);
                    }

                    pushFollow(FOLLOW_sql_expressions_in_condition_comparison6639);
                    sql_expressions1103=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1103.getTree());

                    RPAREN1104=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison6641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1104_tree = 
                    (Object)adaptor.create(RPAREN1104)
                    ;
                    adaptor.addChild(root_0, RPAREN1104_tree);
                    }

                    // antlr3/PLSQL3.g:1099:34: ( outer_join_sign )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==LPAREN) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            // antlr3/PLSQL3.g:1099:36: outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison6645);
                            outer_join_sign1105=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1105.getTree());

                            }
                            break;

                    }


                    set1106=(Token)input.LT(1);

                    if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set1106)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    LPAREN1107=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison6660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1107_tree = 
                    (Object)adaptor.create(LPAREN1107)
                    ;
                    adaptor.addChild(root_0, LPAREN1107_tree);
                    }

                    pushFollow(FOLLOW_select_command_in_condition_comparison6662);
                    select_command1108=select_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1108.getTree());

                    RPAREN1109=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison6664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1109_tree = 
                    (Object)adaptor.create(RPAREN1109)
                    ;
                    adaptor.addChild(root_0, RPAREN1109_tree);
                    }

                    // antlr3/PLSQL3.g:1099:100: ( outer_join_sign )?
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==LPAREN) ) {
                        int LA285_1 = input.LA(2);

                        if ( (LA285_1==PLUS) ) {
                            int LA285_3 = input.LA(3);

                            if ( (LA285_3==RPAREN) ) {
                                int LA285_4 = input.LA(4);

                                if ( (synpred467_PLSQL3()) ) {
                                    alt285=1;
                                }
                            }
                        }
                    }
                    switch (alt285) {
                        case 1 :
                            // antlr3/PLSQL3.g:1099:102: outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison6668);
                            outer_join_sign1110=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1110.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1100:4: ( 'PRIOR' )? sql_expression ( outer_join_sign )? ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'PRIOR' )? ( sql_expression | LPAREN select_command RPAREN ) ( outer_join_sign )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // antlr3/PLSQL3.g:1100:4: ( 'PRIOR' )?
                    int alt286=2;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==134) ) {
                        alt286=1;
                    }
                    switch (alt286) {
                        case 1 :
                            // antlr3/PLSQL3.g:1100:6: 'PRIOR'
                            {
                            string_literal1111=(Token)match(input,134,FOLLOW_134_in_condition_comparison6678); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1111_tree = 
                            (Object)adaptor.create(string_literal1111)
                            ;
                            adaptor.addChild(root_0, string_literal1111_tree);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_sql_expression_in_condition_comparison6683);
                    sql_expression1112=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1112.getTree());

                    // antlr3/PLSQL3.g:1100:32: ( outer_join_sign )?
                    int alt287=2;
                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==LPAREN) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            // antlr3/PLSQL3.g:1100:34: outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison6687);
                            outer_join_sign1113=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1113.getTree());

                            }
                            break;

                    }


                    set1114=(Token)input.LT(1);

                    if ( input.LA(1)==EQ||(input.LA(1) >= GEQ && input.LA(1) <= GTH)||input.LA(1)==LEQ||input.LA(1)==LTH||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set1114)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // antlr3/PLSQL3.g:1100:93: ( 'PRIOR' )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==134) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // antlr3/PLSQL3.g:1100:95: 'PRIOR'
                            {
                            string_literal1115=(Token)match(input,134,FOLLOW_134_in_condition_comparison6720); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1115_tree = 
                            (Object)adaptor.create(string_literal1115)
                            ;
                            adaptor.addChild(root_0, string_literal1115_tree);
                            }

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:1100:106: ( sql_expression | LPAREN select_command RPAREN )
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==DOUBLEQUOTED_STRING||LA289_0==ID||LA289_0==MINUS||LA289_0==NUMBER||LA289_0==PLUS||LA289_0==QUOTED_STRING||LA289_0==65||LA289_0==81||LA289_0==89||LA289_0==120||LA289_0==144||LA289_0==147||LA289_0==151||LA289_0==156) ) {
                        alt289=1;
                    }
                    else if ( (LA289_0==LPAREN) ) {
                        int LA289_2 = input.LA(2);

                        if ( (synpred477_PLSQL3()) ) {
                            alt289=1;
                        }
                        else if ( (true) ) {
                            alt289=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 289, 2, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 289, 0, input);

                        throw nvae;

                    }
                    switch (alt289) {
                        case 1 :
                            // antlr3/PLSQL3.g:1100:108: sql_expression
                            {
                            pushFollow(FOLLOW_sql_expression_in_condition_comparison6727);
                            sql_expression1116=sql_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1116.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1100:125: LPAREN select_command RPAREN
                            {
                            LPAREN1117=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison6731); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1117_tree = 
                            (Object)adaptor.create(LPAREN1117)
                            ;
                            adaptor.addChild(root_0, LPAREN1117_tree);
                            }

                            pushFollow(FOLLOW_select_command_in_condition_comparison6733);
                            select_command1118=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1118.getTree());

                            RPAREN1119=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison6735); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1119_tree = 
                            (Object)adaptor.create(RPAREN1119)
                            ;
                            adaptor.addChild(root_0, RPAREN1119_tree);
                            }

                            }
                            break;

                    }


                    // antlr3/PLSQL3.g:1100:156: ( outer_join_sign )?
                    int alt290=2;
                    int LA290_0 = input.LA(1);

                    if ( (LA290_0==LPAREN) ) {
                        int LA290_1 = input.LA(2);

                        if ( (synpred478_PLSQL3()) ) {
                            alt290=1;
                        }
                    }
                    switch (alt290) {
                        case 1 :
                            // antlr3/PLSQL3.g:1100:158: outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison6741);
                            outer_join_sign1120=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1120.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 202, condition_comparison_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_comparison"


    public static class condition_group_comparison_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_group_comparison"
    // antlr3/PLSQL3.g:1102:1: condition_group_comparison : ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN );
    public final PLSQL3Parser.condition_group_comparison_return condition_group_comparison() throws RecognitionException {
        PLSQL3Parser.condition_group_comparison_return retval = new PLSQL3Parser.condition_group_comparison_return();
        retval.start = input.LT(1);

        int condition_group_comparison_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1121=null;
        Token RPAREN1123=null;
        Token set1124=null;
        Token string_literal1125=null;
        Token string_literal1127=null;
        Token LPAREN1128=null;
        Token RPAREN1131=null;
        Token set1133=null;
        Token string_literal1134=null;
        Token string_literal1136=null;
        Token LPAREN1137=null;
        Token RPAREN1140=null;
        PLSQL3Parser.sql_expressions_return sql_expressions1122 =null;

        PLSQL3Parser.keySOME_return keySOME1126 =null;

        PLSQL3Parser.grouping_expression_list_return grouping_expression_list1129 =null;

        PLSQL3Parser.select_command_return select_command1130 =null;

        PLSQL3Parser.sql_expression_return sql_expression1132 =null;

        PLSQL3Parser.keySOME_return keySOME1135 =null;

        PLSQL3Parser.sql_expressions_return sql_expressions1138 =null;

        PLSQL3Parser.select_command_return select_command1139 =null;


        Object LPAREN1121_tree=null;
        Object RPAREN1123_tree=null;
        Object set1124_tree=null;
        Object string_literal1125_tree=null;
        Object string_literal1127_tree=null;
        Object LPAREN1128_tree=null;
        Object RPAREN1131_tree=null;
        Object set1133_tree=null;
        Object string_literal1134_tree=null;
        Object string_literal1136_tree=null;
        Object LPAREN1137_tree=null;
        Object RPAREN1140_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }

            // antlr3/PLSQL3.g:1103:2: ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN )
            int alt296=2;
            int LA296_0 = input.LA(1);

            if ( (LA296_0==LPAREN) ) {
                int LA296_1 = input.LA(2);

                if ( (synpred483_PLSQL3()) ) {
                    alt296=1;
                }
                else if ( (true) ) {
                    alt296=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 296, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA296_0==DOUBLEQUOTED_STRING||LA296_0==ID||LA296_0==MINUS||LA296_0==NUMBER||LA296_0==PLUS||LA296_0==QUOTED_STRING||LA296_0==65||LA296_0==81||LA296_0==89||LA296_0==120||LA296_0==144||LA296_0==147||LA296_0==151||LA296_0==156) ) {
                alt296=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 296, 0, input);

                throw nvae;

            }
            switch (alt296) {
                case 1 :
                    // antlr3/PLSQL3.g:1103:4: LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN
                    {
                    root_0 = (Object)adaptor.nil();


                    LPAREN1121=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison6754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1121_tree = 
                    (Object)adaptor.create(LPAREN1121)
                    ;
                    adaptor.addChild(root_0, LPAREN1121_tree);
                    }

                    pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison6756);
                    sql_expressions1122=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1122.getTree());

                    RPAREN1123=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison6758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1123_tree = 
                    (Object)adaptor.create(RPAREN1123)
                    ;
                    adaptor.addChild(root_0, RPAREN1123_tree);
                    }

                    set1124=(Token)input.LT(1);

                    if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set1124)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // antlr3/PLSQL3.g:1103:50: ( 'ANY' | keySOME | 'ALL' )
                    int alt292=3;
                    switch ( input.LA(1) ) {
                    case 52:
                        {
                        alt292=1;
                        }
                        break;
                    case ID:
                        {
                        alt292=2;
                        }
                        break;
                    case 50:
                        {
                        alt292=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 292, 0, input);

                        throw nvae;

                    }

                    switch (alt292) {
                        case 1 :
                            // antlr3/PLSQL3.g:1103:52: 'ANY'
                            {
                            string_literal1125=(Token)match(input,52,FOLLOW_52_in_condition_group_comparison6772); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1125_tree = 
                            (Object)adaptor.create(string_literal1125)
                            ;
                            adaptor.addChild(root_0, string_literal1125_tree);
                            }

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1103:60: keySOME
                            {
                            pushFollow(FOLLOW_keySOME_in_condition_group_comparison6776);
                            keySOME1126=keySOME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySOME1126.getTree());

                            }
                            break;
                        case 3 :
                            // antlr3/PLSQL3.g:1103:70: 'ALL'
                            {
                            string_literal1127=(Token)match(input,50,FOLLOW_50_in_condition_group_comparison6780); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1127_tree = 
                            (Object)adaptor.create(string_literal1127)
                            ;
                            adaptor.addChild(root_0, string_literal1127_tree);
                            }

                            }
                            break;

                    }


                    LPAREN1128=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison6784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1128_tree = 
                    (Object)adaptor.create(LPAREN1128)
                    ;
                    adaptor.addChild(root_0, LPAREN1128_tree);
                    }

                    // antlr3/PLSQL3.g:1103:85: ( grouping_expression_list | select_command )
                    int alt293=2;
                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==DOUBLEQUOTED_STRING||LA293_0==ID||LA293_0==LPAREN||LA293_0==MINUS||LA293_0==NUMBER||LA293_0==PLUS||LA293_0==QUOTED_STRING||LA293_0==65||LA293_0==81||LA293_0==89||LA293_0==120||LA293_0==144||LA293_0==151||LA293_0==156) ) {
                        alt293=1;
                    }
                    else if ( (LA293_0==147) ) {
                        int LA293_13 = input.LA(2);

                        if ( (synpred482_PLSQL3()) ) {
                            alt293=1;
                        }
                        else if ( (true) ) {
                            alt293=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 293, 13, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 293, 0, input);

                        throw nvae;

                    }
                    switch (alt293) {
                        case 1 :
                            // antlr3/PLSQL3.g:1103:87: grouping_expression_list
                            {
                            pushFollow(FOLLOW_grouping_expression_list_in_condition_group_comparison6788);
                            grouping_expression_list1129=grouping_expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list1129.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1103:114: select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_group_comparison6792);
                            select_command1130=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1130.getTree());

                            }
                            break;

                    }


                    RPAREN1131=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison6796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1131_tree = 
                    (Object)adaptor.create(RPAREN1131)
                    ;
                    adaptor.addChild(root_0, RPAREN1131_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1104:4: sql_expression ( EQ | NOT_EQ | GTH | GEQ | LTH | LEQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expression_in_condition_group_comparison6801);
                    sql_expression1132=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1132.getTree());

                    set1133=(Token)input.LT(1);

                    if ( input.LA(1)==EQ||(input.LA(1) >= GEQ && input.LA(1) <= GTH)||input.LA(1)==LEQ||input.LA(1)==LTH||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set1133)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // antlr3/PLSQL3.g:1104:59: ( 'ANY' | keySOME | 'ALL' )
                    int alt294=3;
                    switch ( input.LA(1) ) {
                    case 52:
                        {
                        alt294=1;
                        }
                        break;
                    case ID:
                        {
                        alt294=2;
                        }
                        break;
                    case 50:
                        {
                        alt294=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 294, 0, input);

                        throw nvae;

                    }

                    switch (alt294) {
                        case 1 :
                            // antlr3/PLSQL3.g:1104:61: 'ANY'
                            {
                            string_literal1134=(Token)match(input,52,FOLLOW_52_in_condition_group_comparison6831); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1134_tree = 
                            (Object)adaptor.create(string_literal1134)
                            ;
                            adaptor.addChild(root_0, string_literal1134_tree);
                            }

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1104:69: keySOME
                            {
                            pushFollow(FOLLOW_keySOME_in_condition_group_comparison6835);
                            keySOME1135=keySOME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySOME1135.getTree());

                            }
                            break;
                        case 3 :
                            // antlr3/PLSQL3.g:1104:79: 'ALL'
                            {
                            string_literal1136=(Token)match(input,50,FOLLOW_50_in_condition_group_comparison6839); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1136_tree = 
                            (Object)adaptor.create(string_literal1136)
                            ;
                            adaptor.addChild(root_0, string_literal1136_tree);
                            }

                            }
                            break;

                    }


                    LPAREN1137=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison6843); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1137_tree = 
                    (Object)adaptor.create(LPAREN1137)
                    ;
                    adaptor.addChild(root_0, LPAREN1137_tree);
                    }

                    // antlr3/PLSQL3.g:1104:94: ( sql_expressions | select_command )
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==DOUBLEQUOTED_STRING||LA295_0==ID||LA295_0==LPAREN||LA295_0==MINUS||LA295_0==NUMBER||LA295_0==PLUS||LA295_0==QUOTED_STRING||LA295_0==65||LA295_0==81||LA295_0==89||LA295_0==120||LA295_0==144||LA295_0==151||LA295_0==156) ) {
                        alt295=1;
                    }
                    else if ( (LA295_0==147) ) {
                        int LA295_13 = input.LA(2);

                        if ( (synpred491_PLSQL3()) ) {
                            alt295=1;
                        }
                        else if ( (true) ) {
                            alt295=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 295, 13, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 295, 0, input);

                        throw nvae;

                    }
                    switch (alt295) {
                        case 1 :
                            // antlr3/PLSQL3.g:1104:96: sql_expressions
                            {
                            pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison6847);
                            sql_expressions1138=sql_expressions();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1138.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1104:114: select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_group_comparison6851);
                            select_command1139=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1139.getTree());

                            }
                            break;

                    }


                    RPAREN1140=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison6855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1140_tree = 
                    (Object)adaptor.create(RPAREN1140)
                    ;
                    adaptor.addChild(root_0, RPAREN1140_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 203, condition_group_comparison_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_group_comparison"


    public static class condition_in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_in"
    // antlr3/PLSQL3.g:1106:1: condition_in : ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN );
    public final PLSQL3Parser.condition_in_return condition_in() throws RecognitionException {
        PLSQL3Parser.condition_in_return retval = new PLSQL3Parser.condition_in_return();
        retval.start = input.LT(1);

        int condition_in_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1141=null;
        Token RPAREN1143=null;
        Token string_literal1144=null;
        Token string_literal1145=null;
        Token LPAREN1146=null;
        Token RPAREN1149=null;
        Token string_literal1151=null;
        Token string_literal1152=null;
        Token LPAREN1153=null;
        Token RPAREN1156=null;
        PLSQL3Parser.sql_expressions_return sql_expressions1142 =null;

        PLSQL3Parser.grouping_expression_list_return grouping_expression_list1147 =null;

        PLSQL3Parser.select_command_return select_command1148 =null;

        PLSQL3Parser.sql_expression_return sql_expression1150 =null;

        PLSQL3Parser.expression_list_return expression_list1154 =null;

        PLSQL3Parser.select_command_return select_command1155 =null;


        Object LPAREN1141_tree=null;
        Object RPAREN1143_tree=null;
        Object string_literal1144_tree=null;
        Object string_literal1145_tree=null;
        Object LPAREN1146_tree=null;
        Object RPAREN1149_tree=null;
        Object string_literal1151_tree=null;
        Object string_literal1152_tree=null;
        Object LPAREN1153_tree=null;
        Object RPAREN1156_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }

            // antlr3/PLSQL3.g:1107:2: ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN )
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==LPAREN) ) {
                int LA301_1 = input.LA(2);

                if ( (synpred494_PLSQL3()) ) {
                    alt301=1;
                }
                else if ( (true) ) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA301_0==DOUBLEQUOTED_STRING||LA301_0==ID||LA301_0==MINUS||LA301_0==NUMBER||LA301_0==PLUS||LA301_0==QUOTED_STRING||LA301_0==65||LA301_0==81||LA301_0==89||LA301_0==120||LA301_0==144||LA301_0==147||LA301_0==151||LA301_0==156) ) {
                alt301=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);

                throw nvae;

            }
            switch (alt301) {
                case 1 :
                    // antlr3/PLSQL3.g:1107:4: LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN
                    {
                    root_0 = (Object)adaptor.nil();


                    LPAREN1141=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in6865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1141_tree = 
                    (Object)adaptor.create(LPAREN1141)
                    ;
                    adaptor.addChild(root_0, LPAREN1141_tree);
                    }

                    pushFollow(FOLLOW_sql_expressions_in_condition_in6867);
                    sql_expressions1142=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1142.getTree());

                    RPAREN1143=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in6869); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1143_tree = 
                    (Object)adaptor.create(RPAREN1143)
                    ;
                    adaptor.addChild(root_0, RPAREN1143_tree);
                    }

                    // antlr3/PLSQL3.g:1107:34: ( 'NOT' )?
                    int alt297=2;
                    int LA297_0 = input.LA(1);

                    if ( (LA297_0==118) ) {
                        alt297=1;
                    }
                    switch (alt297) {
                        case 1 :
                            // antlr3/PLSQL3.g:1107:36: 'NOT'
                            {
                            string_literal1144=(Token)match(input,118,FOLLOW_118_in_condition_in6873); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1144_tree = 
                            (Object)adaptor.create(string_literal1144)
                            ;
                            adaptor.addChild(root_0, string_literal1144_tree);
                            }

                            }
                            break;

                    }


                    string_literal1145=(Token)match(input,99,FOLLOW_99_in_condition_in6878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1145_tree = 
                    (Object)adaptor.create(string_literal1145)
                    ;
                    adaptor.addChild(root_0, string_literal1145_tree);
                    }

                    LPAREN1146=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in6880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1146_tree = 
                    (Object)adaptor.create(LPAREN1146)
                    ;
                    adaptor.addChild(root_0, LPAREN1146_tree);
                    }

                    // antlr3/PLSQL3.g:1107:57: ( grouping_expression_list | select_command )
                    int alt298=2;
                    int LA298_0 = input.LA(1);

                    if ( (LA298_0==DOUBLEQUOTED_STRING||LA298_0==ID||LA298_0==LPAREN||LA298_0==MINUS||LA298_0==NUMBER||LA298_0==PLUS||LA298_0==QUOTED_STRING||LA298_0==65||LA298_0==81||LA298_0==89||LA298_0==120||LA298_0==144||LA298_0==151||LA298_0==156) ) {
                        alt298=1;
                    }
                    else if ( (LA298_0==147) ) {
                        int LA298_13 = input.LA(2);

                        if ( (synpred493_PLSQL3()) ) {
                            alt298=1;
                        }
                        else if ( (true) ) {
                            alt298=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 298, 13, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 298, 0, input);

                        throw nvae;

                    }
                    switch (alt298) {
                        case 1 :
                            // antlr3/PLSQL3.g:1107:59: grouping_expression_list
                            {
                            pushFollow(FOLLOW_grouping_expression_list_in_condition_in6884);
                            grouping_expression_list1147=grouping_expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list1147.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1107:86: select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_in6888);
                            select_command1148=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1148.getTree());

                            }
                            break;

                    }


                    RPAREN1149=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in6892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1149_tree = 
                    (Object)adaptor.create(RPAREN1149)
                    ;
                    adaptor.addChild(root_0, RPAREN1149_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1108:4: sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expression_in_condition_in6897);
                    sql_expression1150=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1150.getTree());

                    // antlr3/PLSQL3.g:1108:19: ( 'NOT' )?
                    int alt299=2;
                    int LA299_0 = input.LA(1);

                    if ( (LA299_0==118) ) {
                        alt299=1;
                    }
                    switch (alt299) {
                        case 1 :
                            // antlr3/PLSQL3.g:1108:21: 'NOT'
                            {
                            string_literal1151=(Token)match(input,118,FOLLOW_118_in_condition_in6901); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1151_tree = 
                            (Object)adaptor.create(string_literal1151)
                            ;
                            adaptor.addChild(root_0, string_literal1151_tree);
                            }

                            }
                            break;

                    }


                    string_literal1152=(Token)match(input,99,FOLLOW_99_in_condition_in6906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1152_tree = 
                    (Object)adaptor.create(string_literal1152)
                    ;
                    adaptor.addChild(root_0, string_literal1152_tree);
                    }

                    LPAREN1153=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in6908); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1153_tree = 
                    (Object)adaptor.create(LPAREN1153)
                    ;
                    adaptor.addChild(root_0, LPAREN1153_tree);
                    }

                    // antlr3/PLSQL3.g:1108:42: ( expression_list | select_command )
                    int alt300=2;
                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==DOUBLEQUOTED_STRING||LA300_0==ID||LA300_0==LPAREN||LA300_0==MINUS||LA300_0==NUMBER||LA300_0==PLUS||LA300_0==QUOTED_STRING||LA300_0==65||LA300_0==81||LA300_0==89||LA300_0==120||LA300_0==144||LA300_0==151||LA300_0==156) ) {
                        alt300=1;
                    }
                    else if ( (LA300_0==147) ) {
                        int LA300_13 = input.LA(2);

                        if ( (synpred496_PLSQL3()) ) {
                            alt300=1;
                        }
                        else if ( (true) ) {
                            alt300=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 300, 13, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 300, 0, input);

                        throw nvae;

                    }
                    switch (alt300) {
                        case 1 :
                            // antlr3/PLSQL3.g:1108:44: expression_list
                            {
                            pushFollow(FOLLOW_expression_list_in_condition_in6912);
                            expression_list1154=expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1154.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1108:62: select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_in6916);
                            select_command1155=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1155.getTree());

                            }
                            break;

                    }


                    RPAREN1156=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in6920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1156_tree = 
                    (Object)adaptor.create(RPAREN1156)
                    ;
                    adaptor.addChild(root_0, RPAREN1156_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 204, condition_in_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_in"


    public static class condition_is_a_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_a_set"
    // antlr3/PLSQL3.g:1110:1: condition_is_a_set : nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET' ;
    public final PLSQL3Parser.condition_is_a_set_return condition_is_a_set() throws RecognitionException {
        PLSQL3Parser.condition_is_a_set_return retval = new PLSQL3Parser.condition_is_a_set_return();
        retval.start = input.LT(1);

        int condition_is_a_set_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1158=null;
        Token string_literal1159=null;
        Token string_literal1161=null;
        PLSQL3Parser.nested_table_column_name_return nested_table_column_name1157 =null;

        PLSQL3Parser.keyA_return keyA1160 =null;


        Object string_literal1158_tree=null;
        Object string_literal1159_tree=null;
        Object string_literal1161_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }

            // antlr3/PLSQL3.g:1111:2: ( nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET' )
            // antlr3/PLSQL3.g:1111:4: nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_a_set6930);
            nested_table_column_name1157=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1157.getTree());

            string_literal1158=(Token)match(input,106,FOLLOW_106_in_condition_is_a_set6932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1158_tree = 
            (Object)adaptor.create(string_literal1158)
            ;
            adaptor.addChild(root_0, string_literal1158_tree);
            }

            // antlr3/PLSQL3.g:1111:34: ( 'NOT' )?
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==118) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    // antlr3/PLSQL3.g:1111:36: 'NOT'
                    {
                    string_literal1159=(Token)match(input,118,FOLLOW_118_in_condition_is_a_set6936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1159_tree = 
                    (Object)adaptor.create(string_literal1159)
                    ;
                    adaptor.addChild(root_0, string_literal1159_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_keyA_in_condition_is_a_set6941);
            keyA1160=keyA();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyA1160.getTree());

            string_literal1161=(Token)match(input,148,FOLLOW_148_in_condition_is_a_set6943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1161_tree = 
            (Object)adaptor.create(string_literal1161)
            ;
            adaptor.addChild(root_0, string_literal1161_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 205, condition_is_a_set_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_a_set"


    public static class condition_is_any_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_any"
    // antlr3/PLSQL3.g:1113:1: condition_is_any : ( column_name 'IS' )? 'ANY' ;
    public final PLSQL3Parser.condition_is_any_return condition_is_any() throws RecognitionException {
        PLSQL3Parser.condition_is_any_return retval = new PLSQL3Parser.condition_is_any_return();
        retval.start = input.LT(1);

        int condition_is_any_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1163=null;
        Token string_literal1164=null;
        PLSQL3Parser.column_name_return column_name1162 =null;


        Object string_literal1163_tree=null;
        Object string_literal1164_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }

            // antlr3/PLSQL3.g:1114:2: ( ( column_name 'IS' )? 'ANY' )
            // antlr3/PLSQL3.g:1114:4: ( column_name 'IS' )? 'ANY'
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1114:4: ( column_name 'IS' )?
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==DOUBLEQUOTED_STRING||LA303_0==ID||LA303_0==144) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    // antlr3/PLSQL3.g:1114:6: column_name 'IS'
                    {
                    pushFollow(FOLLOW_column_name_in_condition_is_any6955);
                    column_name1162=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1162.getTree());

                    string_literal1163=(Token)match(input,106,FOLLOW_106_in_condition_is_any6957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1163_tree = 
                    (Object)adaptor.create(string_literal1163)
                    ;
                    adaptor.addChild(root_0, string_literal1163_tree);
                    }

                    }
                    break;

            }


            string_literal1164=(Token)match(input,52,FOLLOW_52_in_condition_is_any6962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1164_tree = 
            (Object)adaptor.create(string_literal1164)
            ;
            adaptor.addChild(root_0, string_literal1164_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 206, condition_is_any_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_any"


    public static class condition_is_empty_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_empty"
    // antlr3/PLSQL3.g:1116:1: condition_is_empty : nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY ;
    public final PLSQL3Parser.condition_is_empty_return condition_is_empty() throws RecognitionException {
        PLSQL3Parser.condition_is_empty_return retval = new PLSQL3Parser.condition_is_empty_return();
        retval.start = input.LT(1);

        int condition_is_empty_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1166=null;
        Token string_literal1167=null;
        PLSQL3Parser.nested_table_column_name_return nested_table_column_name1165 =null;

        PLSQL3Parser.keyEMPTY_return keyEMPTY1168 =null;


        Object string_literal1166_tree=null;
        Object string_literal1167_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }

            // antlr3/PLSQL3.g:1117:2: ( nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY )
            // antlr3/PLSQL3.g:1117:4: nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_empty6972);
            nested_table_column_name1165=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1165.getTree());

            string_literal1166=(Token)match(input,106,FOLLOW_106_in_condition_is_empty6974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1166_tree = 
            (Object)adaptor.create(string_literal1166)
            ;
            adaptor.addChild(root_0, string_literal1166_tree);
            }

            // antlr3/PLSQL3.g:1117:34: ( 'NOT' )?
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( (LA304_0==118) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    // antlr3/PLSQL3.g:1117:36: 'NOT'
                    {
                    string_literal1167=(Token)match(input,118,FOLLOW_118_in_condition_is_empty6978); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1167_tree = 
                    (Object)adaptor.create(string_literal1167)
                    ;
                    adaptor.addChild(root_0, string_literal1167_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_keyEMPTY_in_condition_is_empty6983);
            keyEMPTY1168=keyEMPTY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEMPTY1168.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 207, condition_is_empty_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_empty"


    public static class condition_is_of_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_of_type"
    // antlr3/PLSQL3.g:1119:1: condition_is_of_type : sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN ;
    public final PLSQL3Parser.condition_is_of_type_return condition_is_of_type() throws RecognitionException {
        PLSQL3Parser.condition_is_of_type_return retval = new PLSQL3Parser.condition_is_of_type_return();
        retval.start = input.LT(1);

        int condition_is_of_type_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1170=null;
        Token string_literal1171=null;
        Token string_literal1172=null;
        Token LPAREN1174=null;
        Token RPAREN1176=null;
        PLSQL3Parser.sql_expression_return sql_expression1169 =null;

        PLSQL3Parser.keyTYPE_return keyTYPE1173 =null;

        PLSQL3Parser.type_name_return type_name1175 =null;


        Object string_literal1170_tree=null;
        Object string_literal1171_tree=null;
        Object string_literal1172_tree=null;
        Object LPAREN1174_tree=null;
        Object RPAREN1176_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }

            // antlr3/PLSQL3.g:1120:2: ( sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN )
            // antlr3/PLSQL3.g:1120:4: sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_is_of_type6993);
            sql_expression1169=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1169.getTree());

            string_literal1170=(Token)match(input,106,FOLLOW_106_in_condition_is_of_type6995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1170_tree = 
            (Object)adaptor.create(string_literal1170)
            ;
            adaptor.addChild(root_0, string_literal1170_tree);
            }

            // antlr3/PLSQL3.g:1120:24: ( 'NOT' )?
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( (LA305_0==118) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    // antlr3/PLSQL3.g:1120:26: 'NOT'
                    {
                    string_literal1171=(Token)match(input,118,FOLLOW_118_in_condition_is_of_type6999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1171_tree = 
                    (Object)adaptor.create(string_literal1171)
                    ;
                    adaptor.addChild(root_0, string_literal1171_tree);
                    }

                    }
                    break;

            }


            string_literal1172=(Token)match(input,125,FOLLOW_125_in_condition_is_of_type7004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1172_tree = 
            (Object)adaptor.create(string_literal1172)
            ;
            adaptor.addChild(root_0, string_literal1172_tree);
            }

            // antlr3/PLSQL3.g:1120:40: ( keyTYPE )?
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==ID) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    // antlr3/PLSQL3.g:1120:42: keyTYPE
                    {
                    pushFollow(FOLLOW_keyTYPE_in_condition_is_of_type7008);
                    keyTYPE1173=keyTYPE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE1173.getTree());

                    }
                    break;

            }


            LPAREN1174=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_is_of_type7013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1174_tree = 
            (Object)adaptor.create(LPAREN1174)
            ;
            adaptor.addChild(root_0, LPAREN1174_tree);
            }

            pushFollow(FOLLOW_type_name_in_condition_is_of_type7015);
            type_name1175=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name1175.getTree());

            RPAREN1176=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_is_of_type7017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1176_tree = 
            (Object)adaptor.create(RPAREN1176)
            ;
            adaptor.addChild(root_0, RPAREN1176_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 208, condition_is_of_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type"


    public static class condition_is_of_type_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_of_type_names"
    // antlr3/PLSQL3.g:1122:1: condition_is_of_type_names : condition_is_of_type_name ( COMMA condition_is_of_type_name )* ;
    public final PLSQL3Parser.condition_is_of_type_names_return condition_is_of_type_names() throws RecognitionException {
        PLSQL3Parser.condition_is_of_type_names_return retval = new PLSQL3Parser.condition_is_of_type_names_return();
        retval.start = input.LT(1);

        int condition_is_of_type_names_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1178=null;
        PLSQL3Parser.condition_is_of_type_name_return condition_is_of_type_name1177 =null;

        PLSQL3Parser.condition_is_of_type_name_return condition_is_of_type_name1179 =null;


        Object COMMA1178_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }

            // antlr3/PLSQL3.g:1123:2: ( condition_is_of_type_name ( COMMA condition_is_of_type_name )* )
            // antlr3/PLSQL3.g:1123:4: condition_is_of_type_name ( COMMA condition_is_of_type_name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7027);
            condition_is_of_type_name1177=condition_is_of_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_of_type_name1177.getTree());

            // antlr3/PLSQL3.g:1123:30: ( COMMA condition_is_of_type_name )*
            loop307:
            do {
                int alt307=2;
                int LA307_0 = input.LA(1);

                if ( (LA307_0==COMMA) ) {
                    alt307=1;
                }


                switch (alt307) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1123:32: COMMA condition_is_of_type_name
            	    {
            	    COMMA1178=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_is_of_type_names7031); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1178_tree = 
            	    (Object)adaptor.create(COMMA1178)
            	    ;
            	    adaptor.addChild(root_0, COMMA1178_tree);
            	    }

            	    pushFollow(FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7033);
            	    condition_is_of_type_name1179=condition_is_of_type_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_of_type_name1179.getTree());

            	    }
            	    break;

            	default :
            	    break loop307;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 209, condition_is_of_type_names_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type_names"


    public static class condition_is_of_type_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_of_type_name"
    // antlr3/PLSQL3.g:1125:1: condition_is_of_type_name : ( keyONLY )? type_name ;
    public final PLSQL3Parser.condition_is_of_type_name_return condition_is_of_type_name() throws RecognitionException {
        PLSQL3Parser.condition_is_of_type_name_return retval = new PLSQL3Parser.condition_is_of_type_name_return();
        retval.start = input.LT(1);

        int condition_is_of_type_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.keyONLY_return keyONLY1180 =null;

        PLSQL3Parser.type_name_return type_name1181 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }

            // antlr3/PLSQL3.g:1126:2: ( ( keyONLY )? type_name )
            // antlr3/PLSQL3.g:1126:4: ( keyONLY )? type_name
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1126:4: ( keyONLY )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==ID) ) {
                int LA308_1 = input.LA(2);

                if ( (LA308_1==DOUBLEQUOTED_STRING||LA308_1==ID) ) {
                    alt308=1;
                }
            }
            switch (alt308) {
                case 1 :
                    // antlr3/PLSQL3.g:1126:6: keyONLY
                    {
                    pushFollow(FOLLOW_keyONLY_in_condition_is_of_type_name7048);
                    keyONLY1180=keyONLY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyONLY1180.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_type_name_in_condition_is_of_type_name7053);
            type_name1181=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name1181.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 210, condition_is_of_type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type_name"


    public static class condition_is_present_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_is_present"
    // antlr3/PLSQL3.g:1128:1: condition_is_present : cell_reference 'IS' keyPRESENT ;
    public final PLSQL3Parser.condition_is_present_return condition_is_present() throws RecognitionException {
        PLSQL3Parser.condition_is_present_return retval = new PLSQL3Parser.condition_is_present_return();
        retval.start = input.LT(1);

        int condition_is_present_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1183=null;
        PLSQL3Parser.cell_reference_return cell_reference1182 =null;

        PLSQL3Parser.keyPRESENT_return keyPRESENT1184 =null;


        Object string_literal1183_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }

            // antlr3/PLSQL3.g:1129:2: ( cell_reference 'IS' keyPRESENT )
            // antlr3/PLSQL3.g:1129:4: cell_reference 'IS' keyPRESENT
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cell_reference_in_condition_is_present7063);
            cell_reference1182=cell_reference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference1182.getTree());

            string_literal1183=(Token)match(input,106,FOLLOW_106_in_condition_is_present7065); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1183_tree = 
            (Object)adaptor.create(string_literal1183)
            ;
            adaptor.addChild(root_0, string_literal1183_tree);
            }

            pushFollow(FOLLOW_keyPRESENT_in_condition_is_present7067);
            keyPRESENT1184=keyPRESENT();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPRESENT1184.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 211, condition_is_present_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_is_present"


    public static class condition_like_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_like"
    // antlr3/PLSQL3.g:1131:1: condition_like : sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )? ;
    public final PLSQL3Parser.condition_like_return condition_like() throws RecognitionException {
        PLSQL3Parser.condition_like_return retval = new PLSQL3Parser.condition_like_return();
        retval.start = input.LT(1);

        int condition_like_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1186=null;
        Token string_literal1187=null;
        PLSQL3Parser.sql_expression_return sql_expression1185 =null;

        PLSQL3Parser.keyLIKEC_return keyLIKEC1188 =null;

        PLSQL3Parser.keyLIKE2_return keyLIKE21189 =null;

        PLSQL3Parser.keyLIKE4_return keyLIKE41190 =null;

        PLSQL3Parser.sql_expression_return sql_expression1191 =null;

        PLSQL3Parser.keyESCAPE_return keyESCAPE1192 =null;

        PLSQL3Parser.sql_expression_return sql_expression1193 =null;


        Object string_literal1186_tree=null;
        Object string_literal1187_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }

            // antlr3/PLSQL3.g:1132:2: ( sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )? )
            // antlr3/PLSQL3.g:1132:4: sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_like7077);
            sql_expression1185=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1185.getTree());

            // antlr3/PLSQL3.g:1132:19: ( 'NOT' )?
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==118) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    // antlr3/PLSQL3.g:1132:21: 'NOT'
                    {
                    string_literal1186=(Token)match(input,118,FOLLOW_118_in_condition_like7081); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1186_tree = 
                    (Object)adaptor.create(string_literal1186)
                    ;
                    adaptor.addChild(root_0, string_literal1186_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1132:30: ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 )
            int alt310=4;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==107) ) {
                alt310=1;
            }
            else if ( (LA310_0==ID) ) {
                int LA310_2 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("LIKEC"))&&(input.LT(1).getText().equalsIgnoreCase("LIKEC")))&&synpred506_PLSQL3())) ) {
                    alt310=2;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("LIKE2"))&&(input.LT(1).getText().equalsIgnoreCase("LIKE2")))&&synpred507_PLSQL3())) ) {
                    alt310=3;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("LIKE4"))) ) {
                    alt310=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);

                throw nvae;

            }
            switch (alt310) {
                case 1 :
                    // antlr3/PLSQL3.g:1132:32: 'LIKE'
                    {
                    string_literal1187=(Token)match(input,107,FOLLOW_107_in_condition_like7088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1187_tree = 
                    (Object)adaptor.create(string_literal1187)
                    ;
                    adaptor.addChild(root_0, string_literal1187_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1132:41: keyLIKEC
                    {
                    pushFollow(FOLLOW_keyLIKEC_in_condition_like7092);
                    keyLIKEC1188=keyLIKEC();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLIKEC1188.getTree());

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:1132:52: keyLIKE2
                    {
                    pushFollow(FOLLOW_keyLIKE2_in_condition_like7096);
                    keyLIKE21189=keyLIKE2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLIKE21189.getTree());

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:1132:63: keyLIKE4
                    {
                    pushFollow(FOLLOW_keyLIKE4_in_condition_like7100);
                    keyLIKE41190=keyLIKE4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLIKE41190.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_sql_expression_in_condition_like7104);
            sql_expression1191=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1191.getTree());

            // antlr3/PLSQL3.g:1132:89: ( keyESCAPE sql_expression )?
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==ID) ) {
                int LA311_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("ESCAPE"))&&(input.LT(1).getText().equalsIgnoreCase("ESCAPE")))&&synpred508_PLSQL3())) ) {
                    alt311=1;
                }
            }
            switch (alt311) {
                case 1 :
                    // antlr3/PLSQL3.g:1132:91: keyESCAPE sql_expression
                    {
                    pushFollow(FOLLOW_keyESCAPE_in_condition_like7108);
                    keyESCAPE1192=keyESCAPE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyESCAPE1192.getTree());

                    pushFollow(FOLLOW_sql_expression_in_condition_like7110);
                    sql_expression1193=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1193.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 212, condition_like_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_like"


    public static class condition_memeber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_memeber"
    // antlr3/PLSQL3.g:1134:1: condition_memeber : sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name ;
    public final PLSQL3Parser.condition_memeber_return condition_memeber() throws RecognitionException {
        PLSQL3Parser.condition_memeber_return retval = new PLSQL3Parser.condition_memeber_return();
        retval.start = input.LT(1);

        int condition_memeber_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1195=null;
        Token string_literal1197=null;
        PLSQL3Parser.sql_expression_return sql_expression1194 =null;

        PLSQL3Parser.keyMEMBER_return keyMEMBER1196 =null;

        PLSQL3Parser.nested_table_column_name_return nested_table_column_name1198 =null;


        Object string_literal1195_tree=null;
        Object string_literal1197_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }

            // antlr3/PLSQL3.g:1135:2: ( sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name )
            // antlr3/PLSQL3.g:1135:4: sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_memeber7123);
            sql_expression1194=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1194.getTree());

            // antlr3/PLSQL3.g:1135:19: ( 'NOT' )?
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==118) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    // antlr3/PLSQL3.g:1135:21: 'NOT'
                    {
                    string_literal1195=(Token)match(input,118,FOLLOW_118_in_condition_memeber7127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1195_tree = 
                    (Object)adaptor.create(string_literal1195)
                    ;
                    adaptor.addChild(root_0, string_literal1195_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_keyMEMBER_in_condition_memeber7132);
            keyMEMBER1196=keyMEMBER();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMEMBER1196.getTree());

            // antlr3/PLSQL3.g:1135:40: ( 'OF' )?
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==125) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    // antlr3/PLSQL3.g:1135:42: 'OF'
                    {
                    string_literal1197=(Token)match(input,125,FOLLOW_125_in_condition_memeber7136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1197_tree = 
                    (Object)adaptor.create(string_literal1197)
                    ;
                    adaptor.addChild(root_0, string_literal1197_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_nested_table_column_name_in_condition_memeber7141);
            nested_table_column_name1198=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1198.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 213, condition_memeber_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_memeber"


    public static class condition_between_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_between"
    // antlr3/PLSQL3.g:1137:1: condition_between : sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression ;
    public final PLSQL3Parser.condition_between_return condition_between() throws RecognitionException {
        PLSQL3Parser.condition_between_return retval = new PLSQL3Parser.condition_between_return();
        retval.start = input.LT(1);

        int condition_between_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1200=null;
        Token string_literal1201=null;
        Token string_literal1203=null;
        PLSQL3Parser.sql_expression_return sql_expression1199 =null;

        PLSQL3Parser.sql_expression_return sql_expression1202 =null;

        PLSQL3Parser.sql_expression_return sql_expression1204 =null;


        Object string_literal1200_tree=null;
        Object string_literal1201_tree=null;
        Object string_literal1203_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }

            // antlr3/PLSQL3.g:1138:2: ( sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression )
            // antlr3/PLSQL3.g:1138:4: sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_expression_in_condition_between7151);
            sql_expression1199=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1199.getTree());

            // antlr3/PLSQL3.g:1138:19: ( 'NOT' )?
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==118) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    // antlr3/PLSQL3.g:1138:21: 'NOT'
                    {
                    string_literal1200=(Token)match(input,118,FOLLOW_118_in_condition_between7155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1200_tree = 
                    (Object)adaptor.create(string_literal1200)
                    ;
                    adaptor.addChild(root_0, string_literal1200_tree);
                    }

                    }
                    break;

            }


            string_literal1201=(Token)match(input,57,FOLLOW_57_in_condition_between7160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1201_tree = 
            (Object)adaptor.create(string_literal1201)
            ;
            adaptor.addChild(root_0, string_literal1201_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_condition_between7162);
            sql_expression1202=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1202.getTree());

            string_literal1203=(Token)match(input,51,FOLLOW_51_in_condition_between7164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1203_tree = 
            (Object)adaptor.create(string_literal1203)
            ;
            adaptor.addChild(root_0, string_literal1203_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_condition_between7166);
            sql_expression1204=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1204.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 214, condition_between_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_between"


    public static class condition_regexp_like_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_regexp_like"
    // antlr3/PLSQL3.g:1140:1: condition_regexp_like : keyREGEXP_LIKE LPAREN call_parameters RPAREN ;
    public final PLSQL3Parser.condition_regexp_like_return condition_regexp_like() throws RecognitionException {
        PLSQL3Parser.condition_regexp_like_return retval = new PLSQL3Parser.condition_regexp_like_return();
        retval.start = input.LT(1);

        int condition_regexp_like_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1206=null;
        Token RPAREN1208=null;
        PLSQL3Parser.keyREGEXP_LIKE_return keyREGEXP_LIKE1205 =null;

        PLSQL3Parser.call_parameters_return call_parameters1207 =null;


        Object LPAREN1206_tree=null;
        Object RPAREN1208_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }

            // antlr3/PLSQL3.g:1141:2: ( keyREGEXP_LIKE LPAREN call_parameters RPAREN )
            // antlr3/PLSQL3.g:1141:4: keyREGEXP_LIKE LPAREN call_parameters RPAREN
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like7176);
            keyREGEXP_LIKE1205=keyREGEXP_LIKE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREGEXP_LIKE1205.getTree());

            LPAREN1206=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_regexp_like7178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1206_tree = 
            (Object)adaptor.create(LPAREN1206)
            ;
            adaptor.addChild(root_0, LPAREN1206_tree);
            }

            pushFollow(FOLLOW_call_parameters_in_condition_regexp_like7180);
            call_parameters1207=call_parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameters1207.getTree());

            RPAREN1208=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_regexp_like7182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1208_tree = 
            (Object)adaptor.create(RPAREN1208)
            ;
            adaptor.addChild(root_0, RPAREN1208_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 215, condition_regexp_like_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_regexp_like"


    public static class condition_submultiset_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_submultiset"
    // antlr3/PLSQL3.g:1143:1: condition_submultiset : nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name ;
    public final PLSQL3Parser.condition_submultiset_return condition_submultiset() throws RecognitionException {
        PLSQL3Parser.condition_submultiset_return retval = new PLSQL3Parser.condition_submultiset_return();
        retval.start = input.LT(1);

        int condition_submultiset_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1210=null;
        Token string_literal1212=null;
        PLSQL3Parser.nested_table_column_name_return nested_table_column_name1209 =null;

        PLSQL3Parser.keySUBMULTISET_return keySUBMULTISET1211 =null;

        PLSQL3Parser.nested_table_column_name_return nested_table_column_name1213 =null;


        Object string_literal1210_tree=null;
        Object string_literal1212_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }

            // antlr3/PLSQL3.g:1144:2: ( nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name )
            // antlr3/PLSQL3.g:1144:4: nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset7192);
            nested_table_column_name1209=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1209.getTree());

            // antlr3/PLSQL3.g:1144:29: ( 'NOT' )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==118) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    // antlr3/PLSQL3.g:1144:31: 'NOT'
                    {
                    string_literal1210=(Token)match(input,118,FOLLOW_118_in_condition_submultiset7196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1210_tree = 
                    (Object)adaptor.create(string_literal1210)
                    ;
                    adaptor.addChild(root_0, string_literal1210_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_keySUBMULTISET_in_condition_submultiset7201);
            keySUBMULTISET1211=keySUBMULTISET();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySUBMULTISET1211.getTree());

            // antlr3/PLSQL3.g:1144:55: ( 'OF' )?
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==125) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    // antlr3/PLSQL3.g:1144:57: 'OF'
                    {
                    string_literal1212=(Token)match(input,125,FOLLOW_125_in_condition_submultiset7205); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1212_tree = 
                    (Object)adaptor.create(string_literal1212)
                    ;
                    adaptor.addChild(root_0, string_literal1212_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset7210);
            nested_table_column_name1213=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1213.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 216, condition_submultiset_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_submultiset"


    public static class condition_equals_path_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_equals_path"
    // antlr3/PLSQL3.g:1146:1: condition_equals_path : keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN ;
    public final PLSQL3Parser.condition_equals_path_return condition_equals_path() throws RecognitionException {
        PLSQL3Parser.condition_equals_path_return retval = new PLSQL3Parser.condition_equals_path_return();
        retval.start = input.LT(1);

        int condition_equals_path_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1215=null;
        Token COMMA1217=null;
        Token COMMA1219=null;
        Token RPAREN1221=null;
        PLSQL3Parser.keyEQUALS_PATH_return keyEQUALS_PATH1214 =null;

        PLSQL3Parser.column_name_return column_name1216 =null;

        PLSQL3Parser.path_string_return path_string1218 =null;

        PLSQL3Parser.correlation_integer_return correlation_integer1220 =null;


        Object LPAREN1215_tree=null;
        Object COMMA1217_tree=null;
        Object COMMA1219_tree=null;
        Object RPAREN1221_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }

            // antlr3/PLSQL3.g:1147:2: ( keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN )
            // antlr3/PLSQL3.g:1147:4: keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyEQUALS_PATH_in_condition_equals_path7220);
            keyEQUALS_PATH1214=keyEQUALS_PATH();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEQUALS_PATH1214.getTree());

            LPAREN1215=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_equals_path7222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1215_tree = 
            (Object)adaptor.create(LPAREN1215)
            ;
            adaptor.addChild(root_0, LPAREN1215_tree);
            }

            pushFollow(FOLLOW_column_name_in_condition_equals_path7224);
            column_name1216=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1216.getTree());

            COMMA1217=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path7226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA1217_tree = 
            (Object)adaptor.create(COMMA1217)
            ;
            adaptor.addChild(root_0, COMMA1217_tree);
            }

            pushFollow(FOLLOW_path_string_in_condition_equals_path7228);
            path_string1218=path_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_string1218.getTree());

            // antlr3/PLSQL3.g:1147:56: ( COMMA correlation_integer )?
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==COMMA) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    // antlr3/PLSQL3.g:1147:58: COMMA correlation_integer
                    {
                    COMMA1219=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path7232); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA1219_tree = 
                    (Object)adaptor.create(COMMA1219)
                    ;
                    adaptor.addChild(root_0, COMMA1219_tree);
                    }

                    pushFollow(FOLLOW_correlation_integer_in_condition_equals_path7234);
                    correlation_integer1220=correlation_integer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, correlation_integer1220.getTree());

                    }
                    break;

            }


            RPAREN1221=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_equals_path7239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1221_tree = 
            (Object)adaptor.create(RPAREN1221)
            ;
            adaptor.addChild(root_0, RPAREN1221_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 217, condition_equals_path_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_equals_path"


    public static class condition_under_path_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_under_path"
    // antlr3/PLSQL3.g:1149:1: condition_under_path : keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN ;
    public final PLSQL3Parser.condition_under_path_return condition_under_path() throws RecognitionException {
        PLSQL3Parser.condition_under_path_return retval = new PLSQL3Parser.condition_under_path_return();
        retval.start = input.LT(1);

        int condition_under_path_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1223=null;
        Token COMMA1225=null;
        Token COMMA1227=null;
        Token COMMA1229=null;
        Token RPAREN1231=null;
        PLSQL3Parser.keyUNDER_PATH_return keyUNDER_PATH1222 =null;

        PLSQL3Parser.column_name_return column_name1224 =null;

        PLSQL3Parser.levels_return levels1226 =null;

        PLSQL3Parser.path_string_return path_string1228 =null;

        PLSQL3Parser.correlation_integer_return correlation_integer1230 =null;


        Object LPAREN1223_tree=null;
        Object COMMA1225_tree=null;
        Object COMMA1227_tree=null;
        Object COMMA1229_tree=null;
        Object RPAREN1231_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }

            // antlr3/PLSQL3.g:1150:2: ( keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN )
            // antlr3/PLSQL3.g:1150:4: keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyUNDER_PATH_in_condition_under_path7249);
            keyUNDER_PATH1222=keyUNDER_PATH();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUNDER_PATH1222.getTree());

            LPAREN1223=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_under_path7251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1223_tree = 
            (Object)adaptor.create(LPAREN1223)
            ;
            adaptor.addChild(root_0, LPAREN1223_tree);
            }

            pushFollow(FOLLOW_column_name_in_condition_under_path7253);
            column_name1224=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1224.getTree());

            // antlr3/PLSQL3.g:1150:37: ( COMMA levels )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==COMMA) ) {
                int LA318_1 = input.LA(2);

                if ( (LA318_1==NUMBER) ) {
                    alt318=1;
                }
            }
            switch (alt318) {
                case 1 :
                    // antlr3/PLSQL3.g:1150:39: COMMA levels
                    {
                    COMMA1225=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path7257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA1225_tree = 
                    (Object)adaptor.create(COMMA1225)
                    ;
                    adaptor.addChild(root_0, COMMA1225_tree);
                    }

                    pushFollow(FOLLOW_levels_in_condition_under_path7259);
                    levels1226=levels();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, levels1226.getTree());

                    }
                    break;

            }


            COMMA1227=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path7264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA1227_tree = 
            (Object)adaptor.create(COMMA1227)
            ;
            adaptor.addChild(root_0, COMMA1227_tree);
            }

            pushFollow(FOLLOW_path_string_in_condition_under_path7266);
            path_string1228=path_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_string1228.getTree());

            // antlr3/PLSQL3.g:1150:73: ( COMMA correlation_integer )?
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==COMMA) ) {
                alt319=1;
            }
            switch (alt319) {
                case 1 :
                    // antlr3/PLSQL3.g:1150:75: COMMA correlation_integer
                    {
                    COMMA1229=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path7270); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA1229_tree = 
                    (Object)adaptor.create(COMMA1229)
                    ;
                    adaptor.addChild(root_0, COMMA1229_tree);
                    }

                    pushFollow(FOLLOW_correlation_integer_in_condition_under_path7272);
                    correlation_integer1230=correlation_integer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, correlation_integer1230.getTree());

                    }
                    break;

            }


            RPAREN1231=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_under_path7277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1231_tree = 
            (Object)adaptor.create(RPAREN1231)
            ;
            adaptor.addChild(root_0, RPAREN1231_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 218, condition_under_path_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "condition_under_path"


    public static class levels_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "levels"
    // antlr3/PLSQL3.g:1152:1: levels : integer ;
    public final PLSQL3Parser.levels_return levels() throws RecognitionException {
        PLSQL3Parser.levels_return retval = new PLSQL3Parser.levels_return();
        retval.start = input.LT(1);

        int levels_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.integer_return integer1232 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }

            // antlr3/PLSQL3.g:1153:2: ( integer )
            // antlr3/PLSQL3.g:1153:4: integer
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_integer_in_levels7287);
            integer1232=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1232.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 219, levels_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "levels"


    public static class correlation_integer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "correlation_integer"
    // antlr3/PLSQL3.g:1155:1: correlation_integer : integer ;
    public final PLSQL3Parser.correlation_integer_return correlation_integer() throws RecognitionException {
        PLSQL3Parser.correlation_integer_return retval = new PLSQL3Parser.correlation_integer_return();
        retval.start = input.LT(1);

        int correlation_integer_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.integer_return integer1233 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }

            // antlr3/PLSQL3.g:1156:2: ( integer )
            // antlr3/PLSQL3.g:1156:4: integer
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_integer_in_correlation_integer7297);
            integer1233=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1233.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 220, correlation_integer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "correlation_integer"


    public static class path_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_string"
    // antlr3/PLSQL3.g:1158:1: path_string : QUOTED_STRING ;
    public final PLSQL3Parser.path_string_return path_string() throws RecognitionException {
        PLSQL3Parser.path_string_return retval = new PLSQL3Parser.path_string_return();
        retval.start = input.LT(1);

        int path_string_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING1234=null;

        Object QUOTED_STRING1234_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }

            // antlr3/PLSQL3.g:1159:2: ( QUOTED_STRING )
            // antlr3/PLSQL3.g:1159:4: QUOTED_STRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTED_STRING1234=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_path_string7307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1234_tree = 
            (Object)adaptor.create(QUOTED_STRING1234)
            ;
            adaptor.addChild(root_0, QUOTED_STRING1234_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 221, path_string_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "path_string"


    public static class grouping_expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_expression_list"
    // antlr3/PLSQL3.g:1161:1: grouping_expression_list : expression_list ( COMMA expression_list )* ;
    public final PLSQL3Parser.grouping_expression_list_return grouping_expression_list() throws RecognitionException {
        PLSQL3Parser.grouping_expression_list_return retval = new PLSQL3Parser.grouping_expression_list_return();
        retval.start = input.LT(1);

        int grouping_expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1236=null;
        PLSQL3Parser.expression_list_return expression_list1235 =null;

        PLSQL3Parser.expression_list_return expression_list1237 =null;


        Object COMMA1236_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }

            // antlr3/PLSQL3.g:1162:2: ( expression_list ( COMMA expression_list )* )
            // antlr3/PLSQL3.g:1162:4: expression_list ( COMMA expression_list )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_list_in_grouping_expression_list7317);
            expression_list1235=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1235.getTree());

            // antlr3/PLSQL3.g:1162:20: ( COMMA expression_list )*
            loop320:
            do {
                int alt320=2;
                int LA320_0 = input.LA(1);

                if ( (LA320_0==COMMA) ) {
                    int LA320_1 = input.LA(2);

                    if ( (synpred517_PLSQL3()) ) {
                        alt320=1;
                    }


                }


                switch (alt320) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1162:22: COMMA expression_list
            	    {
            	    COMMA1236=(Token)match(input,COMMA,FOLLOW_COMMA_in_grouping_expression_list7321); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1236_tree = 
            	    (Object)adaptor.create(COMMA1236)
            	    ;
            	    adaptor.addChild(root_0, COMMA1236_tree);
            	    }

            	    pushFollow(FOLLOW_expression_list_in_grouping_expression_list7323);
            	    expression_list1237=expression_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1237.getTree());

            	    }
            	    break;

            	default :
            	    break loop320;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 222, grouping_expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "grouping_expression_list"


    public static class expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression_list"
    // antlr3/PLSQL3.g:1164:1: expression_list : ( LPAREN sql_expressions RPAREN | sql_expressions );
    public final PLSQL3Parser.expression_list_return expression_list() throws RecognitionException {
        PLSQL3Parser.expression_list_return retval = new PLSQL3Parser.expression_list_return();
        retval.start = input.LT(1);

        int expression_list_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1238=null;
        Token RPAREN1240=null;
        PLSQL3Parser.sql_expressions_return sql_expressions1239 =null;

        PLSQL3Parser.sql_expressions_return sql_expressions1241 =null;


        Object LPAREN1238_tree=null;
        Object RPAREN1240_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }

            // antlr3/PLSQL3.g:1165:2: ( LPAREN sql_expressions RPAREN | sql_expressions )
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==LPAREN) ) {
                int LA321_1 = input.LA(2);

                if ( (synpred518_PLSQL3()) ) {
                    alt321=1;
                }
                else if ( (true) ) {
                    alt321=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 321, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA321_0==DOUBLEQUOTED_STRING||LA321_0==ID||LA321_0==MINUS||LA321_0==NUMBER||LA321_0==PLUS||LA321_0==QUOTED_STRING||LA321_0==65||LA321_0==81||LA321_0==89||LA321_0==120||LA321_0==144||LA321_0==147||LA321_0==151||LA321_0==156) ) {
                alt321=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 321, 0, input);

                throw nvae;

            }
            switch (alt321) {
                case 1 :
                    // antlr3/PLSQL3.g:1165:4: LPAREN sql_expressions RPAREN
                    {
                    root_0 = (Object)adaptor.nil();


                    LPAREN1238=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expression_list7336); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1238_tree = 
                    (Object)adaptor.create(LPAREN1238)
                    ;
                    adaptor.addChild(root_0, LPAREN1238_tree);
                    }

                    pushFollow(FOLLOW_sql_expressions_in_expression_list7338);
                    sql_expressions1239=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1239.getTree());

                    RPAREN1240=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expression_list7340); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1240_tree = 
                    (Object)adaptor.create(RPAREN1240)
                    ;
                    adaptor.addChild(root_0, RPAREN1240_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1166:4: sql_expressions
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expressions_in_expression_list7345);
                    sql_expressions1241=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1241.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 223, expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression_list"


    public static class cell_reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_reference"
    // antlr3/PLSQL3.g:1168:1: cell_reference : sql_identifier ;
    public final PLSQL3Parser.cell_reference_return cell_reference() throws RecognitionException {
        PLSQL3Parser.cell_reference_return retval = new PLSQL3Parser.cell_reference_return();
        retval.start = input.LT(1);

        int cell_reference_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_identifier_return sql_identifier1242 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }

            // antlr3/PLSQL3.g:1169:2: ( sql_identifier )
            // antlr3/PLSQL3.g:1169:4: sql_identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sql_identifier_in_cell_reference7355);
            sql_identifier1242=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1242.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 224, cell_reference_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cell_reference"


    public static class call_parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "call_parameters"
    // antlr3/PLSQL3.g:1171:1: call_parameters : call_parameter ( COMMA call_parameter )* ;
    public final PLSQL3Parser.call_parameters_return call_parameters() throws RecognitionException {
        PLSQL3Parser.call_parameters_return retval = new PLSQL3Parser.call_parameters_return();
        retval.start = input.LT(1);

        int call_parameters_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1244=null;
        PLSQL3Parser.call_parameter_return call_parameter1243 =null;

        PLSQL3Parser.call_parameter_return call_parameter1245 =null;


        Object COMMA1244_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }

            // antlr3/PLSQL3.g:1172:2: ( call_parameter ( COMMA call_parameter )* )
            // antlr3/PLSQL3.g:1172:4: call_parameter ( COMMA call_parameter )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_call_parameter_in_call_parameters7365);
            call_parameter1243=call_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameter1243.getTree());

            // antlr3/PLSQL3.g:1172:19: ( COMMA call_parameter )*
            loop322:
            do {
                int alt322=2;
                int LA322_0 = input.LA(1);

                if ( (LA322_0==COMMA) ) {
                    alt322=1;
                }


                switch (alt322) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1172:21: COMMA call_parameter
            	    {
            	    COMMA1244=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_parameters7369); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1244_tree = 
            	    (Object)adaptor.create(COMMA1244)
            	    ;
            	    adaptor.addChild(root_0, COMMA1244_tree);
            	    }

            	    pushFollow(FOLLOW_call_parameter_in_call_parameters7371);
            	    call_parameter1245=call_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameter1245.getTree());

            	    }
            	    break;

            	default :
            	    break loop322;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 225, call_parameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "call_parameters"


    public static class call_parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "call_parameter"
    // antlr3/PLSQL3.g:1174:1: call_parameter : ( parameter_name ARROW )? nested_expression ;
    public final PLSQL3Parser.call_parameter_return call_parameter() throws RecognitionException {
        PLSQL3Parser.call_parameter_return retval = new PLSQL3Parser.call_parameter_return();
        retval.start = input.LT(1);

        int call_parameter_StartIndex = input.index();

        Object root_0 = null;

        Token ARROW1247=null;
        PLSQL3Parser.parameter_name_return parameter_name1246 =null;

        PLSQL3Parser.nested_expression_return nested_expression1248 =null;


        Object ARROW1247_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }

            // antlr3/PLSQL3.g:1175:2: ( ( parameter_name ARROW )? nested_expression )
            // antlr3/PLSQL3.g:1175:4: ( parameter_name ARROW )? nested_expression
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1175:4: ( parameter_name ARROW )?
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==ID) ) {
                int LA323_1 = input.LA(2);

                if ( (LA323_1==ARROW) ) {
                    alt323=1;
                }
            }
            else if ( (LA323_0==DOUBLEQUOTED_STRING) ) {
                int LA323_3 = input.LA(2);

                if ( (LA323_3==ARROW) ) {
                    alt323=1;
                }
            }
            switch (alt323) {
                case 1 :
                    // antlr3/PLSQL3.g:1175:6: parameter_name ARROW
                    {
                    pushFollow(FOLLOW_parameter_name_in_call_parameter7386);
                    parameter_name1246=parameter_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_name1246.getTree());

                    ARROW1247=(Token)match(input,ARROW,FOLLOW_ARROW_in_call_parameter7388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARROW1247_tree = 
                    (Object)adaptor.create(ARROW1247)
                    ;
                    adaptor.addChild(root_0, ARROW1247_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_nested_expression_in_call_parameter7393);
            nested_expression1248=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1248.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 226, call_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "call_parameter"


    public static class relational_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relational_op"
    // antlr3/PLSQL3.g:1178:1: relational_op : ( EQ | LTH | GTH | NOT_EQ | LEQ | GEQ );
    public final PLSQL3Parser.relational_op_return relational_op() throws RecognitionException {
        PLSQL3Parser.relational_op_return retval = new PLSQL3Parser.relational_op_return();
        retval.start = input.LT(1);

        int relational_op_StartIndex = input.index();

        Object root_0 = null;

        Token set1249=null;

        Object set1249_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }

            // antlr3/PLSQL3.g:1179:2: ( EQ | LTH | GTH | NOT_EQ | LEQ | GEQ )
            // antlr3/PLSQL3.g:
            {
            root_0 = (Object)adaptor.nil();


            set1249=(Token)input.LT(1);

            if ( input.LA(1)==EQ||(input.LA(1) >= GEQ && input.LA(1) <= GTH)||input.LA(1)==LEQ||input.LA(1)==LTH||input.LA(1)==NOT_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set1249)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 227, relational_op_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "relational_op"


    public static class exp_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exp_set"
    // antlr3/PLSQL3.g:1182:1: exp_set : ( ( sql_expression )=> sql_expression | subquery );
    public final PLSQL3Parser.exp_set_return exp_set() throws RecognitionException {
        PLSQL3Parser.exp_set_return retval = new PLSQL3Parser.exp_set_return();
        retval.start = input.LT(1);

        int exp_set_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.sql_expression_return sql_expression1250 =null;

        PLSQL3Parser.subquery_return subquery1251 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }

            // antlr3/PLSQL3.g:1183:2: ( ( sql_expression )=> sql_expression | subquery )
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==MINUS||LA324_0==PLUS) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==LPAREN) ) {
                int LA324_2 = input.LA(2);

                if ( (synpred526_PLSQL3()) ) {
                    alt324=1;
                }
                else if ( (true) ) {
                    alt324=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 324, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA324_0==ID) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==144) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==DOUBLEQUOTED_STRING) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==81) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==65) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==89||LA324_0==156) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==151) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==QUOTED_STRING) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==NUMBER) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==120) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else if ( (LA324_0==147) && (synpred526_PLSQL3())) {
                alt324=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 324, 0, input);

                throw nvae;

            }
            switch (alt324) {
                case 1 :
                    // antlr3/PLSQL3.g:1183:4: ( sql_expression )=> sql_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_expression_in_exp_set7443);
                    sql_expression1250=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1250.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1184:4: subquery
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_subquery_in_exp_set7448);
                    subquery1251=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1251.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 228, exp_set_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exp_set"


    public static class subquery_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subquery"
    // antlr3/PLSQL3.g:1187:1: subquery : LPAREN select_command RPAREN ;
    public final PLSQL3Parser.subquery_return subquery() throws RecognitionException {
        PLSQL3Parser.subquery_return retval = new PLSQL3Parser.subquery_return();
        retval.start = input.LT(1);

        int subquery_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1252=null;
        Token RPAREN1254=null;
        PLSQL3Parser.select_command_return select_command1253 =null;


        Object LPAREN1252_tree=null;
        Object RPAREN1254_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }

            // antlr3/PLSQL3.g:1188:2: ( LPAREN select_command RPAREN )
            // antlr3/PLSQL3.g:1188:4: LPAREN select_command RPAREN
            {
            root_0 = (Object)adaptor.nil();


            LPAREN1252=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subquery7459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1252_tree = 
            (Object)adaptor.create(LPAREN1252)
            ;
            adaptor.addChild(root_0, LPAREN1252_tree);
            }

            pushFollow(FOLLOW_select_command_in_subquery7461);
            select_command1253=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1253.getTree());

            RPAREN1254=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subquery7463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1254_tree = 
            (Object)adaptor.create(RPAREN1254)
            ;
            adaptor.addChild(root_0, RPAREN1254_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 229, subquery_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "subquery"


    public static class connect_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "connect_clause"
    // antlr3/PLSQL3.g:1191:1: connect_clause : ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )? ;
    public final PLSQL3Parser.connect_clause_return connect_clause() throws RecognitionException {
        PLSQL3Parser.connect_clause_return retval = new PLSQL3Parser.connect_clause_return();
        retval.start = input.LT(1);

        int connect_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1255=null;
        Token string_literal1256=null;
        Token string_literal1258=null;
        Token string_literal1259=null;
        Token string_literal1260=null;
        Token string_literal1267=null;
        Token string_literal1268=null;
        Token string_literal1272=null;
        Token string_literal1274=null;
        Token string_literal1276=null;
        Token string_literal1277=null;
        PLSQL3Parser.sql_condition_return sql_condition1257 =null;

        PLSQL3Parser.sql_expression_return sql_expression1261 =null;

        PLSQL3Parser.relational_op_return relational_op1262 =null;

        PLSQL3Parser.sql_expression_return sql_expression1263 =null;

        PLSQL3Parser.sql_expression_return sql_expression1264 =null;

        PLSQL3Parser.relational_op_return relational_op1265 =null;

        PLSQL3Parser.sql_expression_return sql_expression1266 =null;

        PLSQL3Parser.sql_condition_return sql_condition1269 =null;

        PLSQL3Parser.sql_expression_return sql_expression1270 =null;

        PLSQL3Parser.relational_op_return relational_op1271 =null;

        PLSQL3Parser.sql_expression_return sql_expression1273 =null;

        PLSQL3Parser.sql_condition_return sql_condition1275 =null;

        PLSQL3Parser.sql_condition_return sql_condition1278 =null;


        Object string_literal1255_tree=null;
        Object string_literal1256_tree=null;
        Object string_literal1258_tree=null;
        Object string_literal1259_tree=null;
        Object string_literal1260_tree=null;
        Object string_literal1267_tree=null;
        Object string_literal1268_tree=null;
        Object string_literal1272_tree=null;
        Object string_literal1274_tree=null;
        Object string_literal1276_tree=null;
        Object string_literal1277_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }

            // antlr3/PLSQL3.g:1192:2: ( ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )? )
            // antlr3/PLSQL3.g:1192:4: ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1192:4: ( 'START' 'WITH' sql_condition )?
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==152) ) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    // antlr3/PLSQL3.g:1192:6: 'START' 'WITH' sql_condition
                    {
                    string_literal1255=(Token)match(input,152,FOLLOW_152_in_connect_clause7476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1255_tree = 
                    (Object)adaptor.create(string_literal1255)
                    ;
                    adaptor.addChild(root_0, string_literal1255_tree);
                    }

                    string_literal1256=(Token)match(input,167,FOLLOW_167_in_connect_clause7478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1256_tree = 
                    (Object)adaptor.create(string_literal1256)
                    ;
                    adaptor.addChild(root_0, string_literal1256_tree);
                    }

                    pushFollow(FOLLOW_sql_condition_in_connect_clause7480);
                    sql_condition1257=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1257.getTree());

                    }
                    break;

            }


            string_literal1258=(Token)match(input,71,FOLLOW_71_in_connect_clause7487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1258_tree = 
            (Object)adaptor.create(string_literal1258)
            ;
            adaptor.addChild(root_0, string_literal1258_tree);
            }

            string_literal1259=(Token)match(input,64,FOLLOW_64_in_connect_clause7489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1259_tree = 
            (Object)adaptor.create(string_literal1259)
            ;
            adaptor.addChild(root_0, string_literal1259_tree);
            }

            // antlr3/PLSQL3.g:1194:3: ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' )
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==134) ) {
                alt326=1;
            }
            else if ( (LA326_0==DOUBLEQUOTED_STRING||LA326_0==ID||LA326_0==LPAREN||LA326_0==MINUS||LA326_0==NUMBER||LA326_0==PLUS||LA326_0==QUOTED_STRING||LA326_0==65||LA326_0==81||LA326_0==89||LA326_0==120||LA326_0==144||LA326_0==147||LA326_0==151||LA326_0==156) ) {
                alt326=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 0, input);

                throw nvae;

            }
            switch (alt326) {
                case 1 :
                    // antlr3/PLSQL3.g:1194:5: 'PRIOR' sql_expression relational_op sql_expression
                    {
                    string_literal1260=(Token)match(input,134,FOLLOW_134_in_connect_clause7496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1260_tree = 
                    (Object)adaptor.create(string_literal1260)
                    ;
                    adaptor.addChild(root_0, string_literal1260_tree);
                    }

                    pushFollow(FOLLOW_sql_expression_in_connect_clause7498);
                    sql_expression1261=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1261.getTree());

                    pushFollow(FOLLOW_relational_op_in_connect_clause7500);
                    relational_op1262=relational_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1262.getTree());

                    pushFollow(FOLLOW_sql_expression_in_connect_clause7502);
                    sql_expression1263=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1263.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1195:5: sql_expression relational_op sql_expression 'PRIOR'
                    {
                    pushFollow(FOLLOW_sql_expression_in_connect_clause7508);
                    sql_expression1264=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1264.getTree());

                    pushFollow(FOLLOW_relational_op_in_connect_clause7510);
                    relational_op1265=relational_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1265.getTree());

                    pushFollow(FOLLOW_sql_expression_in_connect_clause7512);
                    sql_expression1266=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1266.getTree());

                    string_literal1267=(Token)match(input,134,FOLLOW_134_in_connect_clause7514); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1267_tree = 
                    (Object)adaptor.create(string_literal1267)
                    ;
                    adaptor.addChild(root_0, string_literal1267_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1197:3: ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? )
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==134) && (synpred530_PLSQL3())) {
                alt330=1;
            }
            else if ( (LA330_0==118) && (synpred530_PLSQL3())) {
                alt330=1;
            }
            else if ( (LA330_0==88) && (synpred530_PLSQL3())) {
                alt330=1;
            }
            else if ( (LA330_0==MINUS||LA330_0==PLUS) ) {
                int LA330_4 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==LPAREN) ) {
                int LA330_5 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==ID) ) {
                int LA330_6 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==144) ) {
                int LA330_7 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==DOUBLEQUOTED_STRING) ) {
                int LA330_8 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==81) ) {
                int LA330_9 = input.LA(2);

                if ( (((( is_sql )&&( is_sql ))&&synpred530_PLSQL3())) ) {
                    alt330=1;
                }
                else if ( (( is_sql )) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==65) ) {
                int LA330_10 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==89||LA330_0==156) ) {
                int LA330_11 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==151) ) {
                int LA330_12 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==QUOTED_STRING) ) {
                int LA330_13 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==NUMBER) ) {
                int LA330_14 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==120) ) {
                int LA330_15 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==147) ) {
                int LA330_16 = input.LA(2);

                if ( (synpred530_PLSQL3()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA330_0==52) && (synpred530_PLSQL3())) {
                alt330=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 330, 0, input);

                throw nvae;

            }
            switch (alt330) {
                case 1 :
                    // antlr3/PLSQL3.g:1197:5: ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition
                    {
                    // antlr3/PLSQL3.g:1197:39: ( 'PRIOR' )?
                    int alt327=2;
                    int LA327_0 = input.LA(1);

                    if ( (LA327_0==134) ) {
                        int LA327_1 = input.LA(2);

                        if ( (synpred531_PLSQL3()) ) {
                            alt327=1;
                        }
                    }
                    switch (alt327) {
                        case 1 :
                            // antlr3/PLSQL3.g:1197:40: 'PRIOR'
                            {
                            string_literal1268=(Token)match(input,134,FOLLOW_134_in_connect_clause7540); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1268_tree = 
                            (Object)adaptor.create(string_literal1268)
                            ;
                            adaptor.addChild(root_0, string_literal1268_tree);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_sql_condition_in_connect_clause7544);
                    sql_condition1269=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1269.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1198:5: sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )?
                    {
                    pushFollow(FOLLOW_sql_expression_in_connect_clause7550);
                    sql_expression1270=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1270.getTree());

                    pushFollow(FOLLOW_relational_op_in_connect_clause7552);
                    relational_op1271=relational_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1271.getTree());

                    // antlr3/PLSQL3.g:1198:34: ( 'PRIOR' )?
                    int alt328=2;
                    int LA328_0 = input.LA(1);

                    if ( (LA328_0==134) ) {
                        alt328=1;
                    }
                    switch (alt328) {
                        case 1 :
                            // antlr3/PLSQL3.g:1198:36: 'PRIOR'
                            {
                            string_literal1272=(Token)match(input,134,FOLLOW_134_in_connect_clause7556); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1272_tree = 
                            (Object)adaptor.create(string_literal1272)
                            ;
                            adaptor.addChild(root_0, string_literal1272_tree);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_sql_expression_in_connect_clause7561);
                    sql_expression1273=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1273.getTree());

                    // antlr3/PLSQL3.g:1198:62: ( 'AND' sql_condition )?
                    int alt329=2;
                    int LA329_0 = input.LA(1);

                    if ( (LA329_0==51) ) {
                        alt329=1;
                    }
                    switch (alt329) {
                        case 1 :
                            // antlr3/PLSQL3.g:1198:64: 'AND' sql_condition
                            {
                            string_literal1274=(Token)match(input,51,FOLLOW_51_in_connect_clause7565); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1274_tree = 
                            (Object)adaptor.create(string_literal1274)
                            ;
                            adaptor.addChild(root_0, string_literal1274_tree);
                            }

                            pushFollow(FOLLOW_sql_condition_in_connect_clause7567);
                            sql_condition1275=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1275.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // antlr3/PLSQL3.g:1200:3: ( 'START' 'WITH' sql_condition )?
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( (LA331_0==152) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    // antlr3/PLSQL3.g:1200:5: 'START' 'WITH' sql_condition
                    {
                    string_literal1276=(Token)match(input,152,FOLLOW_152_in_connect_clause7580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1276_tree = 
                    (Object)adaptor.create(string_literal1276)
                    ;
                    adaptor.addChild(root_0, string_literal1276_tree);
                    }

                    string_literal1277=(Token)match(input,167,FOLLOW_167_in_connect_clause7582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1277_tree = 
                    (Object)adaptor.create(string_literal1277)
                    ;
                    adaptor.addChild(root_0, string_literal1277_tree);
                    }

                    pushFollow(FOLLOW_sql_condition_in_connect_clause7584);
                    sql_condition1278=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1278.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 230, connect_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "connect_clause"


    public static class group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // antlr3/PLSQL3.g:1203:1: group_clause : 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )? ;
    public final PLSQL3Parser.group_clause_return group_clause() throws RecognitionException {
        PLSQL3Parser.group_clause_return retval = new PLSQL3Parser.group_clause_return();
        retval.start = input.LT(1);

        int group_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1279=null;
        Token string_literal1280=null;
        Token COMMA1282=null;
        Token string_literal1284=null;
        PLSQL3Parser.sql_expression_return sql_expression1281 =null;

        PLSQL3Parser.sql_expression_return sql_expression1283 =null;

        PLSQL3Parser.sql_condition_return sql_condition1285 =null;


        Object string_literal1279_tree=null;
        Object string_literal1280_tree=null;
        Object COMMA1282_tree=null;
        Object string_literal1284_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }

            // antlr3/PLSQL3.g:1204:2: ( 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )? )
            // antlr3/PLSQL3.g:1204:4: 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal1279=(Token)match(input,96,FOLLOW_96_in_group_clause7598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1279_tree = 
            (Object)adaptor.create(string_literal1279)
            ;
            adaptor.addChild(root_0, string_literal1279_tree);
            }

            string_literal1280=(Token)match(input,64,FOLLOW_64_in_group_clause7600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1280_tree = 
            (Object)adaptor.create(string_literal1280)
            ;
            adaptor.addChild(root_0, string_literal1280_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_group_clause7602);
            sql_expression1281=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1281.getTree());

            // antlr3/PLSQL3.g:1204:32: ( COMMA sql_expression )*
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);

                if ( (LA332_0==COMMA) ) {
                    alt332=1;
                }


                switch (alt332) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1204:34: COMMA sql_expression
            	    {
            	    COMMA1282=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_clause7606); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1282_tree = 
            	    (Object)adaptor.create(COMMA1282)
            	    ;
            	    adaptor.addChild(root_0, COMMA1282_tree);
            	    }

            	    pushFollow(FOLLOW_sql_expression_in_group_clause7608);
            	    sql_expression1283=sql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1283.getTree());

            	    }
            	    break;

            	default :
            	    break loop332;
                }
            } while (true);


            // antlr3/PLSQL3.g:1204:58: ( 'HAVING' sql_condition )?
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==97) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    // antlr3/PLSQL3.g:1204:60: 'HAVING' sql_condition
                    {
                    string_literal1284=(Token)match(input,97,FOLLOW_97_in_group_clause7615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1284_tree = 
                    (Object)adaptor.create(string_literal1284)
                    ;
                    adaptor.addChild(root_0, string_literal1284_tree);
                    }

                    pushFollow(FOLLOW_sql_condition_in_group_clause7617);
                    sql_condition1285=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1285.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 231, group_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class set_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "set_clause"
    // antlr3/PLSQL3.g:1207:1: set_clause : ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command ;
    public final PLSQL3Parser.set_clause_return set_clause() throws RecognitionException {
        PLSQL3Parser.set_clause_return retval = new PLSQL3Parser.set_clause_return();
        retval.start = input.LT(1);

        int set_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1286=null;
        Token string_literal1287=null;
        Token string_literal1288=null;
        Token string_literal1289=null;
        PLSQL3Parser.select_command_return select_command1290 =null;


        Object string_literal1286_tree=null;
        Object string_literal1287_tree=null;
        Object string_literal1288_tree=null;
        Object string_literal1289_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }

            // antlr3/PLSQL3.g:1208:2: ( ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command )
            // antlr3/PLSQL3.g:1208:4: ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1208:4: ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' )
            int alt334=3;
            switch ( input.LA(1) ) {
            case 157:
                {
                alt334=1;
                }
                break;
            case 104:
                {
                alt334=2;
                }
                break;
            case 111:
                {
                alt334=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 334, 0, input);

                throw nvae;

            }

            switch (alt334) {
                case 1 :
                    // antlr3/PLSQL3.g:1208:6: ( 'UNION' 'ALL' )
                    {
                    // antlr3/PLSQL3.g:1208:6: ( 'UNION' 'ALL' )
                    // antlr3/PLSQL3.g:1208:8: 'UNION' 'ALL'
                    {
                    string_literal1286=(Token)match(input,157,FOLLOW_157_in_set_clause7635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1286_tree = 
                    (Object)adaptor.create(string_literal1286)
                    ;
                    adaptor.addChild(root_0, string_literal1286_tree);
                    }

                    string_literal1287=(Token)match(input,50,FOLLOW_50_in_set_clause7637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1287_tree = 
                    (Object)adaptor.create(string_literal1287)
                    ;
                    adaptor.addChild(root_0, string_literal1287_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1208:26: 'INTERSECT'
                    {
                    string_literal1288=(Token)match(input,104,FOLLOW_104_in_set_clause7643); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1288_tree = 
                    (Object)adaptor.create(string_literal1288)
                    ;
                    adaptor.addChild(root_0, string_literal1288_tree);
                    }

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:1208:40: 'MINUS'
                    {
                    string_literal1289=(Token)match(input,111,FOLLOW_111_in_set_clause7647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1289_tree = 
                    (Object)adaptor.create(string_literal1289)
                    ;
                    adaptor.addChild(root_0, string_literal1289_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_select_command_in_set_clause7651);
            select_command1290=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1290.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 232, set_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "set_clause"


    public static class order_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // antlr3/PLSQL3.g:1211:1: order_clause : 'ORDER' 'BY' sorted_def ( COMMA sorted_def )* ;
    public final PLSQL3Parser.order_clause_return order_clause() throws RecognitionException {
        PLSQL3Parser.order_clause_return retval = new PLSQL3Parser.order_clause_return();
        retval.start = input.LT(1);

        int order_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1291=null;
        Token string_literal1292=null;
        Token COMMA1294=null;
        PLSQL3Parser.sorted_def_return sorted_def1293 =null;

        PLSQL3Parser.sorted_def_return sorted_def1295 =null;


        Object string_literal1291_tree=null;
        Object string_literal1292_tree=null;
        Object COMMA1294_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }

            // antlr3/PLSQL3.g:1212:2: ( 'ORDER' 'BY' sorted_def ( COMMA sorted_def )* )
            // antlr3/PLSQL3.g:1212:4: 'ORDER' 'BY' sorted_def ( COMMA sorted_def )*
            {
            root_0 = (Object)adaptor.nil();


            string_literal1291=(Token)match(input,128,FOLLOW_128_in_order_clause7663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1291_tree = 
            (Object)adaptor.create(string_literal1291)
            ;
            adaptor.addChild(root_0, string_literal1291_tree);
            }

            string_literal1292=(Token)match(input,64,FOLLOW_64_in_order_clause7665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1292_tree = 
            (Object)adaptor.create(string_literal1292)
            ;
            adaptor.addChild(root_0, string_literal1292_tree);
            }

            pushFollow(FOLLOW_sorted_def_in_order_clause7667);
            sorted_def1293=sorted_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sorted_def1293.getTree());

            // antlr3/PLSQL3.g:1212:28: ( COMMA sorted_def )*
            loop335:
            do {
                int alt335=2;
                int LA335_0 = input.LA(1);

                if ( (LA335_0==COMMA) ) {
                    alt335=1;
                }


                switch (alt335) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1212:30: COMMA sorted_def
            	    {
            	    COMMA1294=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_clause7671); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1294_tree = 
            	    (Object)adaptor.create(COMMA1294)
            	    ;
            	    adaptor.addChild(root_0, COMMA1294_tree);
            	    }

            	    pushFollow(FOLLOW_sorted_def_in_order_clause7673);
            	    sorted_def1295=sorted_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sorted_def1295.getTree());

            	    }
            	    break;

            	default :
            	    break loop335;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 233, order_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class sorted_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sorted_def"
    // antlr3/PLSQL3.g:1215:1: sorted_def : ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )? ;
    public final PLSQL3Parser.sorted_def_return sorted_def() throws RecognitionException {
        PLSQL3Parser.sorted_def_return retval = new PLSQL3Parser.sorted_def_return();
        retval.start = input.LT(1);

        int sorted_def_StartIndex = input.index();

        Object root_0 = null;

        Token NUMBER1297=null;
        Token set1298=null;
        PLSQL3Parser.sql_expression_return sql_expression1296 =null;


        Object NUMBER1297_tree=null;
        Object set1298_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }

            // antlr3/PLSQL3.g:1216:2: ( ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )? )
            // antlr3/PLSQL3.g:1216:4: ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )?
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1216:4: ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER )
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==MINUS||LA336_0==PLUS) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==LPAREN) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==ID) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==144) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==DOUBLEQUOTED_STRING) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==81) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==65) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==89||LA336_0==156) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==151) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==QUOTED_STRING) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==NUMBER) ) {
                int LA336_11 = input.LA(2);

                if ( (synpred540_PLSQL3()) ) {
                    alt336=1;
                }
                else if ( (synpred541_PLSQL3()) ) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA336_0==120) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else if ( (LA336_0==147) && (synpred540_PLSQL3())) {
                alt336=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);

                throw nvae;

            }
            switch (alt336) {
                case 1 :
                    // antlr3/PLSQL3.g:1216:6: ( sql_expression )=> sql_expression
                    {
                    pushFollow(FOLLOW_sql_expression_in_sorted_def7697);
                    sql_expression1296=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1296.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1216:45: ( NUMBER )=> NUMBER
                    {
                    NUMBER1297=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_sorted_def7709); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER1297_tree = 
                    (Object)adaptor.create(NUMBER1297)
                    ;
                    adaptor.addChild(root_0, NUMBER1297_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1216:68: ( 'ASC' | 'DESC' )?
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==54||LA337_0==80) ) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    // antlr3/PLSQL3.g:
                    {
                    set1298=(Token)input.LT(1);

                    if ( input.LA(1)==54||input.LA(1)==80 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set1298)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 234, sorted_def_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sorted_def"


    public static class update_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_clause"
    // antlr3/PLSQL3.g:1219:1: update_clause : 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )? ;
    public final PLSQL3Parser.update_clause_return update_clause() throws RecognitionException {
        PLSQL3Parser.update_clause_return retval = new PLSQL3Parser.update_clause_return();
        retval.start = input.LT(1);

        int update_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1299=null;
        Token string_literal1300=null;
        Token string_literal1301=null;
        Token COMMA1303=null;
        Token string_literal1305=null;
        PLSQL3Parser.column_name_return column_name1302 =null;

        PLSQL3Parser.column_name_return column_name1304 =null;


        Object string_literal1299_tree=null;
        Object string_literal1300_tree=null;
        Object string_literal1301_tree=null;
        Object COMMA1303_tree=null;
        Object string_literal1305_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }

            // antlr3/PLSQL3.g:1220:2: ( 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )? )
            // antlr3/PLSQL3.g:1220:4: 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal1299=(Token)match(input,92,FOLLOW_92_in_update_clause7733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1299_tree = 
            (Object)adaptor.create(string_literal1299)
            ;
            adaptor.addChild(root_0, string_literal1299_tree);
            }

            string_literal1300=(Token)match(input,159,FOLLOW_159_in_update_clause7735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1300_tree = 
            (Object)adaptor.create(string_literal1300)
            ;
            adaptor.addChild(root_0, string_literal1300_tree);
            }

            // antlr3/PLSQL3.g:1220:19: ( 'OF' column_name ( COMMA column_name )* )?
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( (LA339_0==125) ) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    // antlr3/PLSQL3.g:1220:21: 'OF' column_name ( COMMA column_name )*
                    {
                    string_literal1301=(Token)match(input,125,FOLLOW_125_in_update_clause7739); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1301_tree = 
                    (Object)adaptor.create(string_literal1301)
                    ;
                    adaptor.addChild(root_0, string_literal1301_tree);
                    }

                    pushFollow(FOLLOW_column_name_in_update_clause7741);
                    column_name1302=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1302.getTree());

                    // antlr3/PLSQL3.g:1220:38: ( COMMA column_name )*
                    loop338:
                    do {
                        int alt338=2;
                        int LA338_0 = input.LA(1);

                        if ( (LA338_0==COMMA) ) {
                            alt338=1;
                        }


                        switch (alt338) {
                    	case 1 :
                    	    // antlr3/PLSQL3.g:1220:40: COMMA column_name
                    	    {
                    	    COMMA1303=(Token)match(input,COMMA,FOLLOW_COMMA_in_update_clause7745); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA1303_tree = 
                    	    (Object)adaptor.create(COMMA1303)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA1303_tree);
                    	    }

                    	    pushFollow(FOLLOW_column_name_in_update_clause7747);
                    	    column_name1304=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1304.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop338;
                        }
                    } while (true);


                    }
                    break;

            }


            // antlr3/PLSQL3.g:1220:64: ( 'NOWAIT' )?
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==119) ) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    // antlr3/PLSQL3.g:1220:66: 'NOWAIT'
                    {
                    string_literal1305=(Token)match(input,119,FOLLOW_119_in_update_clause7757); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1305_tree = 
                    (Object)adaptor.create(string_literal1305)
                    ;
                    adaptor.addChild(root_0, string_literal1305_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 235, update_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_clause"


    public static class insert_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insert_command"
    // antlr3/PLSQL3.g:1223:1: insert_command : 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )? ;
    public final PLSQL3Parser.insert_command_return insert_command() throws RecognitionException {
        PLSQL3Parser.insert_command_return retval = new PLSQL3Parser.insert_command_return();
        retval.start = input.LT(1);

        int insert_command_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1306=null;
        Token string_literal1307=null;
        Token LPAREN1309=null;
        Token RPAREN1311=null;
        Token string_literal1312=null;
        Token LPAREN1313=null;
        Token RPAREN1315=null;
        PLSQL3Parser.table_reference_list_return table_reference_list1308 =null;

        PLSQL3Parser.column_specs_return column_specs1310 =null;

        PLSQL3Parser.plsql_expressions_return plsql_expressions1314 =null;

        PLSQL3Parser.select_statement_return select_statement1316 =null;

        PLSQL3Parser.returning_clause_return returning_clause1317 =null;


        Object string_literal1306_tree=null;
        Object string_literal1307_tree=null;
        Object LPAREN1309_tree=null;
        Object RPAREN1311_tree=null;
        Object string_literal1312_tree=null;
        Object LPAREN1313_tree=null;
        Object RPAREN1315_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }

            // antlr3/PLSQL3.g:1224:2: ( 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )? )
            // antlr3/PLSQL3.g:1224:4: 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal1306=(Token)match(input,101,FOLLOW_101_in_insert_command7771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1306_tree = 
            (Object)adaptor.create(string_literal1306)
            ;
            adaptor.addChild(root_0, string_literal1306_tree);
            }

            string_literal1307=(Token)match(input,105,FOLLOW_105_in_insert_command7773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1307_tree = 
            (Object)adaptor.create(string_literal1307)
            ;
            adaptor.addChild(root_0, string_literal1307_tree);
            }

            pushFollow(FOLLOW_table_reference_list_in_insert_command7775);
            table_reference_list1308=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list1308.getTree());

            // antlr3/PLSQL3.g:1225:3: ( LPAREN column_specs RPAREN )?
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==LPAREN) ) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    // antlr3/PLSQL3.g:1225:5: LPAREN column_specs RPAREN
                    {
                    LPAREN1309=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insert_command7781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1309_tree = 
                    (Object)adaptor.create(LPAREN1309)
                    ;
                    adaptor.addChild(root_0, LPAREN1309_tree);
                    }

                    pushFollow(FOLLOW_column_specs_in_insert_command7783);
                    column_specs1310=column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs1310.getTree());

                    RPAREN1311=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insert_command7785); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1311_tree = 
                    (Object)adaptor.create(RPAREN1311)
                    ;
                    adaptor.addChild(root_0, RPAREN1311_tree);
                    }

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1226:3: ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement )
            int alt342=2;
            int LA342_0 = input.LA(1);

            if ( (LA342_0==161) ) {
                alt342=1;
            }
            else if ( (LA342_0==147) ) {
                alt342=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);

                throw nvae;

            }
            switch (alt342) {
                case 1 :
                    // antlr3/PLSQL3.g:1226:5: 'VALUES' LPAREN plsql_expressions RPAREN
                    {
                    string_literal1312=(Token)match(input,161,FOLLOW_161_in_insert_command7794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1312_tree = 
                    (Object)adaptor.create(string_literal1312)
                    ;
                    adaptor.addChild(root_0, string_literal1312_tree);
                    }

                    LPAREN1313=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insert_command7796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1313_tree = 
                    (Object)adaptor.create(LPAREN1313)
                    ;
                    adaptor.addChild(root_0, LPAREN1313_tree);
                    }

                    pushFollow(FOLLOW_plsql_expressions_in_insert_command7798);
                    plsql_expressions1314=plsql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions1314.getTree());

                    RPAREN1315=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insert_command7800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1315_tree = 
                    (Object)adaptor.create(RPAREN1315)
                    ;
                    adaptor.addChild(root_0, RPAREN1315_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1227:5: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_insert_command7806);
                    select_statement1316=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement1316.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1229:3: ( returning_clause )?
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( ((LA343_0 >= 140 && LA343_0 <= 141)) ) {
                alt343=1;
            }
            switch (alt343) {
                case 1 :
                    // antlr3/PLSQL3.g:1229:5: returning_clause
                    {
                    pushFollow(FOLLOW_returning_clause_in_insert_command7816);
                    returning_clause1317=returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returning_clause1317.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 236, insert_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "insert_command"


    public static class update_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_command"
    // antlr3/PLSQL3.g:1232:1: update_command : 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? ;
    public final PLSQL3Parser.update_command_return update_command() throws RecognitionException {
        PLSQL3Parser.update_command_return retval = new PLSQL3Parser.update_command_return();
        retval.start = input.LT(1);

        int update_command_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1318=null;
        Token string_literal1320=null;
        Token string_literal1323=null;
        PLSQL3Parser.selected_table_return selected_table1319 =null;

        PLSQL3Parser.update_nested_column_specs_return update_nested_column_specs1321 =null;

        PLSQL3Parser.update_column_specs_return update_column_specs1322 =null;

        PLSQL3Parser.keyCURRENT_OF_return keyCURRENT_OF1324 =null;

        PLSQL3Parser.cursor_name_return cursor_name1325 =null;

        PLSQL3Parser.sql_condition_return sql_condition1326 =null;

        PLSQL3Parser.returning_clause_return returning_clause1327 =null;


        Object string_literal1318_tree=null;
        Object string_literal1320_tree=null;
        Object string_literal1323_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }

            // antlr3/PLSQL3.g:1233:2: ( 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? )
            // antlr3/PLSQL3.g:1233:4: 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal1318=(Token)match(input,159,FOLLOW_159_in_update_command7830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1318_tree = 
            (Object)adaptor.create(string_literal1318)
            ;
            adaptor.addChild(root_0, string_literal1318_tree);
            }

            pushFollow(FOLLOW_selected_table_in_update_command7832);
            selected_table1319=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table1319.getTree());

            string_literal1320=(Token)match(input,148,FOLLOW_148_in_update_command7836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1320_tree = 
            (Object)adaptor.create(string_literal1320)
            ;
            adaptor.addChild(root_0, string_literal1320_tree);
            }

            // antlr3/PLSQL3.g:1235:3: ( update_nested_column_specs | update_column_specs )
            int alt344=2;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==LPAREN) ) {
                alt344=1;
            }
            else if ( (LA344_0==DOUBLEQUOTED_STRING||LA344_0==ID||LA344_0==144) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);

                throw nvae;

            }
            switch (alt344) {
                case 1 :
                    // antlr3/PLSQL3.g:1235:5: update_nested_column_specs
                    {
                    pushFollow(FOLLOW_update_nested_column_specs_in_update_command7843);
                    update_nested_column_specs1321=update_nested_column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_nested_column_specs1321.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1236:5: update_column_specs
                    {
                    pushFollow(FOLLOW_update_column_specs_in_update_command7849);
                    update_column_specs1322=update_column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_column_specs1322.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1238:3: ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )?
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==165) ) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    // antlr3/PLSQL3.g:1238:5: 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition )
                    {
                    string_literal1323=(Token)match(input,165,FOLLOW_165_in_update_command7859); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1323_tree = 
                    (Object)adaptor.create(string_literal1323)
                    ;
                    adaptor.addChild(root_0, string_literal1323_tree);
                    }

                    // antlr3/PLSQL3.g:1239:4: ( keyCURRENT_OF cursor_name | sql_condition )
                    int alt345=2;
                    int LA345_0 = input.LA(1);

                    if ( (LA345_0==ID) ) {
                        switch ( input.LA(2) ) {
                        case ID:
                            {
                            int LA345_3 = input.LA(3);

                            if ( (LA345_3==EOF||LA345_3==SEMI||(LA345_3 >= 140 && LA345_3 <= 141)) ) {
                                alt345=1;
                            }
                            else if ( (LA345_3==DOUBLEQUOTED_STRING||LA345_3==ID||LA345_3==LPAREN||LA345_3==MINUS||LA345_3==NUMBER||LA345_3==PLUS||LA345_3==QUOTED_STRING||LA345_3==65||LA345_3==81||LA345_3==89||LA345_3==120||LA345_3==125||LA345_3==144||LA345_3==147||LA345_3==151||LA345_3==156) ) {
                                alt345=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 345, 3, input);

                                throw nvae;

                            }
                            }
                            break;
                        case ASTERISK:
                        case DIVIDE:
                        case DOT:
                        case DOUBLEVERTBAR:
                        case EQ:
                        case EXPONENT:
                        case GEQ:
                        case GTH:
                        case LEQ:
                        case LPAREN:
                        case LTH:
                        case MINUS:
                        case NOT_EQ:
                        case PLUS:
                        case 57:
                        case 99:
                        case 106:
                        case 107:
                        case 118:
                            {
                            alt345=2;
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            alt345=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 345, 1, input);

                            throw nvae;

                        }

                    }
                    else if ( (LA345_0==DOUBLEQUOTED_STRING||LA345_0==LPAREN||LA345_0==MINUS||LA345_0==NUMBER||LA345_0==PLUS||LA345_0==QUOTED_STRING||LA345_0==52||LA345_0==65||LA345_0==81||(LA345_0 >= 88 && LA345_0 <= 89)||LA345_0==118||LA345_0==120||LA345_0==134||LA345_0==144||LA345_0==147||LA345_0==151||LA345_0==156) ) {
                        alt345=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 345, 0, input);

                        throw nvae;

                    }
                    switch (alt345) {
                        case 1 :
                            // antlr3/PLSQL3.g:1239:6: keyCURRENT_OF cursor_name
                            {
                            pushFollow(FOLLOW_keyCURRENT_OF_in_update_command7866);
                            keyCURRENT_OF1324=keyCURRENT_OF();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURRENT_OF1324.getTree());

                            pushFollow(FOLLOW_cursor_name_in_update_command7868);
                            cursor_name1325=cursor_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1325.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1240:6: sql_condition
                            {
                            pushFollow(FOLLOW_sql_condition_in_update_command7875);
                            sql_condition1326=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1326.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // antlr3/PLSQL3.g:1243:3: ( returning_clause )?
            int alt347=2;
            int LA347_0 = input.LA(1);

            if ( ((LA347_0 >= 140 && LA347_0 <= 141)) ) {
                alt347=1;
            }
            switch (alt347) {
                case 1 :
                    // antlr3/PLSQL3.g:1243:5: returning_clause
                    {
                    pushFollow(FOLLOW_returning_clause_in_update_command7891);
                    returning_clause1327=returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returning_clause1327.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 237, update_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_command"


    public static class update_column_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_column_specs"
    // antlr3/PLSQL3.g:1246:1: update_column_specs : update_column_spec ( COMMA update_column_spec )* ;
    public final PLSQL3Parser.update_column_specs_return update_column_specs() throws RecognitionException {
        PLSQL3Parser.update_column_specs_return retval = new PLSQL3Parser.update_column_specs_return();
        retval.start = input.LT(1);

        int update_column_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1329=null;
        PLSQL3Parser.update_column_spec_return update_column_spec1328 =null;

        PLSQL3Parser.update_column_spec_return update_column_spec1330 =null;


        Object COMMA1329_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }

            // antlr3/PLSQL3.g:1247:2: ( update_column_spec ( COMMA update_column_spec )* )
            // antlr3/PLSQL3.g:1247:4: update_column_spec ( COMMA update_column_spec )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_update_column_spec_in_update_column_specs7905);
            update_column_spec1328=update_column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, update_column_spec1328.getTree());

            // antlr3/PLSQL3.g:1247:23: ( COMMA update_column_spec )*
            loop348:
            do {
                int alt348=2;
                int LA348_0 = input.LA(1);

                if ( (LA348_0==COMMA) ) {
                    alt348=1;
                }


                switch (alt348) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1247:25: COMMA update_column_spec
            	    {
            	    COMMA1329=(Token)match(input,COMMA,FOLLOW_COMMA_in_update_column_specs7909); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1329_tree = 
            	    (Object)adaptor.create(COMMA1329)
            	    ;
            	    adaptor.addChild(root_0, COMMA1329_tree);
            	    }

            	    pushFollow(FOLLOW_update_column_spec_in_update_column_specs7911);
            	    update_column_spec1330=update_column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_column_spec1330.getTree());

            	    }
            	    break;

            	default :
            	    break loop348;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 238, update_column_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_column_specs"


    public static class update_column_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_column_spec"
    // antlr3/PLSQL3.g:1250:1: update_column_spec : column_spec EQ sql_expression ;
    public final PLSQL3Parser.update_column_spec_return update_column_spec() throws RecognitionException {
        PLSQL3Parser.update_column_spec_return retval = new PLSQL3Parser.update_column_spec_return();
        retval.start = input.LT(1);

        int update_column_spec_StartIndex = input.index();

        Object root_0 = null;

        Token EQ1332=null;
        PLSQL3Parser.column_spec_return column_spec1331 =null;

        PLSQL3Parser.sql_expression_return sql_expression1333 =null;


        Object EQ1332_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }

            // antlr3/PLSQL3.g:1251:2: ( column_spec EQ sql_expression )
            // antlr3/PLSQL3.g:1251:4: column_spec EQ sql_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_column_spec_in_update_column_spec7925);
            column_spec1331=column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1331.getTree());

            EQ1332=(Token)match(input,EQ,FOLLOW_EQ_in_update_column_spec7927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ1332_tree = 
            (Object)adaptor.create(EQ1332)
            ;
            adaptor.addChild(root_0, EQ1332_tree);
            }

            pushFollow(FOLLOW_sql_expression_in_update_column_spec7929);
            sql_expression1333=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1333.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 239, update_column_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_column_spec"


    public static class update_nested_column_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_nested_column_specs"
    // antlr3/PLSQL3.g:1254:1: update_nested_column_specs : update_nested_column_spec ( COMMA update_nested_column_spec )* ;
    public final PLSQL3Parser.update_nested_column_specs_return update_nested_column_specs() throws RecognitionException {
        PLSQL3Parser.update_nested_column_specs_return retval = new PLSQL3Parser.update_nested_column_specs_return();
        retval.start = input.LT(1);

        int update_nested_column_specs_StartIndex = input.index();

        Object root_0 = null;

        Token COMMA1335=null;
        PLSQL3Parser.update_nested_column_spec_return update_nested_column_spec1334 =null;

        PLSQL3Parser.update_nested_column_spec_return update_nested_column_spec1336 =null;


        Object COMMA1335_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }

            // antlr3/PLSQL3.g:1255:2: ( update_nested_column_spec ( COMMA update_nested_column_spec )* )
            // antlr3/PLSQL3.g:1255:4: update_nested_column_spec ( COMMA update_nested_column_spec )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs7940);
            update_nested_column_spec1334=update_nested_column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, update_nested_column_spec1334.getTree());

            // antlr3/PLSQL3.g:1255:30: ( COMMA update_nested_column_spec )*
            loop349:
            do {
                int alt349=2;
                int LA349_0 = input.LA(1);

                if ( (LA349_0==COMMA) ) {
                    alt349=1;
                }


                switch (alt349) {
            	case 1 :
            	    // antlr3/PLSQL3.g:1255:32: COMMA update_nested_column_spec
            	    {
            	    COMMA1335=(Token)match(input,COMMA,FOLLOW_COMMA_in_update_nested_column_specs7944); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1335_tree = 
            	    (Object)adaptor.create(COMMA1335)
            	    ;
            	    adaptor.addChild(root_0, COMMA1335_tree);
            	    }

            	    pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs7946);
            	    update_nested_column_spec1336=update_nested_column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_nested_column_spec1336.getTree());

            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 240, update_nested_column_specs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_nested_column_specs"


    public static class update_nested_column_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_nested_column_spec"
    // antlr3/PLSQL3.g:1258:1: update_nested_column_spec : LPAREN column_specs RPAREN EQ subquery ;
    public final PLSQL3Parser.update_nested_column_spec_return update_nested_column_spec() throws RecognitionException {
        PLSQL3Parser.update_nested_column_spec_return retval = new PLSQL3Parser.update_nested_column_spec_return();
        retval.start = input.LT(1);

        int update_nested_column_spec_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1337=null;
        Token RPAREN1339=null;
        Token EQ1340=null;
        PLSQL3Parser.column_specs_return column_specs1338 =null;

        PLSQL3Parser.subquery_return subquery1341 =null;


        Object LPAREN1337_tree=null;
        Object RPAREN1339_tree=null;
        Object EQ1340_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }

            // antlr3/PLSQL3.g:1259:2: ( LPAREN column_specs RPAREN EQ subquery )
            // antlr3/PLSQL3.g:1259:4: LPAREN column_specs RPAREN EQ subquery
            {
            root_0 = (Object)adaptor.nil();


            LPAREN1337=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_update_nested_column_spec7960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1337_tree = 
            (Object)adaptor.create(LPAREN1337)
            ;
            adaptor.addChild(root_0, LPAREN1337_tree);
            }

            pushFollow(FOLLOW_column_specs_in_update_nested_column_spec7962);
            column_specs1338=column_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs1338.getTree());

            RPAREN1339=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_update_nested_column_spec7964); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1339_tree = 
            (Object)adaptor.create(RPAREN1339)
            ;
            adaptor.addChild(root_0, RPAREN1339_tree);
            }

            EQ1340=(Token)match(input,EQ,FOLLOW_EQ_in_update_nested_column_spec7966); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ1340_tree = 
            (Object)adaptor.create(EQ1340)
            ;
            adaptor.addChild(root_0, EQ1340_tree);
            }

            pushFollow(FOLLOW_subquery_in_update_nested_column_spec7968);
            subquery1341=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1341.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 241, update_nested_column_spec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "update_nested_column_spec"


    public static class delete_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delete_command"
    // antlr3/PLSQL3.g:1262:1: delete_command : 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? ;
    public final PLSQL3Parser.delete_command_return delete_command() throws RecognitionException {
        PLSQL3Parser.delete_command_return retval = new PLSQL3Parser.delete_command_return();
        retval.start = input.LT(1);

        int delete_command_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1342=null;
        Token string_literal1343=null;
        Token string_literal1345=null;
        PLSQL3Parser.selected_table_return selected_table1344 =null;

        PLSQL3Parser.keyCURRENT_OF_return keyCURRENT_OF1346 =null;

        PLSQL3Parser.cursor_name_return cursor_name1347 =null;

        PLSQL3Parser.sql_condition_return sql_condition1348 =null;

        PLSQL3Parser.returning_clause_return returning_clause1349 =null;


        Object string_literal1342_tree=null;
        Object string_literal1343_tree=null;
        Object string_literal1345_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }

            // antlr3/PLSQL3.g:1263:2: ( 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? )
            // antlr3/PLSQL3.g:1263:4: 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal1342=(Token)match(input,79,FOLLOW_79_in_delete_command7979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1342_tree = 
            (Object)adaptor.create(string_literal1342)
            ;
            adaptor.addChild(root_0, string_literal1342_tree);
            }

            // antlr3/PLSQL3.g:1263:13: ( 'FROM' )?
            int alt350=2;
            int LA350_0 = input.LA(1);

            if ( (LA350_0==93) ) {
                alt350=1;
            }
            switch (alt350) {
                case 1 :
                    // antlr3/PLSQL3.g:1263:15: 'FROM'
                    {
                    string_literal1343=(Token)match(input,93,FOLLOW_93_in_delete_command7983); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1343_tree = 
                    (Object)adaptor.create(string_literal1343)
                    ;
                    adaptor.addChild(root_0, string_literal1343_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_selected_table_in_delete_command7988);
            selected_table1344=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table1344.getTree());

            // antlr3/PLSQL3.g:1264:3: ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )?
            int alt352=2;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==165) ) {
                alt352=1;
            }
            switch (alt352) {
                case 1 :
                    // antlr3/PLSQL3.g:1264:5: 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition )
                    {
                    string_literal1345=(Token)match(input,165,FOLLOW_165_in_delete_command7994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1345_tree = 
                    (Object)adaptor.create(string_literal1345)
                    ;
                    adaptor.addChild(root_0, string_literal1345_tree);
                    }

                    // antlr3/PLSQL3.g:1265:4: ( keyCURRENT_OF cursor_name | sql_condition )
                    int alt351=2;
                    int LA351_0 = input.LA(1);

                    if ( (LA351_0==ID) ) {
                        switch ( input.LA(2) ) {
                        case ID:
                            {
                            int LA351_3 = input.LA(3);

                            if ( (LA351_3==EOF||LA351_3==SEMI||(LA351_3 >= 140 && LA351_3 <= 141)) ) {
                                alt351=1;
                            }
                            else if ( (LA351_3==DOUBLEQUOTED_STRING||LA351_3==ID||LA351_3==LPAREN||LA351_3==MINUS||LA351_3==NUMBER||LA351_3==PLUS||LA351_3==QUOTED_STRING||LA351_3==65||LA351_3==81||LA351_3==89||LA351_3==120||LA351_3==125||LA351_3==144||LA351_3==147||LA351_3==151||LA351_3==156) ) {
                                alt351=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 351, 3, input);

                                throw nvae;

                            }
                            }
                            break;
                        case ASTERISK:
                        case DIVIDE:
                        case DOT:
                        case DOUBLEVERTBAR:
                        case EQ:
                        case EXPONENT:
                        case GEQ:
                        case GTH:
                        case LEQ:
                        case LPAREN:
                        case LTH:
                        case MINUS:
                        case NOT_EQ:
                        case PLUS:
                        case 57:
                        case 99:
                        case 106:
                        case 107:
                        case 118:
                            {
                            alt351=2;
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            alt351=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 351, 1, input);

                            throw nvae;

                        }

                    }
                    else if ( (LA351_0==DOUBLEQUOTED_STRING||LA351_0==LPAREN||LA351_0==MINUS||LA351_0==NUMBER||LA351_0==PLUS||LA351_0==QUOTED_STRING||LA351_0==52||LA351_0==65||LA351_0==81||(LA351_0 >= 88 && LA351_0 <= 89)||LA351_0==118||LA351_0==120||LA351_0==134||LA351_0==144||LA351_0==147||LA351_0==151||LA351_0==156) ) {
                        alt351=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 351, 0, input);

                        throw nvae;

                    }
                    switch (alt351) {
                        case 1 :
                            // antlr3/PLSQL3.g:1265:6: keyCURRENT_OF cursor_name
                            {
                            pushFollow(FOLLOW_keyCURRENT_OF_in_delete_command8001);
                            keyCURRENT_OF1346=keyCURRENT_OF();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURRENT_OF1346.getTree());

                            pushFollow(FOLLOW_cursor_name_in_delete_command8003);
                            cursor_name1347=cursor_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1347.getTree());

                            }
                            break;
                        case 2 :
                            // antlr3/PLSQL3.g:1266:6: sql_condition
                            {
                            pushFollow(FOLLOW_sql_condition_in_delete_command8010);
                            sql_condition1348=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1348.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // antlr3/PLSQL3.g:1269:3: ( returning_clause )?
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( ((LA353_0 >= 140 && LA353_0 <= 141)) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    // antlr3/PLSQL3.g:1269:5: returning_clause
                    {
                    pushFollow(FOLLOW_returning_clause_in_delete_command8026);
                    returning_clause1349=returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returning_clause1349.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 242, delete_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delete_command"


    public static class returning_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "returning_clause"
    // antlr3/PLSQL3.g:1272:1: returning_clause : ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues ;
    public final PLSQL3Parser.returning_clause_return returning_clause() throws RecognitionException {
        PLSQL3Parser.returning_clause_return retval = new PLSQL3Parser.returning_clause_return();
        retval.start = input.LT(1);

        int returning_clause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1355=null;
        PLSQL3Parser.keyRETURN_return keyRETURN1350 =null;

        PLSQL3Parser.keyRETURNING_return keyRETURNING1351 =null;

        PLSQL3Parser.select_list_return select_list1352 =null;

        PLSQL3Parser.keyBULK_return keyBULK1353 =null;

        PLSQL3Parser.keyCOLLECT_return keyCOLLECT1354 =null;

        PLSQL3Parser.lvalues_return lvalues1356 =null;


        Object string_literal1355_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }

            // antlr3/PLSQL3.g:1273:2: ( ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues )
            // antlr3/PLSQL3.g:1273:4: ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues
            {
            root_0 = (Object)adaptor.nil();


            // antlr3/PLSQL3.g:1273:4: ( keyRETURN | keyRETURNING )
            int alt354=2;
            int LA354_0 = input.LA(1);

            if ( (LA354_0==140) ) {
                alt354=1;
            }
            else if ( (LA354_0==141) ) {
                alt354=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);

                throw nvae;

            }
            switch (alt354) {
                case 1 :
                    // antlr3/PLSQL3.g:1273:6: keyRETURN
                    {
                    pushFollow(FOLLOW_keyRETURN_in_returning_clause8042);
                    keyRETURN1350=keyRETURN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN1350.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1273:18: keyRETURNING
                    {
                    pushFollow(FOLLOW_keyRETURNING_in_returning_clause8046);
                    keyRETURNING1351=keyRETURNING();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURNING1351.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_select_list_in_returning_clause8050);
            select_list1352=select_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list1352.getTree());

            // antlr3/PLSQL3.g:1273:45: ( keyBULK keyCOLLECT )?
            int alt355=2;
            int LA355_0 = input.LA(1);

            if ( (LA355_0==ID) ) {
                alt355=1;
            }
            switch (alt355) {
                case 1 :
                    // antlr3/PLSQL3.g:1273:47: keyBULK keyCOLLECT
                    {
                    pushFollow(FOLLOW_keyBULK_in_returning_clause8054);
                    keyBULK1353=keyBULK();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBULK1353.getTree());

                    pushFollow(FOLLOW_keyCOLLECT_in_returning_clause8056);
                    keyCOLLECT1354=keyCOLLECT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOLLECT1354.getTree());

                    }
                    break;

            }


            string_literal1355=(Token)match(input,105,FOLLOW_105_in_returning_clause8061); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1355_tree = 
            (Object)adaptor.create(string_literal1355)
            ;
            adaptor.addChild(root_0, string_literal1355_tree);
            }

            pushFollow(FOLLOW_lvalues_in_returning_clause8063);
            lvalues1356=lvalues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalues1356.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 243, returning_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "returning_clause"


    public static class set_transaction_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "set_transaction_command"
    // antlr3/PLSQL3.g:1276:1: set_transaction_command : 'SET' keyTRANSACTION keyREAD keyONLY ;
    public final PLSQL3Parser.set_transaction_command_return set_transaction_command() throws RecognitionException {
        PLSQL3Parser.set_transaction_command_return retval = new PLSQL3Parser.set_transaction_command_return();
        retval.start = input.LT(1);

        int set_transaction_command_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1357=null;
        PLSQL3Parser.keyTRANSACTION_return keyTRANSACTION1358 =null;

        PLSQL3Parser.keyREAD_return keyREAD1359 =null;

        PLSQL3Parser.keyONLY_return keyONLY1360 =null;


        Object string_literal1357_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }

            // antlr3/PLSQL3.g:1277:2: ( 'SET' keyTRANSACTION keyREAD keyONLY )
            // antlr3/PLSQL3.g:1277:4: 'SET' keyTRANSACTION keyREAD keyONLY
            {
            root_0 = (Object)adaptor.nil();


            string_literal1357=(Token)match(input,148,FOLLOW_148_in_set_transaction_command8074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1357_tree = 
            (Object)adaptor.create(string_literal1357)
            ;
            adaptor.addChild(root_0, string_literal1357_tree);
            }

            pushFollow(FOLLOW_keyTRANSACTION_in_set_transaction_command8076);
            keyTRANSACTION1358=keyTRANSACTION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTRANSACTION1358.getTree());

            pushFollow(FOLLOW_keyREAD_in_set_transaction_command8078);
            keyREAD1359=keyREAD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREAD1359.getTree());

            pushFollow(FOLLOW_keyONLY_in_set_transaction_command8080);
            keyONLY1360=keyONLY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyONLY1360.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 244, set_transaction_command_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "set_transaction_command"


    public static class close_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "close_statement"
    // antlr3/PLSQL3.g:1280:1: close_statement : keyCLOSE cursor_name ;
    public final PLSQL3Parser.close_statement_return close_statement() throws RecognitionException {
        PLSQL3Parser.close_statement_return retval = new PLSQL3Parser.close_statement_return();
        retval.start = input.LT(1);

        int close_statement_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.keyCLOSE_return keyCLOSE1361 =null;

        PLSQL3Parser.cursor_name_return cursor_name1362 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }

            // antlr3/PLSQL3.g:1281:2: ( keyCLOSE cursor_name )
            // antlr3/PLSQL3.g:1281:4: keyCLOSE cursor_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyCLOSE_in_close_statement8091);
            keyCLOSE1361=keyCLOSE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCLOSE1361.getTree());

            pushFollow(FOLLOW_cursor_name_in_close_statement8093);
            cursor_name1362=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1362.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 245, close_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "close_statement"


    public static class fetch_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fetch_statement"
    // antlr3/PLSQL3.g:1284:1: fetch_statement : 'FETCH' cursor_name 'INTO' ( variable_names | record_name ) ;
    public final PLSQL3Parser.fetch_statement_return fetch_statement() throws RecognitionException {
        PLSQL3Parser.fetch_statement_return retval = new PLSQL3Parser.fetch_statement_return();
        retval.start = input.LT(1);

        int fetch_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1363=null;
        Token string_literal1365=null;
        PLSQL3Parser.cursor_name_return cursor_name1364 =null;

        PLSQL3Parser.variable_names_return variable_names1366 =null;

        PLSQL3Parser.record_name_return record_name1367 =null;


        Object string_literal1363_tree=null;
        Object string_literal1365_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }

            // antlr3/PLSQL3.g:1285:2: ( 'FETCH' cursor_name 'INTO' ( variable_names | record_name ) )
            // antlr3/PLSQL3.g:1285:4: 'FETCH' cursor_name 'INTO' ( variable_names | record_name )
            {
            root_0 = (Object)adaptor.nil();


            string_literal1363=(Token)match(input,90,FOLLOW_90_in_fetch_statement8104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1363_tree = 
            (Object)adaptor.create(string_literal1363)
            ;
            adaptor.addChild(root_0, string_literal1363_tree);
            }

            pushFollow(FOLLOW_cursor_name_in_fetch_statement8106);
            cursor_name1364=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1364.getTree());

            string_literal1365=(Token)match(input,105,FOLLOW_105_in_fetch_statement8108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1365_tree = 
            (Object)adaptor.create(string_literal1365)
            ;
            adaptor.addChild(root_0, string_literal1365_tree);
            }

            // antlr3/PLSQL3.g:1286:3: ( variable_names | record_name )
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( (LA356_0==DOUBLEQUOTED_STRING||LA356_0==ID) ) {
                int LA356_1 = input.LA(2);

                if ( (synpred562_PLSQL3()) ) {
                    alt356=1;
                }
                else if ( (true) ) {
                    alt356=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 356, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 356, 0, input);

                throw nvae;

            }
            switch (alt356) {
                case 1 :
                    // antlr3/PLSQL3.g:1286:5: variable_names
                    {
                    pushFollow(FOLLOW_variable_names_in_fetch_statement8115);
                    variable_names1366=variable_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_names1366.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1287:5: record_name
                    {
                    pushFollow(FOLLOW_record_name_in_fetch_statement8121);
                    record_name1367=record_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_name1367.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 246, fetch_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fetch_statement"


    public static class lock_table_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lock_table_statement"
    // antlr3/PLSQL3.g:1291:1: lock_table_statement : 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )? ;
    public final PLSQL3Parser.lock_table_statement_return lock_table_statement() throws RecognitionException {
        PLSQL3Parser.lock_table_statement_return retval = new PLSQL3Parser.lock_table_statement_return();
        retval.start = input.LT(1);

        int lock_table_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1368=null;
        Token string_literal1369=null;
        Token string_literal1371=null;
        Token string_literal1373=null;
        Token string_literal1374=null;
        PLSQL3Parser.table_reference_list_return table_reference_list1370 =null;

        PLSQL3Parser.lock_mode_return lock_mode1372 =null;


        Object string_literal1368_tree=null;
        Object string_literal1369_tree=null;
        Object string_literal1371_tree=null;
        Object string_literal1373_tree=null;
        Object string_literal1374_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }

            // antlr3/PLSQL3.g:1292:2: ( 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )? )
            // antlr3/PLSQL3.g:1292:4: 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal1368=(Token)match(input,108,FOLLOW_108_in_lock_table_statement8136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1368_tree = 
            (Object)adaptor.create(string_literal1368)
            ;
            adaptor.addChild(root_0, string_literal1368_tree);
            }

            string_literal1369=(Token)match(input,153,FOLLOW_153_in_lock_table_statement8138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1369_tree = 
            (Object)adaptor.create(string_literal1369)
            ;
            adaptor.addChild(root_0, string_literal1369_tree);
            }

            pushFollow(FOLLOW_table_reference_list_in_lock_table_statement8140);
            table_reference_list1370=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list1370.getTree());

            string_literal1371=(Token)match(input,99,FOLLOW_99_in_lock_table_statement8144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1371_tree = 
            (Object)adaptor.create(string_literal1371)
            ;
            adaptor.addChild(root_0, string_literal1371_tree);
            }

            pushFollow(FOLLOW_lock_mode_in_lock_table_statement8146);
            lock_mode1372=lock_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_mode1372.getTree());

            string_literal1373=(Token)match(input,113,FOLLOW_113_in_lock_table_statement8148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1373_tree = 
            (Object)adaptor.create(string_literal1373)
            ;
            adaptor.addChild(root_0, string_literal1373_tree);
            }

            // antlr3/PLSQL3.g:1293:25: ( 'NOWAIT' )?
            int alt357=2;
            int LA357_0 = input.LA(1);

            if ( (LA357_0==119) ) {
                alt357=1;
            }
            switch (alt357) {
                case 1 :
                    // antlr3/PLSQL3.g:1293:27: 'NOWAIT'
                    {
                    string_literal1374=(Token)match(input,119,FOLLOW_119_in_lock_table_statement8152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1374_tree = 
                    (Object)adaptor.create(string_literal1374)
                    ;
                    adaptor.addChild(root_0, string_literal1374_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 247, lock_table_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"


    public static class lock_mode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lock_mode"
    // antlr3/PLSQL3.g:1296:1: lock_mode : ( 'ROW' 'SHARE' | 'ROW' 'EXCLUSIVE' | 'SHARE' 'UPDATE' | 'SHARE' | 'SHARE' 'ROW' 'EXCLUSIVE' | 'EXCLUSIVE' );
    public final PLSQL3Parser.lock_mode_return lock_mode() throws RecognitionException {
        PLSQL3Parser.lock_mode_return retval = new PLSQL3Parser.lock_mode_return();
        retval.start = input.LT(1);

        int lock_mode_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1375=null;
        Token string_literal1376=null;
        Token string_literal1377=null;
        Token string_literal1378=null;
        Token string_literal1379=null;
        Token string_literal1380=null;
        Token string_literal1381=null;
        Token string_literal1382=null;
        Token string_literal1383=null;
        Token string_literal1384=null;
        Token string_literal1385=null;

        Object string_literal1375_tree=null;
        Object string_literal1376_tree=null;
        Object string_literal1377_tree=null;
        Object string_literal1378_tree=null;
        Object string_literal1379_tree=null;
        Object string_literal1380_tree=null;
        Object string_literal1381_tree=null;
        Object string_literal1382_tree=null;
        Object string_literal1383_tree=null;
        Object string_literal1384_tree=null;
        Object string_literal1385_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }

            // antlr3/PLSQL3.g:1297:2: ( 'ROW' 'SHARE' | 'ROW' 'EXCLUSIVE' | 'SHARE' 'UPDATE' | 'SHARE' | 'SHARE' 'ROW' 'EXCLUSIVE' | 'EXCLUSIVE' )
            int alt358=6;
            switch ( input.LA(1) ) {
            case 143:
                {
                int LA358_1 = input.LA(2);

                if ( (LA358_1==149) ) {
                    alt358=1;
                }
                else if ( (LA358_1==87) ) {
                    alt358=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 358, 1, input);

                    throw nvae;

                }
                }
                break;
            case 149:
                {
                switch ( input.LA(2) ) {
                case 159:
                    {
                    alt358=3;
                    }
                    break;
                case 143:
                    {
                    alt358=5;
                    }
                    break;
                case 113:
                    {
                    alt358=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 358, 2, input);

                    throw nvae;

                }

                }
                break;
            case 87:
                {
                alt358=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 358, 0, input);

                throw nvae;

            }

            switch (alt358) {
                case 1 :
                    // antlr3/PLSQL3.g:1297:4: 'ROW' 'SHARE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal1375=(Token)match(input,143,FOLLOW_143_in_lock_mode8166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1375_tree = 
                    (Object)adaptor.create(string_literal1375)
                    ;
                    adaptor.addChild(root_0, string_literal1375_tree);
                    }

                    string_literal1376=(Token)match(input,149,FOLLOW_149_in_lock_mode8168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1376_tree = 
                    (Object)adaptor.create(string_literal1376)
                    ;
                    adaptor.addChild(root_0, string_literal1376_tree);
                    }

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1298:4: 'ROW' 'EXCLUSIVE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal1377=(Token)match(input,143,FOLLOW_143_in_lock_mode8173); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1377_tree = 
                    (Object)adaptor.create(string_literal1377)
                    ;
                    adaptor.addChild(root_0, string_literal1377_tree);
                    }

                    string_literal1378=(Token)match(input,87,FOLLOW_87_in_lock_mode8175); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1378_tree = 
                    (Object)adaptor.create(string_literal1378)
                    ;
                    adaptor.addChild(root_0, string_literal1378_tree);
                    }

                    }
                    break;
                case 3 :
                    // antlr3/PLSQL3.g:1299:4: 'SHARE' 'UPDATE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal1379=(Token)match(input,149,FOLLOW_149_in_lock_mode8180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1379_tree = 
                    (Object)adaptor.create(string_literal1379)
                    ;
                    adaptor.addChild(root_0, string_literal1379_tree);
                    }

                    string_literal1380=(Token)match(input,159,FOLLOW_159_in_lock_mode8182); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1380_tree = 
                    (Object)adaptor.create(string_literal1380)
                    ;
                    adaptor.addChild(root_0, string_literal1380_tree);
                    }

                    }
                    break;
                case 4 :
                    // antlr3/PLSQL3.g:1300:4: 'SHARE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal1381=(Token)match(input,149,FOLLOW_149_in_lock_mode8187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1381_tree = 
                    (Object)adaptor.create(string_literal1381)
                    ;
                    adaptor.addChild(root_0, string_literal1381_tree);
                    }

                    }
                    break;
                case 5 :
                    // antlr3/PLSQL3.g:1301:4: 'SHARE' 'ROW' 'EXCLUSIVE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal1382=(Token)match(input,149,FOLLOW_149_in_lock_mode8192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1382_tree = 
                    (Object)adaptor.create(string_literal1382)
                    ;
                    adaptor.addChild(root_0, string_literal1382_tree);
                    }

                    string_literal1383=(Token)match(input,143,FOLLOW_143_in_lock_mode8194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1383_tree = 
                    (Object)adaptor.create(string_literal1383)
                    ;
                    adaptor.addChild(root_0, string_literal1383_tree);
                    }

                    string_literal1384=(Token)match(input,87,FOLLOW_87_in_lock_mode8196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1384_tree = 
                    (Object)adaptor.create(string_literal1384)
                    ;
                    adaptor.addChild(root_0, string_literal1384_tree);
                    }

                    }
                    break;
                case 6 :
                    // antlr3/PLSQL3.g:1302:4: 'EXCLUSIVE'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal1385=(Token)match(input,87,FOLLOW_87_in_lock_mode8201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1385_tree = 
                    (Object)adaptor.create(string_literal1385)
                    ;
                    adaptor.addChild(root_0, string_literal1385_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 248, lock_mode_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lock_mode"


    public static class open_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "open_statement"
    // antlr3/PLSQL3.g:1305:1: open_statement : keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )? ;
    public final PLSQL3Parser.open_statement_return open_statement() throws RecognitionException {
        PLSQL3Parser.open_statement_return retval = new PLSQL3Parser.open_statement_return();
        retval.start = input.LT(1);

        int open_statement_StartIndex = input.index();

        Object root_0 = null;

        Token LPAREN1388=null;
        Token RPAREN1390=null;
        PLSQL3Parser.keyOPEN_return keyOPEN1386 =null;

        PLSQL3Parser.cursor_name_return cursor_name1387 =null;

        PLSQL3Parser.plsql_expressions_return plsql_expressions1389 =null;


        Object LPAREN1388_tree=null;
        Object RPAREN1390_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }

            // antlr3/PLSQL3.g:1306:2: ( keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )? )
            // antlr3/PLSQL3.g:1306:4: keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyOPEN_in_open_statement8212);
            keyOPEN1386=keyOPEN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOPEN1386.getTree());

            pushFollow(FOLLOW_cursor_name_in_open_statement8214);
            cursor_name1387=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1387.getTree());

            // antlr3/PLSQL3.g:1306:24: ( LPAREN plsql_expressions RPAREN )?
            int alt359=2;
            int LA359_0 = input.LA(1);

            if ( (LA359_0==LPAREN) ) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    // antlr3/PLSQL3.g:1306:26: LPAREN plsql_expressions RPAREN
                    {
                    LPAREN1388=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_open_statement8218); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1388_tree = 
                    (Object)adaptor.create(LPAREN1388)
                    ;
                    adaptor.addChild(root_0, LPAREN1388_tree);
                    }

                    pushFollow(FOLLOW_plsql_expressions_in_open_statement8220);
                    plsql_expressions1389=plsql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions1389.getTree());

                    RPAREN1390=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_open_statement8222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1390_tree = 
                    (Object)adaptor.create(RPAREN1390)
                    ;
                    adaptor.addChild(root_0, RPAREN1390_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 249, open_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "open_statement"


    public static class rollback_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rollback_statement"
    // antlr3/PLSQL3.g:1309:1: rollback_statement : keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )? ;
    public final PLSQL3Parser.rollback_statement_return rollback_statement() throws RecognitionException {
        PLSQL3Parser.rollback_statement_return retval = new PLSQL3Parser.rollback_statement_return();
        retval.start = input.LT(1);

        int rollback_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1393=null;
        Token string_literal1394=null;
        Token string_literal1396=null;
        PLSQL3Parser.keyROLLBACK_return keyROLLBACK1391 =null;

        PLSQL3Parser.keyWORK_return keyWORK1392 =null;

        PLSQL3Parser.savepoint_name_return savepoint_name1395 =null;

        PLSQL3Parser.quoted_string_return quoted_string1397 =null;


        Object string_literal1393_tree=null;
        Object string_literal1394_tree=null;
        Object string_literal1396_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }

            // antlr3/PLSQL3.g:1310:2: ( keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )? )
            // antlr3/PLSQL3.g:1310:4: keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_keyROLLBACK_in_rollback_statement8236);
            keyROLLBACK1391=keyROLLBACK();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyROLLBACK1391.getTree());

            // antlr3/PLSQL3.g:1310:16: ( keyWORK )?
            int alt360=2;
            int LA360_0 = input.LA(1);

            if ( (LA360_0==ID) ) {
                alt360=1;
            }
            switch (alt360) {
                case 1 :
                    // antlr3/PLSQL3.g:1310:18: keyWORK
                    {
                    pushFollow(FOLLOW_keyWORK_in_rollback_statement8240);
                    keyWORK1392=keyWORK();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyWORK1392.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1311:3: ( 'TO' ( 'SAVEPOINT' )? savepoint_name )?
            int alt362=2;
            int LA362_0 = input.LA(1);

            if ( (LA362_0==155) ) {
                alt362=1;
            }
            switch (alt362) {
                case 1 :
                    // antlr3/PLSQL3.g:1311:5: 'TO' ( 'SAVEPOINT' )? savepoint_name
                    {
                    string_literal1393=(Token)match(input,155,FOLLOW_155_in_rollback_statement8249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1393_tree = 
                    (Object)adaptor.create(string_literal1393)
                    ;
                    adaptor.addChild(root_0, string_literal1393_tree);
                    }

                    // antlr3/PLSQL3.g:1311:10: ( 'SAVEPOINT' )?
                    int alt361=2;
                    int LA361_0 = input.LA(1);

                    if ( (LA361_0==146) ) {
                        alt361=1;
                    }
                    switch (alt361) {
                        case 1 :
                            // antlr3/PLSQL3.g:1311:12: 'SAVEPOINT'
                            {
                            string_literal1394=(Token)match(input,146,FOLLOW_146_in_rollback_statement8253); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1394_tree = 
                            (Object)adaptor.create(string_literal1394)
                            ;
                            adaptor.addChild(root_0, string_literal1394_tree);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_savepoint_name_in_rollback_statement8258);
                    savepoint_name1395=savepoint_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_name1395.getTree());

                    }
                    break;

            }


            // antlr3/PLSQL3.g:1312:3: ( 'COMMENT' quoted_string )?
            int alt363=2;
            int LA363_0 = input.LA(1);

            if ( (LA363_0==69) ) {
                alt363=1;
            }
            switch (alt363) {
                case 1 :
                    // antlr3/PLSQL3.g:1312:5: 'COMMENT' quoted_string
                    {
                    string_literal1396=(Token)match(input,69,FOLLOW_69_in_rollback_statement8267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1396_tree = 
                    (Object)adaptor.create(string_literal1396)
                    ;
                    adaptor.addChild(root_0, string_literal1396_tree);
                    }

                    pushFollow(FOLLOW_quoted_string_in_rollback_statement8269);
                    quoted_string1397=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quoted_string1397.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 250, rollback_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rollback_statement"


    public static class savepoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "savepoint_statement"
    // antlr3/PLSQL3.g:1315:1: savepoint_statement : 'SAVEPOINT' savepoint_name ;
    public final PLSQL3Parser.savepoint_statement_return savepoint_statement() throws RecognitionException {
        PLSQL3Parser.savepoint_statement_return retval = new PLSQL3Parser.savepoint_statement_return();
        retval.start = input.LT(1);

        int savepoint_statement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1398=null;
        PLSQL3Parser.savepoint_name_return savepoint_name1399 =null;


        Object string_literal1398_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }

            // antlr3/PLSQL3.g:1316:2: ( 'SAVEPOINT' savepoint_name )
            // antlr3/PLSQL3.g:1316:4: 'SAVEPOINT' savepoint_name
            {
            root_0 = (Object)adaptor.nil();


            string_literal1398=(Token)match(input,146,FOLLOW_146_in_savepoint_statement8283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1398_tree = 
            (Object)adaptor.create(string_literal1398)
            ;
            adaptor.addChild(root_0, string_literal1398_tree);
            }

            pushFollow(FOLLOW_savepoint_name_in_savepoint_statement8285);
            savepoint_name1399=savepoint_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_name1399.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 251, savepoint_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"


    public static class savepoint_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "savepoint_name"
    // antlr3/PLSQL3.g:1319:1: savepoint_name : identifier ;
    public final PLSQL3Parser.savepoint_name_return savepoint_name() throws RecognitionException {
        PLSQL3Parser.savepoint_name_return retval = new PLSQL3Parser.savepoint_name_return();
        retval.start = input.LT(1);

        int savepoint_name_StartIndex = input.index();

        Object root_0 = null;

        PLSQL3Parser.identifier_return identifier1400 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }

            // antlr3/PLSQL3.g:1320:2: ( identifier )
            // antlr3/PLSQL3.g:1320:4: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_savepoint_name8296);
            identifier1400=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1400.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 252, savepoint_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "savepoint_name"


    public static class identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifier"
    // antlr3/PLSQL3.g:1323:1: identifier : ( ID | DOUBLEQUOTED_STRING );
    public final PLSQL3Parser.identifier_return identifier() throws RecognitionException {
        PLSQL3Parser.identifier_return retval = new PLSQL3Parser.identifier_return();
        retval.start = input.LT(1);

        int identifier_StartIndex = input.index();

        Object root_0 = null;

        Token set1401=null;

        Object set1401_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }

            // antlr3/PLSQL3.g:1324:2: ( ID | DOUBLEQUOTED_STRING )
            // antlr3/PLSQL3.g:
            {
            root_0 = (Object)adaptor.nil();


            set1401=(Token)input.LT(1);

            if ( input.LA(1)==DOUBLEQUOTED_STRING||input.LA(1)==ID ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set1401)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 253, identifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "identifier"


    public static class quoted_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quoted_string"
    // antlr3/PLSQL3.g:1329:1: quoted_string : QUOTED_STRING ;
    public final PLSQL3Parser.quoted_string_return quoted_string() throws RecognitionException {
        PLSQL3Parser.quoted_string_return retval = new PLSQL3Parser.quoted_string_return();
        retval.start = input.LT(1);

        int quoted_string_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING1402=null;

        Object QUOTED_STRING1402_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }

            // antlr3/PLSQL3.g:1330:2: ( QUOTED_STRING )
            // antlr3/PLSQL3.g:1330:4: QUOTED_STRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTED_STRING1402=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_quoted_string8328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1402_tree = 
            (Object)adaptor.create(QUOTED_STRING1402)
            ;
            adaptor.addChild(root_0, QUOTED_STRING1402_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 254, quoted_string_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "quoted_string"


    public static class match_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "match_string"
    // antlr3/PLSQL3.g:1333:1: match_string : QUOTED_STRING ;
    public final PLSQL3Parser.match_string_return match_string() throws RecognitionException {
        PLSQL3Parser.match_string_return retval = new PLSQL3Parser.match_string_return();
        retval.start = input.LT(1);

        int match_string_StartIndex = input.index();

        Object root_0 = null;

        Token QUOTED_STRING1403=null;

        Object QUOTED_STRING1403_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }

            // antlr3/PLSQL3.g:1334:2: ( QUOTED_STRING )
            // antlr3/PLSQL3.g:1334:4: QUOTED_STRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTED_STRING1403=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_match_string8339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1403_tree = 
            (Object)adaptor.create(QUOTED_STRING1403)
            ;
            adaptor.addChild(root_0, QUOTED_STRING1403_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 255, match_string_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "match_string"


    public static class keyA_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyA"
    // antlr3/PLSQL3.g:1336:1: keyA :{...}? ID ;
    public final PLSQL3Parser.keyA_return keyA() throws RecognitionException {
        PLSQL3Parser.keyA_return retval = new PLSQL3Parser.keyA_return();
        retval.start = input.LT(1);

        int keyA_StartIndex = input.index();

        Object root_0 = null;

        Token ID1404=null;

        Object ID1404_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }

            // antlr3/PLSQL3.g:1336:34: ({...}? ID )
            // antlr3/PLSQL3.g:1336:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("A"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyA", "input.LT(1).Text.ToUpper() == \"A\"");
            }

            ID1404=(Token)match(input,ID,FOLLOW_ID_in_keyA8378); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1404_tree = 
            (Object)adaptor.create(ID1404)
            ;
            adaptor.addChild(root_0, ID1404_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 256, keyA_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyA"


    public static class keyAUTOMATIC_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyAUTOMATIC"
    // antlr3/PLSQL3.g:1337:1: keyAUTOMATIC :{...}? ID ;
    public final PLSQL3Parser.keyAUTOMATIC_return keyAUTOMATIC() throws RecognitionException {
        PLSQL3Parser.keyAUTOMATIC_return retval = new PLSQL3Parser.keyAUTOMATIC_return();
        retval.start = input.LT(1);

        int keyAUTOMATIC_StartIndex = input.index();

        Object root_0 = null;

        Token ID1405=null;

        Object ID1405_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }

            // antlr3/PLSQL3.g:1337:34: ({...}? ID )
            // antlr3/PLSQL3.g:1337:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("AUTOMATIC"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyAUTOMATIC", "input.LT(1).Text.ToUpper() == \"AUTOMATIC\"");
            }

            ID1405=(Token)match(input,ID,FOLLOW_ID_in_keyAUTOMATIC8407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1405_tree = 
            (Object)adaptor.create(ID1405)
            ;
            adaptor.addChild(root_0, ID1405_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 257, keyAUTOMATIC_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyAUTOMATIC"


    public static class keyCOUNT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCOUNT"
    // antlr3/PLSQL3.g:1338:1: keyCOUNT :{...}? ID ;
    public final PLSQL3Parser.keyCOUNT_return keyCOUNT() throws RecognitionException {
        PLSQL3Parser.keyCOUNT_return retval = new PLSQL3Parser.keyCOUNT_return();
        retval.start = input.LT(1);

        int keyCOUNT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1406=null;

        Object ID1406_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }

            // antlr3/PLSQL3.g:1338:34: ({...}? ID )
            // antlr3/PLSQL3.g:1338:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("COUNT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCOUNT", "input.LT(1).Text.ToUpper() == \"COUNT\"");
            }

            ID1406=(Token)match(input,ID,FOLLOW_ID_in_keyCOUNT8440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1406_tree = 
            (Object)adaptor.create(ID1406)
            ;
            adaptor.addChild(root_0, ID1406_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 258, keyCOUNT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCOUNT"


    public static class keyCROSS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCROSS"
    // antlr3/PLSQL3.g:1339:1: keyCROSS :{...}? ID ;
    public final PLSQL3Parser.keyCROSS_return keyCROSS() throws RecognitionException {
        PLSQL3Parser.keyCROSS_return retval = new PLSQL3Parser.keyCROSS_return();
        retval.start = input.LT(1);

        int keyCROSS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1407=null;

        Object ID1407_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }

            // antlr3/PLSQL3.g:1339:34: ({...}? ID )
            // antlr3/PLSQL3.g:1339:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("CROSS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCROSS", "input.LT(1).Text.ToUpper() == \"CROSS\"");
            }

            ID1407=(Token)match(input,ID,FOLLOW_ID_in_keyCROSS8473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1407_tree = 
            (Object)adaptor.create(ID1407)
            ;
            adaptor.addChild(root_0, ID1407_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 259, keyCROSS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCROSS"


    public static class keyCUBE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCUBE"
    // antlr3/PLSQL3.g:1340:1: keyCUBE :{...}? ID ;
    public final PLSQL3Parser.keyCUBE_return keyCUBE() throws RecognitionException {
        PLSQL3Parser.keyCUBE_return retval = new PLSQL3Parser.keyCUBE_return();
        retval.start = input.LT(1);

        int keyCUBE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1408=null;

        Object ID1408_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }

            // antlr3/PLSQL3.g:1340:34: ({...}? ID )
            // antlr3/PLSQL3.g:1340:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("CUBE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCUBE", "input.LT(1).Text.ToUpper() == \"CUBE\"");
            }

            ID1408=(Token)match(input,ID,FOLLOW_ID_in_keyCUBE8507); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1408_tree = 
            (Object)adaptor.create(ID1408)
            ;
            adaptor.addChild(root_0, ID1408_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 260, keyCUBE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCUBE"


    public static class keyCURRENT_OF_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCURRENT_OF"
    // antlr3/PLSQL3.g:1341:1: keyCURRENT_OF :{...}? ID ;
    public final PLSQL3Parser.keyCURRENT_OF_return keyCURRENT_OF() throws RecognitionException {
        PLSQL3Parser.keyCURRENT_OF_return retval = new PLSQL3Parser.keyCURRENT_OF_return();
        retval.start = input.LT(1);

        int keyCURRENT_OF_StartIndex = input.index();

        Object root_0 = null;

        Token ID1409=null;

        Object ID1409_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }

            // antlr3/PLSQL3.g:1341:34: ({...}? ID )
            // antlr3/PLSQL3.g:1341:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("CURRENT_OF"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCURRENT_OF", "input.LT(1).Text.ToUpper() == \"CURRENT_OF\"");
            }

            ID1409=(Token)match(input,ID,FOLLOW_ID_in_keyCURRENT_OF8535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1409_tree = 
            (Object)adaptor.create(ID1409)
            ;
            adaptor.addChild(root_0, ID1409_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 261, keyCURRENT_OF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCURRENT_OF"


    public static class keyDAY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyDAY"
    // antlr3/PLSQL3.g:1342:1: keyDAY :{...}? ID ;
    public final PLSQL3Parser.keyDAY_return keyDAY() throws RecognitionException {
        PLSQL3Parser.keyDAY_return retval = new PLSQL3Parser.keyDAY_return();
        retval.start = input.LT(1);

        int keyDAY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1410=null;

        Object ID1410_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }

            // antlr3/PLSQL3.g:1342:34: ({...}? ID )
            // antlr3/PLSQL3.g:1342:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("DAY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDAY", "input.LT(1).Text.ToUpper() == \"DAY\"");
            }

            ID1410=(Token)match(input,ID,FOLLOW_ID_in_keyDAY8570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1410_tree = 
            (Object)adaptor.create(ID1410)
            ;
            adaptor.addChild(root_0, ID1410_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 262, keyDAY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyDAY"


    public static class keyDBTIMEZONE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyDBTIMEZONE"
    // antlr3/PLSQL3.g:1343:1: keyDBTIMEZONE :{...}? ID ;
    public final PLSQL3Parser.keyDBTIMEZONE_return keyDBTIMEZONE() throws RecognitionException {
        PLSQL3Parser.keyDBTIMEZONE_return retval = new PLSQL3Parser.keyDBTIMEZONE_return();
        retval.start = input.LT(1);

        int keyDBTIMEZONE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1411=null;

        Object ID1411_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }

            // antlr3/PLSQL3.g:1343:34: ({...}? ID )
            // antlr3/PLSQL3.g:1343:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("DBTIMEZONE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDBTIMEZONE", "input.LT(1).Text.ToUpper() == \"DBTIMEZONE\"");
            }

            ID1411=(Token)match(input,ID,FOLLOW_ID_in_keyDBTIMEZONE8598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1411_tree = 
            (Object)adaptor.create(ID1411)
            ;
            adaptor.addChild(root_0, ID1411_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 263, keyDBTIMEZONE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyDBTIMEZONE"


    public static class keyDECREMENT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyDECREMENT"
    // antlr3/PLSQL3.g:1344:1: keyDECREMENT :{...}? ID ;
    public final PLSQL3Parser.keyDECREMENT_return keyDECREMENT() throws RecognitionException {
        PLSQL3Parser.keyDECREMENT_return retval = new PLSQL3Parser.keyDECREMENT_return();
        retval.start = input.LT(1);

        int keyDECREMENT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1412=null;

        Object ID1412_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }

            // antlr3/PLSQL3.g:1344:34: ({...}? ID )
            // antlr3/PLSQL3.g:1344:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("DECREMENT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDECREMENT", "input.LT(1).Text.ToUpper() == \"DECREMENT\"");
            }

            ID1412=(Token)match(input,ID,FOLLOW_ID_in_keyDECREMENT8627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1412_tree = 
            (Object)adaptor.create(ID1412)
            ;
            adaptor.addChild(root_0, ID1412_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 264, keyDECREMENT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyDECREMENT"


    public static class keyDIMENSION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyDIMENSION"
    // antlr3/PLSQL3.g:1345:1: keyDIMENSION :{...}? ID ;
    public final PLSQL3Parser.keyDIMENSION_return keyDIMENSION() throws RecognitionException {
        PLSQL3Parser.keyDIMENSION_return retval = new PLSQL3Parser.keyDIMENSION_return();
        retval.start = input.LT(1);

        int keyDIMENSION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1413=null;

        Object ID1413_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }

            // antlr3/PLSQL3.g:1345:34: ({...}? ID )
            // antlr3/PLSQL3.g:1345:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("DIMENSION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDIMENSION", "input.LT(1).Text.ToUpper() == \"DIMENSION\"");
            }

            ID1413=(Token)match(input,ID,FOLLOW_ID_in_keyDIMENSION8656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1413_tree = 
            (Object)adaptor.create(ID1413)
            ;
            adaptor.addChild(root_0, ID1413_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 265, keyDIMENSION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyDIMENSION"


    public static class keyEMPTY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyEMPTY"
    // antlr3/PLSQL3.g:1346:1: keyEMPTY :{...}? ID ;
    public final PLSQL3Parser.keyEMPTY_return keyEMPTY() throws RecognitionException {
        PLSQL3Parser.keyEMPTY_return retval = new PLSQL3Parser.keyEMPTY_return();
        retval.start = input.LT(1);

        int keyEMPTY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1414=null;

        Object ID1414_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }

            // antlr3/PLSQL3.g:1346:34: ({...}? ID )
            // antlr3/PLSQL3.g:1346:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("EMPTY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEMPTY", "input.LT(1).Text.ToUpper() == \"EMPTY\"");
            }

            ID1414=(Token)match(input,ID,FOLLOW_ID_in_keyEMPTY8689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1414_tree = 
            (Object)adaptor.create(ID1414)
            ;
            adaptor.addChild(root_0, ID1414_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 266, keyEMPTY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyEMPTY"


    public static class keyEQUALS_PATH_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyEQUALS_PATH"
    // antlr3/PLSQL3.g:1347:1: keyEQUALS_PATH :{...}? ID ;
    public final PLSQL3Parser.keyEQUALS_PATH_return keyEQUALS_PATH() throws RecognitionException {
        PLSQL3Parser.keyEQUALS_PATH_return retval = new PLSQL3Parser.keyEQUALS_PATH_return();
        retval.start = input.LT(1);

        int keyEQUALS_PATH_StartIndex = input.index();

        Object root_0 = null;

        Token ID1415=null;

        Object ID1415_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }

            // antlr3/PLSQL3.g:1347:34: ({...}? ID )
            // antlr3/PLSQL3.g:1347:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("EQUALS_PATH"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEQUALS_PATH", "input.LT(1).Text.ToUpper() == \"EQUALS_PATH\"");
            }

            ID1415=(Token)match(input,ID,FOLLOW_ID_in_keyEQUALS_PATH8716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1415_tree = 
            (Object)adaptor.create(ID1415)
            ;
            adaptor.addChild(root_0, ID1415_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 267, keyEQUALS_PATH_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyEQUALS_PATH"


    public static class keyESCAPE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyESCAPE"
    // antlr3/PLSQL3.g:1348:1: keyESCAPE :{...}? ID ;
    public final PLSQL3Parser.keyESCAPE_return keyESCAPE() throws RecognitionException {
        PLSQL3Parser.keyESCAPE_return retval = new PLSQL3Parser.keyESCAPE_return();
        retval.start = input.LT(1);

        int keyESCAPE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1416=null;

        Object ID1416_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }

            // antlr3/PLSQL3.g:1348:34: ({...}? ID )
            // antlr3/PLSQL3.g:1348:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("ESCAPE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyESCAPE", "input.LT(1).Text.ToUpper() == \"ESCAPE\"");
            }

            ID1416=(Token)match(input,ID,FOLLOW_ID_in_keyESCAPE8748); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1416_tree = 
            (Object)adaptor.create(ID1416)
            ;
            adaptor.addChild(root_0, ID1416_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 268, keyESCAPE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyESCAPE"


    public static class keyFIRST_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyFIRST"
    // antlr3/PLSQL3.g:1349:1: keyFIRST :{...}? ID ;
    public final PLSQL3Parser.keyFIRST_return keyFIRST() throws RecognitionException {
        PLSQL3Parser.keyFIRST_return retval = new PLSQL3Parser.keyFIRST_return();
        retval.start = input.LT(1);

        int keyFIRST_StartIndex = input.index();

        Object root_0 = null;

        Token ID1417=null;

        Object ID1417_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }

            // antlr3/PLSQL3.g:1349:34: ({...}? ID )
            // antlr3/PLSQL3.g:1349:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("FIRST"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFIRST", "input.LT(1).Text.ToUpper() == \"FIRST\"");
            }

            ID1417=(Token)match(input,ID,FOLLOW_ID_in_keyFIRST8781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1417_tree = 
            (Object)adaptor.create(ID1417)
            ;
            adaptor.addChild(root_0, ID1417_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 269, keyFIRST_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyFIRST"


    public static class keyFULL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyFULL"
    // antlr3/PLSQL3.g:1350:1: keyFULL :{...}? ID ;
    public final PLSQL3Parser.keyFULL_return keyFULL() throws RecognitionException {
        PLSQL3Parser.keyFULL_return retval = new PLSQL3Parser.keyFULL_return();
        retval.start = input.LT(1);

        int keyFULL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1418=null;

        Object ID1418_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }

            // antlr3/PLSQL3.g:1350:34: ({...}? ID )
            // antlr3/PLSQL3.g:1350:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("FULL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFULL", "input.LT(1).Text.ToUpper() == \"FULL\"");
            }

            ID1418=(Token)match(input,ID,FOLLOW_ID_in_keyFULL8815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1418_tree = 
            (Object)adaptor.create(ID1418)
            ;
            adaptor.addChild(root_0, ID1418_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 270, keyFULL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyFULL"


    public static class keyGROUPING_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyGROUPING"
    // antlr3/PLSQL3.g:1351:1: keyGROUPING :{...}? ID ;
    public final PLSQL3Parser.keyGROUPING_return keyGROUPING() throws RecognitionException {
        PLSQL3Parser.keyGROUPING_return retval = new PLSQL3Parser.keyGROUPING_return();
        retval.start = input.LT(1);

        int keyGROUPING_StartIndex = input.index();

        Object root_0 = null;

        Token ID1419=null;

        Object ID1419_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }

            // antlr3/PLSQL3.g:1351:34: ({...}? ID )
            // antlr3/PLSQL3.g:1351:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("GROUPING"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyGROUPING", "input.LT(1).Text.ToUpper() == \"GROUPING\"");
            }

            ID1419=(Token)match(input,ID,FOLLOW_ID_in_keyGROUPING8845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1419_tree = 
            (Object)adaptor.create(ID1419)
            ;
            adaptor.addChild(root_0, ID1419_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 271, keyGROUPING_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyGROUPING"


    public static class keyIGNORE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyIGNORE"
    // antlr3/PLSQL3.g:1352:1: keyIGNORE :{...}? ID ;
    public final PLSQL3Parser.keyIGNORE_return keyIGNORE() throws RecognitionException {
        PLSQL3Parser.keyIGNORE_return retval = new PLSQL3Parser.keyIGNORE_return();
        retval.start = input.LT(1);

        int keyIGNORE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1420=null;

        Object ID1420_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }

            // antlr3/PLSQL3.g:1352:34: ({...}? ID )
            // antlr3/PLSQL3.g:1352:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("IGNORE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyIGNORE", "input.LT(1).Text.ToUpper() == \"IGNORE\"");
            }

            ID1420=(Token)match(input,ID,FOLLOW_ID_in_keyIGNORE8877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1420_tree = 
            (Object)adaptor.create(ID1420)
            ;
            adaptor.addChild(root_0, ID1420_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 272, keyIGNORE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyIGNORE"


    public static class keyINCREMENT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINCREMENT"
    // antlr3/PLSQL3.g:1353:1: keyINCREMENT :{...}? ID ;
    public final PLSQL3Parser.keyINCREMENT_return keyINCREMENT() throws RecognitionException {
        PLSQL3Parser.keyINCREMENT_return retval = new PLSQL3Parser.keyINCREMENT_return();
        retval.start = input.LT(1);

        int keyINCREMENT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1421=null;

        Object ID1421_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }

            // antlr3/PLSQL3.g:1353:34: ({...}? ID )
            // antlr3/PLSQL3.g:1353:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("INCREMENT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINCREMENT", "input.LT(1).Text.ToUpper() == \"INCREMENT\"");
            }

            ID1421=(Token)match(input,ID,FOLLOW_ID_in_keyINCREMENT8906); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1421_tree = 
            (Object)adaptor.create(ID1421)
            ;
            adaptor.addChild(root_0, ID1421_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 273, keyINCREMENT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINCREMENT"


    public static class keyINFINITE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINFINITE"
    // antlr3/PLSQL3.g:1354:1: keyINFINITE :{...}? ID ;
    public final PLSQL3Parser.keyINFINITE_return keyINFINITE() throws RecognitionException {
        PLSQL3Parser.keyINFINITE_return retval = new PLSQL3Parser.keyINFINITE_return();
        retval.start = input.LT(1);

        int keyINFINITE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1422=null;

        Object ID1422_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }

            // antlr3/PLSQL3.g:1354:34: ({...}? ID )
            // antlr3/PLSQL3.g:1354:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("INFINITE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINFINITE", "input.LT(1).Text.ToUpper() == \"INFINITE\"");
            }

            ID1422=(Token)match(input,ID,FOLLOW_ID_in_keyINFINITE8936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1422_tree = 
            (Object)adaptor.create(ID1422)
            ;
            adaptor.addChild(root_0, ID1422_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 274, keyINFINITE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINFINITE"


    public static class keyINNER_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINNER"
    // antlr3/PLSQL3.g:1355:1: keyINNER :{...}? ID ;
    public final PLSQL3Parser.keyINNER_return keyINNER() throws RecognitionException {
        PLSQL3Parser.keyINNER_return retval = new PLSQL3Parser.keyINNER_return();
        retval.start = input.LT(1);

        int keyINNER_StartIndex = input.index();

        Object root_0 = null;

        Token ID1423=null;

        Object ID1423_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }

            // antlr3/PLSQL3.g:1355:34: ({...}? ID )
            // antlr3/PLSQL3.g:1355:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("INNER"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINNER", "input.LT(1).Text.ToUpper() == \"INNER\"");
            }

            ID1423=(Token)match(input,ID,FOLLOW_ID_in_keyINNER8969); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1423_tree = 
            (Object)adaptor.create(ID1423)
            ;
            adaptor.addChild(root_0, ID1423_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 275, keyINNER_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINNER"


    public static class keyINTERVAL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINTERVAL"
    // antlr3/PLSQL3.g:1356:1: keyINTERVAL :{...}? ID ;
    public final PLSQL3Parser.keyINTERVAL_return keyINTERVAL() throws RecognitionException {
        PLSQL3Parser.keyINTERVAL_return retval = new PLSQL3Parser.keyINTERVAL_return();
        retval.start = input.LT(1);

        int keyINTERVAL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1424=null;

        Object ID1424_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }

            // antlr3/PLSQL3.g:1356:34: ({...}? ID )
            // antlr3/PLSQL3.g:1356:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("INTERVAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINTERVAL", "input.LT(1).Text.ToUpper() == \"INTERVAL\"");
            }

            ID1424=(Token)match(input,ID,FOLLOW_ID_in_keyINTERVAL8999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1424_tree = 
            (Object)adaptor.create(ID1424)
            ;
            adaptor.addChild(root_0, ID1424_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 276, keyINTERVAL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINTERVAL"


    public static class keyITERATE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyITERATE"
    // antlr3/PLSQL3.g:1357:1: keyITERATE :{...}? ID ;
    public final PLSQL3Parser.keyITERATE_return keyITERATE() throws RecognitionException {
        PLSQL3Parser.keyITERATE_return retval = new PLSQL3Parser.keyITERATE_return();
        retval.start = input.LT(1);

        int keyITERATE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1425=null;

        Object ID1425_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }

            // antlr3/PLSQL3.g:1357:34: ({...}? ID )
            // antlr3/PLSQL3.g:1357:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("ITERATE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyITERATE", "input.LT(1).Text.ToUpper() == \"ITERATE\"");
            }

            ID1425=(Token)match(input,ID,FOLLOW_ID_in_keyITERATE9030); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1425_tree = 
            (Object)adaptor.create(ID1425)
            ;
            adaptor.addChild(root_0, ID1425_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 277, keyITERATE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyITERATE"


    public static class keyJOIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyJOIN"
    // antlr3/PLSQL3.g:1358:1: keyJOIN :{...}? ID ;
    public final PLSQL3Parser.keyJOIN_return keyJOIN() throws RecognitionException {
        PLSQL3Parser.keyJOIN_return retval = new PLSQL3Parser.keyJOIN_return();
        retval.start = input.LT(1);

        int keyJOIN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1426=null;

        Object ID1426_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }

            // antlr3/PLSQL3.g:1358:34: ({...}? ID )
            // antlr3/PLSQL3.g:1358:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("JOIN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyJOIN", "input.LT(1).Text.ToUpper() == \"JOIN\"");
            }

            ID1426=(Token)match(input,ID,FOLLOW_ID_in_keyJOIN9064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1426_tree = 
            (Object)adaptor.create(ID1426)
            ;
            adaptor.addChild(root_0, ID1426_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 278, keyJOIN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyJOIN"


    public static class keyKEEP_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyKEEP"
    // antlr3/PLSQL3.g:1359:1: keyKEEP :{...}? ID ;
    public final PLSQL3Parser.keyKEEP_return keyKEEP() throws RecognitionException {
        PLSQL3Parser.keyKEEP_return retval = new PLSQL3Parser.keyKEEP_return();
        retval.start = input.LT(1);

        int keyKEEP_StartIndex = input.index();

        Object root_0 = null;

        Token ID1427=null;

        Object ID1427_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }

            // antlr3/PLSQL3.g:1359:34: ({...}? ID )
            // antlr3/PLSQL3.g:1359:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("KEEP"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyKEEP", "input.LT(1).Text.ToUpper() == \"KEEP\"");
            }

            ID1427=(Token)match(input,ID,FOLLOW_ID_in_keyKEEP9098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1427_tree = 
            (Object)adaptor.create(ID1427)
            ;
            adaptor.addChild(root_0, ID1427_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 279, keyKEEP_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyKEEP"


    public static class keyLAST_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLAST"
    // antlr3/PLSQL3.g:1360:1: keyLAST :{...}? ID ;
    public final PLSQL3Parser.keyLAST_return keyLAST() throws RecognitionException {
        PLSQL3Parser.keyLAST_return retval = new PLSQL3Parser.keyLAST_return();
        retval.start = input.LT(1);

        int keyLAST_StartIndex = input.index();

        Object root_0 = null;

        Token ID1428=null;

        Object ID1428_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }

            // antlr3/PLSQL3.g:1360:34: ({...}? ID )
            // antlr3/PLSQL3.g:1360:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("LAST"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLAST", "input.LT(1).Text.ToUpper() == \"LAST\"");
            }

            ID1428=(Token)match(input,ID,FOLLOW_ID_in_keyLAST9132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1428_tree = 
            (Object)adaptor.create(ID1428)
            ;
            adaptor.addChild(root_0, ID1428_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 280, keyLAST_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLAST"


    public static class keyLEFT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLEFT"
    // antlr3/PLSQL3.g:1361:1: keyLEFT :{...}? ID ;
    public final PLSQL3Parser.keyLEFT_return keyLEFT() throws RecognitionException {
        PLSQL3Parser.keyLEFT_return retval = new PLSQL3Parser.keyLEFT_return();
        retval.start = input.LT(1);

        int keyLEFT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1429=null;

        Object ID1429_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }

            // antlr3/PLSQL3.g:1361:34: ({...}? ID )
            // antlr3/PLSQL3.g:1361:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("LEFT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLEFT", "input.LT(1).Text.ToUpper() == \"LEFT\"");
            }

            ID1429=(Token)match(input,ID,FOLLOW_ID_in_keyLEFT9166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1429_tree = 
            (Object)adaptor.create(ID1429)
            ;
            adaptor.addChild(root_0, ID1429_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 281, keyLEFT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLEFT"


    public static class keyLIKE2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLIKE2"
    // antlr3/PLSQL3.g:1362:1: keyLIKE2 :{...}? ID ;
    public final PLSQL3Parser.keyLIKE2_return keyLIKE2() throws RecognitionException {
        PLSQL3Parser.keyLIKE2_return retval = new PLSQL3Parser.keyLIKE2_return();
        retval.start = input.LT(1);

        int keyLIKE2_StartIndex = input.index();

        Object root_0 = null;

        Token ID1430=null;

        Object ID1430_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }

            // antlr3/PLSQL3.g:1362:34: ({...}? ID )
            // antlr3/PLSQL3.g:1362:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("LIKE2"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKE2", "input.LT(1).Text.ToUpper() == \"LIKE2\"");
            }

            ID1430=(Token)match(input,ID,FOLLOW_ID_in_keyLIKE29199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1430_tree = 
            (Object)adaptor.create(ID1430)
            ;
            adaptor.addChild(root_0, ID1430_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 282, keyLIKE2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLIKE2"


    public static class keyLIKE4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLIKE4"
    // antlr3/PLSQL3.g:1363:1: keyLIKE4 :{...}? ID ;
    public final PLSQL3Parser.keyLIKE4_return keyLIKE4() throws RecognitionException {
        PLSQL3Parser.keyLIKE4_return retval = new PLSQL3Parser.keyLIKE4_return();
        retval.start = input.LT(1);

        int keyLIKE4_StartIndex = input.index();

        Object root_0 = null;

        Token ID1431=null;

        Object ID1431_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }

            // antlr3/PLSQL3.g:1363:34: ({...}? ID )
            // antlr3/PLSQL3.g:1363:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("LIKE4"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKE4", "input.LT(1).Text.ToUpper() == \"LIKE4\"");
            }

            ID1431=(Token)match(input,ID,FOLLOW_ID_in_keyLIKE49232); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1431_tree = 
            (Object)adaptor.create(ID1431)
            ;
            adaptor.addChild(root_0, ID1431_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 283, keyLIKE4_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLIKE4"


    public static class keyLIKEC_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLIKEC"
    // antlr3/PLSQL3.g:1364:1: keyLIKEC :{...}? ID ;
    public final PLSQL3Parser.keyLIKEC_return keyLIKEC() throws RecognitionException {
        PLSQL3Parser.keyLIKEC_return retval = new PLSQL3Parser.keyLIKEC_return();
        retval.start = input.LT(1);

        int keyLIKEC_StartIndex = input.index();

        Object root_0 = null;

        Token ID1432=null;

        Object ID1432_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }

            // antlr3/PLSQL3.g:1364:34: ({...}? ID )
            // antlr3/PLSQL3.g:1364:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("LIKEC"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKEC", "input.LT(1).Text.ToUpper() == \"LIKEC\"");
            }

            ID1432=(Token)match(input,ID,FOLLOW_ID_in_keyLIKEC9265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1432_tree = 
            (Object)adaptor.create(ID1432)
            ;
            adaptor.addChild(root_0, ID1432_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 284, keyLIKEC_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLIKEC"


    public static class keyLOCAL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLOCAL"
    // antlr3/PLSQL3.g:1365:1: keyLOCAL :{...}? ID ;
    public final PLSQL3Parser.keyLOCAL_return keyLOCAL() throws RecognitionException {
        PLSQL3Parser.keyLOCAL_return retval = new PLSQL3Parser.keyLOCAL_return();
        retval.start = input.LT(1);

        int keyLOCAL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1433=null;

        Object ID1433_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }

            // antlr3/PLSQL3.g:1365:34: ({...}? ID )
            // antlr3/PLSQL3.g:1365:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("LOCAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLOCAL", "input.LT(1).Text.ToUpper() == \"LOCAL\"");
            }

            ID1433=(Token)match(input,ID,FOLLOW_ID_in_keyLOCAL9298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1433_tree = 
            (Object)adaptor.create(ID1433)
            ;
            adaptor.addChild(root_0, ID1433_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 285, keyLOCAL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLOCAL"


    public static class keyMAIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMAIN"
    // antlr3/PLSQL3.g:1366:1: keyMAIN :{...}? ID ;
    public final PLSQL3Parser.keyMAIN_return keyMAIN() throws RecognitionException {
        PLSQL3Parser.keyMAIN_return retval = new PLSQL3Parser.keyMAIN_return();
        retval.start = input.LT(1);

        int keyMAIN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1434=null;

        Object ID1434_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }

            // antlr3/PLSQL3.g:1366:34: ({...}? ID )
            // antlr3/PLSQL3.g:1366:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("MAIN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMAIN", "input.LT(1).Text.ToUpper() == \"MAIN\"");
            }

            ID1434=(Token)match(input,ID,FOLLOW_ID_in_keyMAIN9332); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1434_tree = 
            (Object)adaptor.create(ID1434)
            ;
            adaptor.addChild(root_0, ID1434_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 286, keyMAIN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMAIN"


    public static class keyMEASURES_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMEASURES"
    // antlr3/PLSQL3.g:1367:1: keyMEASURES :{...}? ID ;
    public final PLSQL3Parser.keyMEASURES_return keyMEASURES() throws RecognitionException {
        PLSQL3Parser.keyMEASURES_return retval = new PLSQL3Parser.keyMEASURES_return();
        retval.start = input.LT(1);

        int keyMEASURES_StartIndex = input.index();

        Object root_0 = null;

        Token ID1435=null;

        Object ID1435_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }

            // antlr3/PLSQL3.g:1367:34: ({...}? ID )
            // antlr3/PLSQL3.g:1367:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("MEASURES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMEASURES", "input.LT(1).Text.ToUpper() == \"MEASURES\"");
            }

            ID1435=(Token)match(input,ID,FOLLOW_ID_in_keyMEASURES9362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1435_tree = 
            (Object)adaptor.create(ID1435)
            ;
            adaptor.addChild(root_0, ID1435_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 287, keyMEASURES_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMEASURES"


    public static class keyMEMBER_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMEMBER"
    // antlr3/PLSQL3.g:1368:1: keyMEMBER :{...}? ID ;
    public final PLSQL3Parser.keyMEMBER_return keyMEMBER() throws RecognitionException {
        PLSQL3Parser.keyMEMBER_return retval = new PLSQL3Parser.keyMEMBER_return();
        retval.start = input.LT(1);

        int keyMEMBER_StartIndex = input.index();

        Object root_0 = null;

        Token ID1436=null;

        Object ID1436_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 288) ) { return retval; }

            // antlr3/PLSQL3.g:1368:34: ({...}? ID )
            // antlr3/PLSQL3.g:1368:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("MEMBER"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMEMBER", "input.LT(1).Text.ToUpper() == \"MEMBER\"");
            }

            ID1436=(Token)match(input,ID,FOLLOW_ID_in_keyMEMBER9394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1436_tree = 
            (Object)adaptor.create(ID1436)
            ;
            adaptor.addChild(root_0, ID1436_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 288, keyMEMBER_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMEMBER"


    public static class keyMODEL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMODEL"
    // antlr3/PLSQL3.g:1369:1: keyMODEL :{...}? ID ;
    public final PLSQL3Parser.keyMODEL_return keyMODEL() throws RecognitionException {
        PLSQL3Parser.keyMODEL_return retval = new PLSQL3Parser.keyMODEL_return();
        retval.start = input.LT(1);

        int keyMODEL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1437=null;

        Object ID1437_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 289) ) { return retval; }

            // antlr3/PLSQL3.g:1369:34: ({...}? ID )
            // antlr3/PLSQL3.g:1369:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("MODEL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMODEL", "input.LT(1).Text.ToUpper() == \"MODEL\"");
            }

            ID1437=(Token)match(input,ID,FOLLOW_ID_in_keyMODEL9427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1437_tree = 
            (Object)adaptor.create(ID1437)
            ;
            adaptor.addChild(root_0, ID1437_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 289, keyMODEL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMODEL"


    public static class keyMONTH_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyMONTH"
    // antlr3/PLSQL3.g:1370:1: keyMONTH :{...}? ID ;
    public final PLSQL3Parser.keyMONTH_return keyMONTH() throws RecognitionException {
        PLSQL3Parser.keyMONTH_return retval = new PLSQL3Parser.keyMONTH_return();
        retval.start = input.LT(1);

        int keyMONTH_StartIndex = input.index();

        Object root_0 = null;

        Token ID1438=null;

        Object ID1438_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 290) ) { return retval; }

            // antlr3/PLSQL3.g:1370:34: ({...}? ID )
            // antlr3/PLSQL3.g:1370:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("MONTH"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMONTH", "input.LT(1).Text.ToUpper() == \"MONTH\"");
            }

            ID1438=(Token)match(input,ID,FOLLOW_ID_in_keyMONTH9460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1438_tree = 
            (Object)adaptor.create(ID1438)
            ;
            adaptor.addChild(root_0, ID1438_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 290, keyMONTH_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyMONTH"


    public static class keyNAN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNAN"
    // antlr3/PLSQL3.g:1371:1: keyNAN :{...}? ID ;
    public final PLSQL3Parser.keyNAN_return keyNAN() throws RecognitionException {
        PLSQL3Parser.keyNAN_return retval = new PLSQL3Parser.keyNAN_return();
        retval.start = input.LT(1);

        int keyNAN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1439=null;

        Object ID1439_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 291) ) { return retval; }

            // antlr3/PLSQL3.g:1371:34: ({...}? ID )
            // antlr3/PLSQL3.g:1371:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("NAN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNAN", "input.LT(1).Text.ToUpper() == \"NAN\"");
            }

            ID1439=(Token)match(input,ID,FOLLOW_ID_in_keyNAN9495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1439_tree = 
            (Object)adaptor.create(ID1439)
            ;
            adaptor.addChild(root_0, ID1439_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 291, keyNAN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNAN"


    public static class keyNATURAL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNATURAL"
    // antlr3/PLSQL3.g:1372:1: keyNATURAL :{...}? ID ;
    public final PLSQL3Parser.keyNATURAL_return keyNATURAL() throws RecognitionException {
        PLSQL3Parser.keyNATURAL_return retval = new PLSQL3Parser.keyNATURAL_return();
        retval.start = input.LT(1);

        int keyNATURAL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1440=null;

        Object ID1440_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 292) ) { return retval; }

            // antlr3/PLSQL3.g:1372:34: ({...}? ID )
            // antlr3/PLSQL3.g:1372:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("NATURAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNATURAL", "input.LT(1).Text.ToUpper() == \"NATURAL\"");
            }

            ID1440=(Token)match(input,ID,FOLLOW_ID_in_keyNATURAL9526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1440_tree = 
            (Object)adaptor.create(ID1440)
            ;
            adaptor.addChild(root_0, ID1440_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 292, keyNATURAL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNATURAL"


    public static class keyNAV_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNAV"
    // antlr3/PLSQL3.g:1373:1: keyNAV :{...}? ID ;
    public final PLSQL3Parser.keyNAV_return keyNAV() throws RecognitionException {
        PLSQL3Parser.keyNAV_return retval = new PLSQL3Parser.keyNAV_return();
        retval.start = input.LT(1);

        int keyNAV_StartIndex = input.index();

        Object root_0 = null;

        Token ID1441=null;

        Object ID1441_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 293) ) { return retval; }

            // antlr3/PLSQL3.g:1373:34: ({...}? ID )
            // antlr3/PLSQL3.g:1373:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("NAV"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNAV", "input.LT(1).Text.ToUpper() == \"NAV\"");
            }

            ID1441=(Token)match(input,ID,FOLLOW_ID_in_keyNAV9561); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1441_tree = 
            (Object)adaptor.create(ID1441)
            ;
            adaptor.addChild(root_0, ID1441_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 293, keyNAV_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNAV"


    public static class keyNOCYCLE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNOCYCLE"
    // antlr3/PLSQL3.g:1374:1: keyNOCYCLE :{...}? ID ;
    public final PLSQL3Parser.keyNOCYCLE_return keyNOCYCLE() throws RecognitionException {
        PLSQL3Parser.keyNOCYCLE_return retval = new PLSQL3Parser.keyNOCYCLE_return();
        retval.start = input.LT(1);

        int keyNOCYCLE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1442=null;

        Object ID1442_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 294) ) { return retval; }

            // antlr3/PLSQL3.g:1374:34: ({...}? ID )
            // antlr3/PLSQL3.g:1374:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("NOCYCLE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNOCYCLE", "input.LT(1).Text.ToUpper() == \"NOCYCLE\"");
            }

            ID1442=(Token)match(input,ID,FOLLOW_ID_in_keyNOCYCLE9592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1442_tree = 
            (Object)adaptor.create(ID1442)
            ;
            adaptor.addChild(root_0, ID1442_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 294, keyNOCYCLE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNOCYCLE"


    public static class keyNULLS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNULLS"
    // antlr3/PLSQL3.g:1375:1: keyNULLS :{...}? ID ;
    public final PLSQL3Parser.keyNULLS_return keyNULLS() throws RecognitionException {
        PLSQL3Parser.keyNULLS_return retval = new PLSQL3Parser.keyNULLS_return();
        retval.start = input.LT(1);

        int keyNULLS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1443=null;

        Object ID1443_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 295) ) { return retval; }

            // antlr3/PLSQL3.g:1375:34: ({...}? ID )
            // antlr3/PLSQL3.g:1375:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("NULLS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNULLS", "input.LT(1).Text.ToUpper() == \"NULLS\"");
            }

            ID1443=(Token)match(input,ID,FOLLOW_ID_in_keyNULLS9625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1443_tree = 
            (Object)adaptor.create(ID1443)
            ;
            adaptor.addChild(root_0, ID1443_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 295, keyNULLS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNULLS"


    public static class keyONLY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyONLY"
    // antlr3/PLSQL3.g:1376:1: keyONLY :{...}? ID ;
    public final PLSQL3Parser.keyONLY_return keyONLY() throws RecognitionException {
        PLSQL3Parser.keyONLY_return retval = new PLSQL3Parser.keyONLY_return();
        retval.start = input.LT(1);

        int keyONLY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1444=null;

        Object ID1444_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 296) ) { return retval; }

            // antlr3/PLSQL3.g:1376:34: ({...}? ID )
            // antlr3/PLSQL3.g:1376:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("ONLY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyONLY", "input.LT(1).Text.ToUpper() == \"ONLY\"");
            }

            ID1444=(Token)match(input,ID,FOLLOW_ID_in_keyONLY9659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1444_tree = 
            (Object)adaptor.create(ID1444)
            ;
            adaptor.addChild(root_0, ID1444_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 296, keyONLY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyONLY"


    public static class keyOUTER_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyOUTER"
    // antlr3/PLSQL3.g:1377:1: keyOUTER :{...}? ID ;
    public final PLSQL3Parser.keyOUTER_return keyOUTER() throws RecognitionException {
        PLSQL3Parser.keyOUTER_return retval = new PLSQL3Parser.keyOUTER_return();
        retval.start = input.LT(1);

        int keyOUTER_StartIndex = input.index();

        Object root_0 = null;

        Token ID1445=null;

        Object ID1445_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 297) ) { return retval; }

            // antlr3/PLSQL3.g:1377:34: ({...}? ID )
            // antlr3/PLSQL3.g:1377:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("OUTER"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyOUTER", "input.LT(1).Text.ToUpper() == \"OUTER\"");
            }

            ID1445=(Token)match(input,ID,FOLLOW_ID_in_keyOUTER9692); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1445_tree = 
            (Object)adaptor.create(ID1445)
            ;
            adaptor.addChild(root_0, ID1445_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 297, keyOUTER_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyOUTER"


    public static class keyPARTITION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPARTITION"
    // antlr3/PLSQL3.g:1378:1: keyPARTITION :{...}? ID ;
    public final PLSQL3Parser.keyPARTITION_return keyPARTITION() throws RecognitionException {
        PLSQL3Parser.keyPARTITION_return retval = new PLSQL3Parser.keyPARTITION_return();
        retval.start = input.LT(1);

        int keyPARTITION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1446=null;

        Object ID1446_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 298) ) { return retval; }

            // antlr3/PLSQL3.g:1378:34: ({...}? ID )
            // antlr3/PLSQL3.g:1378:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("PARTITION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPARTITION", "input.LT(1).Text.ToUpper() == \"PARTITION\"");
            }

            ID1446=(Token)match(input,ID,FOLLOW_ID_in_keyPARTITION9721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1446_tree = 
            (Object)adaptor.create(ID1446)
            ;
            adaptor.addChild(root_0, ID1446_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 298, keyPARTITION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPARTITION"


    public static class keyPRECISION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPRECISION"
    // antlr3/PLSQL3.g:1379:1: keyPRECISION :{...}? ID ;
    public final PLSQL3Parser.keyPRECISION_return keyPRECISION() throws RecognitionException {
        PLSQL3Parser.keyPRECISION_return retval = new PLSQL3Parser.keyPRECISION_return();
        retval.start = input.LT(1);

        int keyPRECISION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1447=null;

        Object ID1447_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 299) ) { return retval; }

            // antlr3/PLSQL3.g:1379:34: ({...}? ID )
            // antlr3/PLSQL3.g:1379:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("PRECISION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPRECISION", "input.LT(1).Text.ToUpper() == \"PRECISION\"");
            }

            ID1447=(Token)match(input,ID,FOLLOW_ID_in_keyPRECISION9750); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1447_tree = 
            (Object)adaptor.create(ID1447)
            ;
            adaptor.addChild(root_0, ID1447_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 299, keyPRECISION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPRECISION"


    public static class keyPRESENT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPRESENT"
    // antlr3/PLSQL3.g:1380:1: keyPRESENT :{...}? ID ;
    public final PLSQL3Parser.keyPRESENT_return keyPRESENT() throws RecognitionException {
        PLSQL3Parser.keyPRESENT_return retval = new PLSQL3Parser.keyPRESENT_return();
        retval.start = input.LT(1);

        int keyPRESENT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1448=null;

        Object ID1448_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 300) ) { return retval; }

            // antlr3/PLSQL3.g:1380:34: ({...}? ID )
            // antlr3/PLSQL3.g:1380:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("PRESENT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPRESENT", "input.LT(1).Text.ToUpper() == \"PRESENT\"");
            }

            ID1448=(Token)match(input,ID,FOLLOW_ID_in_keyPRESENT9781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1448_tree = 
            (Object)adaptor.create(ID1448)
            ;
            adaptor.addChild(root_0, ID1448_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 300, keyPRESENT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPRESENT"


    public static class keyREFERENCE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREFERENCE"
    // antlr3/PLSQL3.g:1381:1: keyREFERENCE :{...}? ID ;
    public final PLSQL3Parser.keyREFERENCE_return keyREFERENCE() throws RecognitionException {
        PLSQL3Parser.keyREFERENCE_return retval = new PLSQL3Parser.keyREFERENCE_return();
        retval.start = input.LT(1);

        int keyREFERENCE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1449=null;

        Object ID1449_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 301) ) { return retval; }

            // antlr3/PLSQL3.g:1381:34: ({...}? ID )
            // antlr3/PLSQL3.g:1381:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("REFERENCE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREFERENCE", "input.LT(1).Text.ToUpper() == \"REFERENCE\"");
            }

            ID1449=(Token)match(input,ID,FOLLOW_ID_in_keyREFERENCE9810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1449_tree = 
            (Object)adaptor.create(ID1449)
            ;
            adaptor.addChild(root_0, ID1449_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 301, keyREFERENCE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREFERENCE"


    public static class keyREGEXP_LIKE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREGEXP_LIKE"
    // antlr3/PLSQL3.g:1382:1: keyREGEXP_LIKE :{...}? ID ;
    public final PLSQL3Parser.keyREGEXP_LIKE_return keyREGEXP_LIKE() throws RecognitionException {
        PLSQL3Parser.keyREGEXP_LIKE_return retval = new PLSQL3Parser.keyREGEXP_LIKE_return();
        retval.start = input.LT(1);

        int keyREGEXP_LIKE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1450=null;

        Object ID1450_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 302) ) { return retval; }

            // antlr3/PLSQL3.g:1382:34: ({...}? ID )
            // antlr3/PLSQL3.g:1382:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("REGEXP_LIKE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREGEXP_LIKE", "input.LT(1).Text.ToUpper() == \"REGEXP_LIKE\"");
            }

            ID1450=(Token)match(input,ID,FOLLOW_ID_in_keyREGEXP_LIKE9837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1450_tree = 
            (Object)adaptor.create(ID1450)
            ;
            adaptor.addChild(root_0, ID1450_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 302, keyREGEXP_LIKE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREGEXP_LIKE"


    public static class keyRIGHT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRIGHT"
    // antlr3/PLSQL3.g:1384:1: keyRIGHT :{...}? ID ;
    public final PLSQL3Parser.keyRIGHT_return keyRIGHT() throws RecognitionException {
        PLSQL3Parser.keyRIGHT_return retval = new PLSQL3Parser.keyRIGHT_return();
        retval.start = input.LT(1);

        int keyRIGHT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1451=null;

        Object ID1451_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 303) ) { return retval; }

            // antlr3/PLSQL3.g:1384:34: ({...}? ID )
            // antlr3/PLSQL3.g:1384:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("RIGHT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRIGHT", "input.LT(1).Text.ToUpper() == \"RIGHT\"");
            }

            ID1451=(Token)match(input,ID,FOLLOW_ID_in_keyRIGHT9871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1451_tree = 
            (Object)adaptor.create(ID1451)
            ;
            adaptor.addChild(root_0, ID1451_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 303, keyRIGHT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRIGHT"


    public static class keyROLLUP_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyROLLUP"
    // antlr3/PLSQL3.g:1385:1: keyROLLUP :{...}? ID ;
    public final PLSQL3Parser.keyROLLUP_return keyROLLUP() throws RecognitionException {
        PLSQL3Parser.keyROLLUP_return retval = new PLSQL3Parser.keyROLLUP_return();
        retval.start = input.LT(1);

        int keyROLLUP_StartIndex = input.index();

        Object root_0 = null;

        Token ID1452=null;

        Object ID1452_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 304) ) { return retval; }

            // antlr3/PLSQL3.g:1385:34: ({...}? ID )
            // antlr3/PLSQL3.g:1385:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("ROLLUP"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyROLLUP", "input.LT(1).Text.ToUpper() == \"ROLLUP\"");
            }

            ID1452=(Token)match(input,ID,FOLLOW_ID_in_keyROLLUP9903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1452_tree = 
            (Object)adaptor.create(ID1452)
            ;
            adaptor.addChild(root_0, ID1452_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 304, keyROLLUP_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyROLLUP"


    public static class keyRULES_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRULES"
    // antlr3/PLSQL3.g:1386:1: keyRULES :{...}? ID ;
    public final PLSQL3Parser.keyRULES_return keyRULES() throws RecognitionException {
        PLSQL3Parser.keyRULES_return retval = new PLSQL3Parser.keyRULES_return();
        retval.start = input.LT(1);

        int keyRULES_StartIndex = input.index();

        Object root_0 = null;

        Token ID1453=null;

        Object ID1453_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 305) ) { return retval; }

            // antlr3/PLSQL3.g:1386:34: ({...}? ID )
            // antlr3/PLSQL3.g:1386:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("RULES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRULES", "input.LT(1).Text.ToUpper() == \"RULES\"");
            }

            ID1453=(Token)match(input,ID,FOLLOW_ID_in_keyRULES9936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1453_tree = 
            (Object)adaptor.create(ID1453)
            ;
            adaptor.addChild(root_0, ID1453_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 305, keyRULES_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRULES"


    public static class keySECOND_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySECOND"
    // antlr3/PLSQL3.g:1387:1: keySECOND :{...}? ID ;
    public final PLSQL3Parser.keySECOND_return keySECOND() throws RecognitionException {
        PLSQL3Parser.keySECOND_return retval = new PLSQL3Parser.keySECOND_return();
        retval.start = input.LT(1);

        int keySECOND_StartIndex = input.index();

        Object root_0 = null;

        Token ID1454=null;

        Object ID1454_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 306) ) { return retval; }

            // antlr3/PLSQL3.g:1387:34: ({...}? ID )
            // antlr3/PLSQL3.g:1387:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SECOND"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySECOND", "input.LT(1).Text.ToUpper() == \"SECOND\"");
            }

            ID1454=(Token)match(input,ID,FOLLOW_ID_in_keySECOND9968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1454_tree = 
            (Object)adaptor.create(ID1454)
            ;
            adaptor.addChild(root_0, ID1454_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 306, keySECOND_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySECOND"


    public static class keySECONDS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySECONDS"
    // antlr3/PLSQL3.g:1388:1: keySECONDS :{...}? ID ;
    public final PLSQL3Parser.keySECONDS_return keySECONDS() throws RecognitionException {
        PLSQL3Parser.keySECONDS_return retval = new PLSQL3Parser.keySECONDS_return();
        retval.start = input.LT(1);

        int keySECONDS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1455=null;

        Object ID1455_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 307) ) { return retval; }

            // antlr3/PLSQL3.g:1388:34: ({...}? ID )
            // antlr3/PLSQL3.g:1388:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SECONDS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySECONDS", "input.LT(1).Text.ToUpper() == \"SECONDS\"");
            }

            ID1455=(Token)match(input,ID,FOLLOW_ID_in_keySECONDS9999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1455_tree = 
            (Object)adaptor.create(ID1455)
            ;
            adaptor.addChild(root_0, ID1455_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 307, keySECONDS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySECONDS"


    public static class keySEQUENTIAL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySEQUENTIAL"
    // antlr3/PLSQL3.g:1389:1: keySEQUENTIAL :{...}? ID ;
    public final PLSQL3Parser.keySEQUENTIAL_return keySEQUENTIAL() throws RecognitionException {
        PLSQL3Parser.keySEQUENTIAL_return retval = new PLSQL3Parser.keySEQUENTIAL_return();
        retval.start = input.LT(1);

        int keySEQUENTIAL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1456=null;

        Object ID1456_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 308) ) { return retval; }

            // antlr3/PLSQL3.g:1389:34: ({...}? ID )
            // antlr3/PLSQL3.g:1389:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SEQUENTIAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySEQUENTIAL", "input.LT(1).Text.ToUpper() == \"SEQUENTIAL\"");
            }

            ID1456=(Token)match(input,ID,FOLLOW_ID_in_keySEQUENTIAL10027); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1456_tree = 
            (Object)adaptor.create(ID1456)
            ;
            adaptor.addChild(root_0, ID1456_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 308, keySEQUENTIAL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySEQUENTIAL"


    public static class keySESSIONTIMEZONE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySESSIONTIMEZONE"
    // antlr3/PLSQL3.g:1390:1: keySESSIONTIMEZONE :{...}? ID ;
    public final PLSQL3Parser.keySESSIONTIMEZONE_return keySESSIONTIMEZONE() throws RecognitionException {
        PLSQL3Parser.keySESSIONTIMEZONE_return retval = new PLSQL3Parser.keySESSIONTIMEZONE_return();
        retval.start = input.LT(1);

        int keySESSIONTIMEZONE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1457=null;

        Object ID1457_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 309) ) { return retval; }

            // antlr3/PLSQL3.g:1390:34: ({...}? ID )
            // antlr3/PLSQL3.g:1390:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SESSIONTIMEZONE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySESSIONTIMEZONE", "input.LT(1).Text.ToUpper() == \"SESSIONTIMEZONE\"");
            }

            ID1457=(Token)match(input,ID,FOLLOW_ID_in_keySESSIONTIMEZONE10050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1457_tree = 
            (Object)adaptor.create(ID1457)
            ;
            adaptor.addChild(root_0, ID1457_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 309, keySESSIONTIMEZONE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySESSIONTIMEZONE"


    public static class keySETS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySETS"
    // antlr3/PLSQL3.g:1391:1: keySETS :{...}? ID ;
    public final PLSQL3Parser.keySETS_return keySETS() throws RecognitionException {
        PLSQL3Parser.keySETS_return retval = new PLSQL3Parser.keySETS_return();
        retval.start = input.LT(1);

        int keySETS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1458=null;

        Object ID1458_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 310) ) { return retval; }

            // antlr3/PLSQL3.g:1391:34: ({...}? ID )
            // antlr3/PLSQL3.g:1391:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SETS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySETS", "input.LT(1).Text.ToUpper() == \"SETS\"");
            }

            ID1458=(Token)match(input,ID,FOLLOW_ID_in_keySETS10084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1458_tree = 
            (Object)adaptor.create(ID1458)
            ;
            adaptor.addChild(root_0, ID1458_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 310, keySETS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySETS"


    public static class keySIBLINGS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySIBLINGS"
    // antlr3/PLSQL3.g:1392:1: keySIBLINGS :{...}? ID ;
    public final PLSQL3Parser.keySIBLINGS_return keySIBLINGS() throws RecognitionException {
        PLSQL3Parser.keySIBLINGS_return retval = new PLSQL3Parser.keySIBLINGS_return();
        retval.start = input.LT(1);

        int keySIBLINGS_StartIndex = input.index();

        Object root_0 = null;

        Token ID1459=null;

        Object ID1459_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 311) ) { return retval; }

            // antlr3/PLSQL3.g:1392:34: ({...}? ID )
            // antlr3/PLSQL3.g:1392:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SIBLINGS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySIBLINGS", "input.LT(1).Text.ToUpper() == \"SIBLINGS\"");
            }

            ID1459=(Token)match(input,ID,FOLLOW_ID_in_keySIBLINGS10114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1459_tree = 
            (Object)adaptor.create(ID1459)
            ;
            adaptor.addChild(root_0, ID1459_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 311, keySIBLINGS_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySIBLINGS"


    public static class keySINGLE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySINGLE"
    // antlr3/PLSQL3.g:1393:1: keySINGLE :{...}? ID ;
    public final PLSQL3Parser.keySINGLE_return keySINGLE() throws RecognitionException {
        PLSQL3Parser.keySINGLE_return retval = new PLSQL3Parser.keySINGLE_return();
        retval.start = input.LT(1);

        int keySINGLE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1460=null;

        Object ID1460_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 312) ) { return retval; }

            // antlr3/PLSQL3.g:1393:34: ({...}? ID )
            // antlr3/PLSQL3.g:1393:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SINGLE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySINGLE", "input.LT(1).Text.ToUpper() == \"SINGLE\"");
            }

            ID1460=(Token)match(input,ID,FOLLOW_ID_in_keySINGLE10146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1460_tree = 
            (Object)adaptor.create(ID1460)
            ;
            adaptor.addChild(root_0, ID1460_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 312, keySINGLE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySINGLE"


    public static class keySOME_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySOME"
    // antlr3/PLSQL3.g:1394:1: keySOME :{...}? ID ;
    public final PLSQL3Parser.keySOME_return keySOME() throws RecognitionException {
        PLSQL3Parser.keySOME_return retval = new PLSQL3Parser.keySOME_return();
        retval.start = input.LT(1);

        int keySOME_StartIndex = input.index();

        Object root_0 = null;

        Token ID1461=null;

        Object ID1461_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 313) ) { return retval; }

            // antlr3/PLSQL3.g:1394:34: ({...}? ID )
            // antlr3/PLSQL3.g:1394:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SOME"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySOME", "input.LT(1).Text.ToUpper() == \"SOME\"");
            }

            ID1461=(Token)match(input,ID,FOLLOW_ID_in_keySOME10180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1461_tree = 
            (Object)adaptor.create(ID1461)
            ;
            adaptor.addChild(root_0, ID1461_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 313, keySOME_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySOME"


    public static class keySUBMULTISET_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySUBMULTISET"
    // antlr3/PLSQL3.g:1395:1: keySUBMULTISET :{...}? ID ;
    public final PLSQL3Parser.keySUBMULTISET_return keySUBMULTISET() throws RecognitionException {
        PLSQL3Parser.keySUBMULTISET_return retval = new PLSQL3Parser.keySUBMULTISET_return();
        retval.start = input.LT(1);

        int keySUBMULTISET_StartIndex = input.index();

        Object root_0 = null;

        Token ID1462=null;

        Object ID1462_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 314) ) { return retval; }

            // antlr3/PLSQL3.g:1395:34: ({...}? ID )
            // antlr3/PLSQL3.g:1395:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SUBMULTISET"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySUBMULTISET", "input.LT(1).Text.ToUpper() == \"SUBMULTISET\"");
            }

            ID1462=(Token)match(input,ID,FOLLOW_ID_in_keySUBMULTISET10207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1462_tree = 
            (Object)adaptor.create(ID1462)
            ;
            adaptor.addChild(root_0, ID1462_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 314, keySUBMULTISET_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySUBMULTISET"


    public static class keyTIME_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTIME"
    // antlr3/PLSQL3.g:1396:1: keyTIME :{...}? ID ;
    public final PLSQL3Parser.keyTIME_return keyTIME() throws RecognitionException {
        PLSQL3Parser.keyTIME_return retval = new PLSQL3Parser.keyTIME_return();
        retval.start = input.LT(1);

        int keyTIME_StartIndex = input.index();

        Object root_0 = null;

        Token ID1463=null;

        Object ID1463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 315) ) { return retval; }

            // antlr3/PLSQL3.g:1396:34: ({...}? ID )
            // antlr3/PLSQL3.g:1396:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("TIME"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTIME", "input.LT(1).Text.ToUpper() == \"TIME\"");
            }

            ID1463=(Token)match(input,ID,FOLLOW_ID_in_keyTIME10241); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1463_tree = 
            (Object)adaptor.create(ID1463)
            ;
            adaptor.addChild(root_0, ID1463_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 315, keyTIME_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTIME"


    public static class keyTIMESTAMP_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTIMESTAMP"
    // antlr3/PLSQL3.g:1397:1: keyTIMESTAMP :{...}? ID ;
    public final PLSQL3Parser.keyTIMESTAMP_return keyTIMESTAMP() throws RecognitionException {
        PLSQL3Parser.keyTIMESTAMP_return retval = new PLSQL3Parser.keyTIMESTAMP_return();
        retval.start = input.LT(1);

        int keyTIMESTAMP_StartIndex = input.index();

        Object root_0 = null;

        Token ID1464=null;

        Object ID1464_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 316) ) { return retval; }

            // antlr3/PLSQL3.g:1397:34: ({...}? ID )
            // antlr3/PLSQL3.g:1397:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("TIMESTAMP"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTIMESTAMP", "input.LT(1).Text.ToUpper() == \"TIMESTAMP\"");
            }

            ID1464=(Token)match(input,ID,FOLLOW_ID_in_keyTIMESTAMP10270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1464_tree = 
            (Object)adaptor.create(ID1464)
            ;
            adaptor.addChild(root_0, ID1464_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 316, keyTIMESTAMP_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTIMESTAMP"


    public static class keyTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTHE"
    // antlr3/PLSQL3.g:1398:1: keyTHE :{...}? ID ;
    public final PLSQL3Parser.keyTHE_return keyTHE() throws RecognitionException {
        PLSQL3Parser.keyTHE_return retval = new PLSQL3Parser.keyTHE_return();
        retval.start = input.LT(1);

        int keyTHE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1465=null;

        Object ID1465_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 317) ) { return retval; }

            // antlr3/PLSQL3.g:1398:34: ({...}? ID )
            // antlr3/PLSQL3.g:1398:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("THE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTHE", "input.LT(1).Text.ToUpper() == \"THE\"");
            }

            ID1465=(Token)match(input,ID,FOLLOW_ID_in_keyTHE10305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1465_tree = 
            (Object)adaptor.create(ID1465)
            ;
            adaptor.addChild(root_0, ID1465_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 317, keyTHE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTHE"


    public static class keyUNDER_PATH_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUNDER_PATH"
    // antlr3/PLSQL3.g:1399:1: keyUNDER_PATH :{...}? ID ;
    public final PLSQL3Parser.keyUNDER_PATH_return keyUNDER_PATH() throws RecognitionException {
        PLSQL3Parser.keyUNDER_PATH_return retval = new PLSQL3Parser.keyUNDER_PATH_return();
        retval.start = input.LT(1);

        int keyUNDER_PATH_StartIndex = input.index();

        Object root_0 = null;

        Token ID1466=null;

        Object ID1466_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 318) ) { return retval; }

            // antlr3/PLSQL3.g:1399:34: ({...}? ID )
            // antlr3/PLSQL3.g:1399:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("UNDER_PATH"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUNDER_PATH", "input.LT(1).Text.ToUpper() == \"UNDER_PATH\"");
            }

            ID1466=(Token)match(input,ID,FOLLOW_ID_in_keyUNDER_PATH10333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1466_tree = 
            (Object)adaptor.create(ID1466)
            ;
            adaptor.addChild(root_0, ID1466_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 318, keyUNDER_PATH_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUNDER_PATH"


    public static class keyUNTIL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUNTIL"
    // antlr3/PLSQL3.g:1400:1: keyUNTIL :{...}? ID ;
    public final PLSQL3Parser.keyUNTIL_return keyUNTIL() throws RecognitionException {
        PLSQL3Parser.keyUNTIL_return retval = new PLSQL3Parser.keyUNTIL_return();
        retval.start = input.LT(1);

        int keyUNTIL_StartIndex = input.index();

        Object root_0 = null;

        Token ID1467=null;

        Object ID1467_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 319) ) { return retval; }

            // antlr3/PLSQL3.g:1400:34: ({...}? ID )
            // antlr3/PLSQL3.g:1400:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("UNTIL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUNTIL", "input.LT(1).Text.ToUpper() == \"UNTIL\"");
            }

            ID1467=(Token)match(input,ID,FOLLOW_ID_in_keyUNTIL10366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1467_tree = 
            (Object)adaptor.create(ID1467)
            ;
            adaptor.addChild(root_0, ID1467_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 319, keyUNTIL_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUNTIL"


    public static class keyUPDATED_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUPDATED"
    // antlr3/PLSQL3.g:1401:1: keyUPDATED :{...}? ID ;
    public final PLSQL3Parser.keyUPDATED_return keyUPDATED() throws RecognitionException {
        PLSQL3Parser.keyUPDATED_return retval = new PLSQL3Parser.keyUPDATED_return();
        retval.start = input.LT(1);

        int keyUPDATED_StartIndex = input.index();

        Object root_0 = null;

        Token ID1468=null;

        Object ID1468_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 320) ) { return retval; }

            // antlr3/PLSQL3.g:1401:34: ({...}? ID )
            // antlr3/PLSQL3.g:1401:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("UPDATED"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUPDATED", "input.LT(1).Text.ToUpper() == \"UPDATED\"");
            }

            ID1468=(Token)match(input,ID,FOLLOW_ID_in_keyUPDATED10397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1468_tree = 
            (Object)adaptor.create(ID1468)
            ;
            adaptor.addChild(root_0, ID1468_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 320, keyUPDATED_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUPDATED"


    public static class keyUPSERT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUPSERT"
    // antlr3/PLSQL3.g:1402:1: keyUPSERT :{...}? ID ;
    public final PLSQL3Parser.keyUPSERT_return keyUPSERT() throws RecognitionException {
        PLSQL3Parser.keyUPSERT_return retval = new PLSQL3Parser.keyUPSERT_return();
        retval.start = input.LT(1);

        int keyUPSERT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1469=null;

        Object ID1469_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 321) ) { return retval; }

            // antlr3/PLSQL3.g:1402:34: ({...}? ID )
            // antlr3/PLSQL3.g:1402:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("UPSERT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUPSERT", "input.LT(1).Text.ToUpper() == \"UPSERT\"");
            }

            ID1469=(Token)match(input,ID,FOLLOW_ID_in_keyUPSERT10429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1469_tree = 
            (Object)adaptor.create(ID1469)
            ;
            adaptor.addChild(root_0, ID1469_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 321, keyUPSERT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUPSERT"


    public static class keyWAIT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyWAIT"
    // antlr3/PLSQL3.g:1403:1: keyWAIT :{...}? ID ;
    public final PLSQL3Parser.keyWAIT_return keyWAIT() throws RecognitionException {
        PLSQL3Parser.keyWAIT_return retval = new PLSQL3Parser.keyWAIT_return();
        retval.start = input.LT(1);

        int keyWAIT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1470=null;

        Object ID1470_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 322) ) { return retval; }

            // antlr3/PLSQL3.g:1403:34: ({...}? ID )
            // antlr3/PLSQL3.g:1403:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("WAIT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyWAIT", "input.LT(1).Text.ToUpper() == \"WAIT\"");
            }

            ID1470=(Token)match(input,ID,FOLLOW_ID_in_keyWAIT10463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1470_tree = 
            (Object)adaptor.create(ID1470)
            ;
            adaptor.addChild(root_0, ID1470_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 322, keyWAIT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyWAIT"


    public static class keyYEAR_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyYEAR"
    // antlr3/PLSQL3.g:1404:1: keyYEAR :{...}? ID ;
    public final PLSQL3Parser.keyYEAR_return keyYEAR() throws RecognitionException {
        PLSQL3Parser.keyYEAR_return retval = new PLSQL3Parser.keyYEAR_return();
        retval.start = input.LT(1);

        int keyYEAR_StartIndex = input.index();

        Object root_0 = null;

        Token ID1471=null;

        Object ID1471_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 323) ) { return retval; }

            // antlr3/PLSQL3.g:1404:34: ({...}? ID )
            // antlr3/PLSQL3.g:1404:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("YEAR"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyYEAR", "input.LT(1).Text.ToUpper() == \"YEAR\"");
            }

            ID1471=(Token)match(input,ID,FOLLOW_ID_in_keyYEAR10497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1471_tree = 
            (Object)adaptor.create(ID1471)
            ;
            adaptor.addChild(root_0, ID1471_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 323, keyYEAR_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyYEAR"


    public static class keyZONE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyZONE"
    // antlr3/PLSQL3.g:1405:1: keyZONE :{...}? ID ;
    public final PLSQL3Parser.keyZONE_return keyZONE() throws RecognitionException {
        PLSQL3Parser.keyZONE_return retval = new PLSQL3Parser.keyZONE_return();
        retval.start = input.LT(1);

        int keyZONE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1472=null;

        Object ID1472_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 324) ) { return retval; }

            // antlr3/PLSQL3.g:1405:34: ({...}? ID )
            // antlr3/PLSQL3.g:1405:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("ZONE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyZONE", "input.LT(1).Text.ToUpper() == \"ZONE\"");
            }

            ID1472=(Token)match(input,ID,FOLLOW_ID_in_keyZONE10531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1472_tree = 
            (Object)adaptor.create(ID1472)
            ;
            adaptor.addChild(root_0, ID1472_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 324, keyZONE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyZONE"


    public static class keyARRAY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyARRAY"
    // antlr3/PLSQL3.g:1407:1: keyARRAY :{...}? ID ;
    public final PLSQL3Parser.keyARRAY_return keyARRAY() throws RecognitionException {
        PLSQL3Parser.keyARRAY_return retval = new PLSQL3Parser.keyARRAY_return();
        retval.start = input.LT(1);

        int keyARRAY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1473=null;

        Object ID1473_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 325) ) { return retval; }

            // antlr3/PLSQL3.g:1407:34: ({...}? ID )
            // antlr3/PLSQL3.g:1407:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("ARRAY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyARRAY", "input.LT(1).Text.ToUpper() == \"ARRAY\"");
            }

            ID1473=(Token)match(input,ID,FOLLOW_ID_in_keyARRAY10565); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1473_tree = 
            (Object)adaptor.create(ID1473)
            ;
            adaptor.addChild(root_0, ID1473_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 325, keyARRAY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyARRAY"


    public static class keyAUTONOMOUS_TRANSACTION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyAUTONOMOUS_TRANSACTION"
    // antlr3/PLSQL3.g:1408:1: keyAUTONOMOUS_TRANSACTION :{...}? ID ;
    public final PLSQL3Parser.keyAUTONOMOUS_TRANSACTION_return keyAUTONOMOUS_TRANSACTION() throws RecognitionException {
        PLSQL3Parser.keyAUTONOMOUS_TRANSACTION_return retval = new PLSQL3Parser.keyAUTONOMOUS_TRANSACTION_return();
        retval.start = input.LT(1);

        int keyAUTONOMOUS_TRANSACTION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1474=null;

        Object ID1474_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 326) ) { return retval; }

            // antlr3/PLSQL3.g:1408:34: ({...}? ID )
            // antlr3/PLSQL3.g:1408:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("AUTONOMOUS_TRANSACTION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyAUTONOMOUS_TRANSACTION", "input.LT(1).Text.ToUpper() == \"AUTONOMOUS_TRANSACTION\"");
            }

            ID1474=(Token)match(input,ID,FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION10581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1474_tree = 
            (Object)adaptor.create(ID1474)
            ;
            adaptor.addChild(root_0, ID1474_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 326, keyAUTONOMOUS_TRANSACTION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyAUTONOMOUS_TRANSACTION"


    public static class keyBODY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyBODY"
    // antlr3/PLSQL3.g:1409:1: keyBODY :{...}? ID ;
    public final PLSQL3Parser.keyBODY_return keyBODY() throws RecognitionException {
        PLSQL3Parser.keyBODY_return retval = new PLSQL3Parser.keyBODY_return();
        retval.start = input.LT(1);

        int keyBODY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1475=null;

        Object ID1475_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 327) ) { return retval; }

            // antlr3/PLSQL3.g:1409:34: ({...}? ID )
            // antlr3/PLSQL3.g:1409:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("BODY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBODY", "input.LT(1).Text.ToUpper() == \"BODY\"");
            }

            ID1475=(Token)match(input,ID,FOLLOW_ID_in_keyBODY10615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1475_tree = 
            (Object)adaptor.create(ID1475)
            ;
            adaptor.addChild(root_0, ID1475_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 327, keyBODY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyBODY"


    public static class keyBUILTIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyBUILTIN"
    // antlr3/PLSQL3.g:1410:1: keyBUILTIN :{...}? ID ;
    public final PLSQL3Parser.keyBUILTIN_return keyBUILTIN() throws RecognitionException {
        PLSQL3Parser.keyBUILTIN_return retval = new PLSQL3Parser.keyBUILTIN_return();
        retval.start = input.LT(1);

        int keyBUILTIN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1476=null;

        Object ID1476_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 328) ) { return retval; }

            // antlr3/PLSQL3.g:1410:34: ({...}? ID )
            // antlr3/PLSQL3.g:1410:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("BUILTIN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBUILTIN", "input.LT(1).Text.ToUpper() == \"BUILTIN\"");
            }

            ID1476=(Token)match(input,ID,FOLLOW_ID_in_keyBUILTIN10646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1476_tree = 
            (Object)adaptor.create(ID1476)
            ;
            adaptor.addChild(root_0, ID1476_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 328, keyBUILTIN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyBUILTIN"


    public static class keyBULK_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyBULK"
    // antlr3/PLSQL3.g:1411:1: keyBULK :{...}? ID ;
    public final PLSQL3Parser.keyBULK_return keyBULK() throws RecognitionException {
        PLSQL3Parser.keyBULK_return retval = new PLSQL3Parser.keyBULK_return();
        retval.start = input.LT(1);

        int keyBULK_StartIndex = input.index();

        Object root_0 = null;

        Token ID1477=null;

        Object ID1477_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 329) ) { return retval; }

            // antlr3/PLSQL3.g:1411:34: ({...}? ID )
            // antlr3/PLSQL3.g:1411:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("BULK"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBULK", "input.LT(1).Text.ToUpper() == \"BULK\"");
            }

            ID1477=(Token)match(input,ID,FOLLOW_ID_in_keyBULK10680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1477_tree = 
            (Object)adaptor.create(ID1477)
            ;
            adaptor.addChild(root_0, ID1477_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 329, keyBULK_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyBULK"


    public static class keyBYTE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyBYTE"
    // antlr3/PLSQL3.g:1412:1: keyBYTE :{...}? ID ;
    public final PLSQL3Parser.keyBYTE_return keyBYTE() throws RecognitionException {
        PLSQL3Parser.keyBYTE_return retval = new PLSQL3Parser.keyBYTE_return();
        retval.start = input.LT(1);

        int keyBYTE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1478=null;

        Object ID1478_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 330) ) { return retval; }

            // antlr3/PLSQL3.g:1412:34: ({...}? ID )
            // antlr3/PLSQL3.g:1412:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("BYTE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBYTE", "input.LT(1).Text.ToUpper() == \"BYTE\"");
            }

            ID1478=(Token)match(input,ID,FOLLOW_ID_in_keyBYTE10714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1478_tree = 
            (Object)adaptor.create(ID1478)
            ;
            adaptor.addChild(root_0, ID1478_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 330, keyBYTE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyBYTE"


    public static class keyCLOSE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCLOSE"
    // antlr3/PLSQL3.g:1413:1: keyCLOSE :{...}? ID ;
    public final PLSQL3Parser.keyCLOSE_return keyCLOSE() throws RecognitionException {
        PLSQL3Parser.keyCLOSE_return retval = new PLSQL3Parser.keyCLOSE_return();
        retval.start = input.LT(1);

        int keyCLOSE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1479=null;

        Object ID1479_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 331) ) { return retval; }

            // antlr3/PLSQL3.g:1413:34: ({...}? ID )
            // antlr3/PLSQL3.g:1413:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("CLOSE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCLOSE", "input.LT(1).Text.ToUpper() == \"CLOSE\"");
            }

            ID1479=(Token)match(input,ID,FOLLOW_ID_in_keyCLOSE10747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1479_tree = 
            (Object)adaptor.create(ID1479)
            ;
            adaptor.addChild(root_0, ID1479_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 331, keyCLOSE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCLOSE"


    public static class keyCOLLECT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCOLLECT"
    // antlr3/PLSQL3.g:1414:1: keyCOLLECT :{...}? ID ;
    public final PLSQL3Parser.keyCOLLECT_return keyCOLLECT() throws RecognitionException {
        PLSQL3Parser.keyCOLLECT_return retval = new PLSQL3Parser.keyCOLLECT_return();
        retval.start = input.LT(1);

        int keyCOLLECT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1480=null;

        Object ID1480_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 332) ) { return retval; }

            // antlr3/PLSQL3.g:1414:34: ({...}? ID )
            // antlr3/PLSQL3.g:1414:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("COLLECT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCOLLECT", "input.LT(1).Text.ToUpper() == \"COLLECT\"");
            }

            ID1480=(Token)match(input,ID,FOLLOW_ID_in_keyCOLLECT10778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1480_tree = 
            (Object)adaptor.create(ID1480)
            ;
            adaptor.addChild(root_0, ID1480_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 332, keyCOLLECT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCOLLECT"


    public static class keyCURSOR_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyCURSOR"
    // antlr3/PLSQL3.g:1415:1: keyCURSOR :{...}? ID ;
    public final PLSQL3Parser.keyCURSOR_return keyCURSOR() throws RecognitionException {
        PLSQL3Parser.keyCURSOR_return retval = new PLSQL3Parser.keyCURSOR_return();
        retval.start = input.LT(1);

        int keyCURSOR_StartIndex = input.index();

        Object root_0 = null;

        Token ID1481=null;

        Object ID1481_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 333) ) { return retval; }

            // antlr3/PLSQL3.g:1415:34: ({...}? ID )
            // antlr3/PLSQL3.g:1415:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("CURSOR"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCURSOR", "input.LT(1).Text.ToUpper() == \"CURSOR\"");
            }

            ID1481=(Token)match(input,ID,FOLLOW_ID_in_keyCURSOR10810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1481_tree = 
            (Object)adaptor.create(ID1481)
            ;
            adaptor.addChild(root_0, ID1481_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 333, keyCURSOR_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyCURSOR"


    public static class keyELSIF_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyELSIF"
    // antlr3/PLSQL3.g:1416:1: keyELSIF : 'ELSIF' ;
    public final PLSQL3Parser.keyELSIF_return keyELSIF() throws RecognitionException {
        PLSQL3Parser.keyELSIF_return retval = new PLSQL3Parser.keyELSIF_return();
        retval.start = input.LT(1);

        int keyELSIF_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1482=null;

        Object string_literal1482_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 334) ) { return retval; }

            // antlr3/PLSQL3.g:1416:34: ( 'ELSIF' )
            // antlr3/PLSQL3.g:1416:36: 'ELSIF'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1482=(Token)match(input,84,FOLLOW_84_in_keyELSIF10841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1482_tree = 
            (Object)adaptor.create(string_literal1482)
            ;
            adaptor.addChild(root_0, string_literal1482_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 334, keyELSIF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyELSIF"


    public static class keyEXCEPTION_INIT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyEXCEPTION_INIT"
    // antlr3/PLSQL3.g:1417:1: keyEXCEPTION_INIT :{...}? ID ;
    public final PLSQL3Parser.keyEXCEPTION_INIT_return keyEXCEPTION_INIT() throws RecognitionException {
        PLSQL3Parser.keyEXCEPTION_INIT_return retval = new PLSQL3Parser.keyEXCEPTION_INIT_return();
        retval.start = input.LT(1);

        int keyEXCEPTION_INIT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1483=null;

        Object ID1483_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 335) ) { return retval; }

            // antlr3/PLSQL3.g:1417:34: ({...}? ID )
            // antlr3/PLSQL3.g:1417:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("EXCEPTION_INIT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEXCEPTION_INIT", "input.LT(1).Text.ToUpper() == \"EXCEPTION_INIT\"");
            }

            ID1483=(Token)match(input,ID,FOLLOW_ID_in_keyEXCEPTION_INIT10866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1483_tree = 
            (Object)adaptor.create(ID1483)
            ;
            adaptor.addChild(root_0, ID1483_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 335, keyEXCEPTION_INIT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyEXCEPTION_INIT"


    public static class keyEXIT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyEXIT"
    // antlr3/PLSQL3.g:1418:1: keyEXIT :{...}? ID ;
    public final PLSQL3Parser.keyEXIT_return keyEXIT() throws RecognitionException {
        PLSQL3Parser.keyEXIT_return retval = new PLSQL3Parser.keyEXIT_return();
        retval.start = input.LT(1);

        int keyEXIT_StartIndex = input.index();

        Object root_0 = null;

        Token ID1484=null;

        Object ID1484_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 336) ) { return retval; }

            // antlr3/PLSQL3.g:1418:34: ({...}? ID )
            // antlr3/PLSQL3.g:1418:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("EXIT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEXIT", "input.LT(1).Text.ToUpper() == \"EXIT\"");
            }

            ID1484=(Token)match(input,ID,FOLLOW_ID_in_keyEXIT10900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1484_tree = 
            (Object)adaptor.create(ID1484)
            ;
            adaptor.addChild(root_0, ID1484_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 336, keyEXIT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyEXIT"


    public static class keyFIPSFLAG_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyFIPSFLAG"
    // antlr3/PLSQL3.g:1419:1: keyFIPSFLAG :{...}? ID ;
    public final PLSQL3Parser.keyFIPSFLAG_return keyFIPSFLAG() throws RecognitionException {
        PLSQL3Parser.keyFIPSFLAG_return retval = new PLSQL3Parser.keyFIPSFLAG_return();
        retval.start = input.LT(1);

        int keyFIPSFLAG_StartIndex = input.index();

        Object root_0 = null;

        Token ID1485=null;

        Object ID1485_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 337) ) { return retval; }

            // antlr3/PLSQL3.g:1419:34: ({...}? ID )
            // antlr3/PLSQL3.g:1419:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("FIPSFLAG"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFIPSFLAG", "input.LT(1).Text.ToUpper() == \"FIPSFLAG\"");
            }

            ID1485=(Token)match(input,ID,FOLLOW_ID_in_keyFIPSFLAG10930); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1485_tree = 
            (Object)adaptor.create(ID1485)
            ;
            adaptor.addChild(root_0, ID1485_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 337, keyFIPSFLAG_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyFIPSFLAG"


    public static class keyFUNCTION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyFUNCTION"
    // antlr3/PLSQL3.g:1420:1: keyFUNCTION : 'FUNCTION' ;
    public final PLSQL3Parser.keyFUNCTION_return keyFUNCTION() throws RecognitionException {
        PLSQL3Parser.keyFUNCTION_return retval = new PLSQL3Parser.keyFUNCTION_return();
        retval.start = input.LT(1);

        int keyFUNCTION_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1486=null;

        Object string_literal1486_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 338) ) { return retval; }

            // antlr3/PLSQL3.g:1420:34: ( 'FUNCTION' )
            // antlr3/PLSQL3.g:1420:36: 'FUNCTION'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1486=(Token)match(input,94,FOLLOW_94_in_keyFUNCTION10958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1486_tree = 
            (Object)adaptor.create(string_literal1486)
            ;
            adaptor.addChild(root_0, string_literal1486_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 338, keyFUNCTION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyFUNCTION"


    public static class keyINTERFACE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyINTERFACE"
    // antlr3/PLSQL3.g:1421:1: keyINTERFACE :{...}? ID ;
    public final PLSQL3Parser.keyINTERFACE_return keyINTERFACE() throws RecognitionException {
        PLSQL3Parser.keyINTERFACE_return retval = new PLSQL3Parser.keyINTERFACE_return();
        retval.start = input.LT(1);

        int keyINTERFACE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1487=null;

        Object ID1487_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 339) ) { return retval; }

            // antlr3/PLSQL3.g:1421:34: ({...}? ID )
            // antlr3/PLSQL3.g:1421:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("INTERFACE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINTERFACE", "input.LT(1).Text.ToUpper() == \"INTERFACE\"");
            }

            ID1487=(Token)match(input,ID,FOLLOW_ID_in_keyINTERFACE10988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1487_tree = 
            (Object)adaptor.create(ID1487)
            ;
            adaptor.addChild(root_0, ID1487_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 339, keyINTERFACE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyINTERFACE"


    public static class keyLOOP_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyLOOP"
    // antlr3/PLSQL3.g:1422:1: keyLOOP : 'LOOP' ;
    public final PLSQL3Parser.keyLOOP_return keyLOOP() throws RecognitionException {
        PLSQL3Parser.keyLOOP_return retval = new PLSQL3Parser.keyLOOP_return();
        retval.start = input.LT(1);

        int keyLOOP_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1488=null;

        Object string_literal1488_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 340) ) { return retval; }

            // antlr3/PLSQL3.g:1422:34: ( 'LOOP' )
            // antlr3/PLSQL3.g:1422:36: 'LOOP'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1488=(Token)match(input,110,FOLLOW_110_in_keyLOOP11020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1488_tree = 
            (Object)adaptor.create(string_literal1488)
            ;
            adaptor.addChild(root_0, string_literal1488_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 340, keyLOOP_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyLOOP"


    public static class keyNEW_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNEW"
    // antlr3/PLSQL3.g:1423:1: keyNEW :{...}? ID ;
    public final PLSQL3Parser.keyNEW_return keyNEW() throws RecognitionException {
        PLSQL3Parser.keyNEW_return retval = new PLSQL3Parser.keyNEW_return();
        retval.start = input.LT(1);

        int keyNEW_StartIndex = input.index();

        Object root_0 = null;

        Token ID1489=null;

        Object ID1489_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 341) ) { return retval; }

            // antlr3/PLSQL3.g:1423:34: ({...}? ID )
            // antlr3/PLSQL3.g:1423:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("NEW"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNEW", "input.LT(1).Text.ToUpper() == \"NEW\"");
            }

            ID1489=(Token)match(input,ID,FOLLOW_ID_in_keyNEW11056); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1489_tree = 
            (Object)adaptor.create(ID1489)
            ;
            adaptor.addChild(root_0, ID1489_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 341, keyNEW_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNEW"


    public static class keyNEW_NAMES_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyNEW_NAMES"
    // antlr3/PLSQL3.g:1424:1: keyNEW_NAMES :{...}? ID ;
    public final PLSQL3Parser.keyNEW_NAMES_return keyNEW_NAMES() throws RecognitionException {
        PLSQL3Parser.keyNEW_NAMES_return retval = new PLSQL3Parser.keyNEW_NAMES_return();
        retval.start = input.LT(1);

        int keyNEW_NAMES_StartIndex = input.index();

        Object root_0 = null;

        Token ID1490=null;

        Object ID1490_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 342) ) { return retval; }

            // antlr3/PLSQL3.g:1424:34: ({...}? ID )
            // antlr3/PLSQL3.g:1424:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("NEW_NAMES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNEW_NAMES", "input.LT(1).Text.ToUpper() == \"NEW_NAMES\"");
            }

            ID1490=(Token)match(input,ID,FOLLOW_ID_in_keyNEW_NAMES11085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1490_tree = 
            (Object)adaptor.create(ID1490)
            ;
            adaptor.addChild(root_0, ID1490_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 342, keyNEW_NAMES_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyNEW_NAMES"


    public static class keyOPEN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyOPEN"
    // antlr3/PLSQL3.g:1425:1: keyOPEN :{...}? ID ;
    public final PLSQL3Parser.keyOPEN_return keyOPEN() throws RecognitionException {
        PLSQL3Parser.keyOPEN_return retval = new PLSQL3Parser.keyOPEN_return();
        retval.start = input.LT(1);

        int keyOPEN_StartIndex = input.index();

        Object root_0 = null;

        Token ID1491=null;

        Object ID1491_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 343) ) { return retval; }

            // antlr3/PLSQL3.g:1425:34: ({...}? ID )
            // antlr3/PLSQL3.g:1425:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("OPEN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyOPEN", "input.LT(1).Text.ToUpper() == \"OPEN\"");
            }

            ID1491=(Token)match(input,ID,FOLLOW_ID_in_keyOPEN11119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1491_tree = 
            (Object)adaptor.create(ID1491)
            ;
            adaptor.addChild(root_0, ID1491_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 343, keyOPEN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyOPEN"


    public static class keyOUT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyOUT"
    // antlr3/PLSQL3.g:1426:1: keyOUT : 'OUT' ;
    public final PLSQL3Parser.keyOUT_return keyOUT() throws RecognitionException {
        PLSQL3Parser.keyOUT_return retval = new PLSQL3Parser.keyOUT_return();
        retval.start = input.LT(1);

        int keyOUT_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1492=null;

        Object string_literal1492_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 344) ) { return retval; }

            // antlr3/PLSQL3.g:1426:34: ( 'OUT' )
            // antlr3/PLSQL3.g:1426:36: 'OUT'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1492=(Token)match(input,129,FOLLOW_129_in_keyOUT11152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1492_tree = 
            (Object)adaptor.create(string_literal1492)
            ;
            adaptor.addChild(root_0, string_literal1492_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 344, keyOUT_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyOUT"


    public static class keyPACKAGE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPACKAGE"
    // antlr3/PLSQL3.g:1427:1: keyPACKAGE : 'PACKAGE' ;
    public final PLSQL3Parser.keyPACKAGE_return keyPACKAGE() throws RecognitionException {
        PLSQL3Parser.keyPACKAGE_return retval = new PLSQL3Parser.keyPACKAGE_return();
        retval.start = input.LT(1);

        int keyPACKAGE_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1493=null;

        Object string_literal1493_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 345) ) { return retval; }

            // antlr3/PLSQL3.g:1427:34: ( 'PACKAGE' )
            // antlr3/PLSQL3.g:1427:36: 'PACKAGE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1493=(Token)match(input,130,FOLLOW_130_in_keyPACKAGE11182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1493_tree = 
            (Object)adaptor.create(string_literal1493)
            ;
            adaptor.addChild(root_0, string_literal1493_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 345, keyPACKAGE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPACKAGE"


    public static class keyPRAGMA_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyPRAGMA"
    // antlr3/PLSQL3.g:1428:1: keyPRAGMA : 'PRAGMA' ;
    public final PLSQL3Parser.keyPRAGMA_return keyPRAGMA() throws RecognitionException {
        PLSQL3Parser.keyPRAGMA_return retval = new PLSQL3Parser.keyPRAGMA_return();
        retval.start = input.LT(1);

        int keyPRAGMA_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1494=null;

        Object string_literal1494_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 346) ) { return retval; }

            // antlr3/PLSQL3.g:1428:34: ( 'PRAGMA' )
            // antlr3/PLSQL3.g:1428:36: 'PRAGMA'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1494=(Token)match(input,133,FOLLOW_133_in_keyPRAGMA11213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1494_tree = 
            (Object)adaptor.create(string_literal1494)
            ;
            adaptor.addChild(root_0, string_literal1494_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 346, keyPRAGMA_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyPRAGMA"


    public static class keyRAISE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRAISE"
    // antlr3/PLSQL3.g:1429:1: keyRAISE : 'RAISE' ;
    public final PLSQL3Parser.keyRAISE_return keyRAISE() throws RecognitionException {
        PLSQL3Parser.keyRAISE_return retval = new PLSQL3Parser.keyRAISE_return();
        retval.start = input.LT(1);

        int keyRAISE_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1495=null;

        Object string_literal1495_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 347) ) { return retval; }

            // antlr3/PLSQL3.g:1429:34: ( 'RAISE' )
            // antlr3/PLSQL3.g:1429:36: 'RAISE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1495=(Token)match(input,136,FOLLOW_136_in_keyRAISE11245); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1495_tree = 
            (Object)adaptor.create(string_literal1495)
            ;
            adaptor.addChild(root_0, string_literal1495_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 347, keyRAISE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRAISE"


    public static class keyRANGE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRANGE"
    // antlr3/PLSQL3.g:1430:1: keyRANGE :{...}? ID ;
    public final PLSQL3Parser.keyRANGE_return keyRANGE() throws RecognitionException {
        PLSQL3Parser.keyRANGE_return retval = new PLSQL3Parser.keyRANGE_return();
        retval.start = input.LT(1);

        int keyRANGE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1496=null;

        Object ID1496_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 348) ) { return retval; }

            // antlr3/PLSQL3.g:1430:34: ({...}? ID )
            // antlr3/PLSQL3.g:1430:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("RANGE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRANGE", "input.LT(1).Text.ToUpper() == \"RANGE\"");
            }

            ID1496=(Token)match(input,ID,FOLLOW_ID_in_keyRANGE11279); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1496_tree = 
            (Object)adaptor.create(ID1496)
            ;
            adaptor.addChild(root_0, ID1496_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 348, keyRANGE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRANGE"


    public static class keyREAD_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREAD"
    // antlr3/PLSQL3.g:1431:1: keyREAD :{...}? ID ;
    public final PLSQL3Parser.keyREAD_return keyREAD() throws RecognitionException {
        PLSQL3Parser.keyREAD_return retval = new PLSQL3Parser.keyREAD_return();
        retval.start = input.LT(1);

        int keyREAD_StartIndex = input.index();

        Object root_0 = null;

        Token ID1497=null;

        Object ID1497_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 349) ) { return retval; }

            // antlr3/PLSQL3.g:1431:34: ({...}? ID )
            // antlr3/PLSQL3.g:1431:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("READ"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREAD", "input.LT(1).Text.ToUpper() == \"READ\"");
            }

            ID1497=(Token)match(input,ID,FOLLOW_ID_in_keyREAD11313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1497_tree = 
            (Object)adaptor.create(ID1497)
            ;
            adaptor.addChild(root_0, ID1497_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 349, keyREAD_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREAD"


    public static class keyRECORD_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRECORD"
    // antlr3/PLSQL3.g:1432:1: keyRECORD : 'RECORD' ;
    public final PLSQL3Parser.keyRECORD_return keyRECORD() throws RecognitionException {
        PLSQL3Parser.keyRECORD_return retval = new PLSQL3Parser.keyRECORD_return();
        retval.start = input.LT(1);

        int keyRECORD_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1498=null;

        Object string_literal1498_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 350) ) { return retval; }

            // antlr3/PLSQL3.g:1432:34: ( 'RECORD' )
            // antlr3/PLSQL3.g:1432:36: 'RECORD'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1498=(Token)match(input,139,FOLLOW_139_in_keyRECORD11343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1498_tree = 
            (Object)adaptor.create(string_literal1498)
            ;
            adaptor.addChild(root_0, string_literal1498_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 350, keyRECORD_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRECORD"


    public static class keyREF_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREF"
    // antlr3/PLSQL3.g:1433:1: keyREF :{...}? ID ;
    public final PLSQL3Parser.keyREF_return keyREF() throws RecognitionException {
        PLSQL3Parser.keyREF_return retval = new PLSQL3Parser.keyREF_return();
        retval.start = input.LT(1);

        int keyREF_StartIndex = input.index();

        Object root_0 = null;

        Token ID1499=null;

        Object ID1499_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 351) ) { return retval; }

            // antlr3/PLSQL3.g:1433:34: ({...}? ID )
            // antlr3/PLSQL3.g:1433:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("REF"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREF", "input.LT(1).Text.ToUpper() == \"REF\"");
            }

            ID1499=(Token)match(input,ID,FOLLOW_ID_in_keyREF11379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1499_tree = 
            (Object)adaptor.create(ID1499)
            ;
            adaptor.addChild(root_0, ID1499_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 351, keyREF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREF"


    public static class keyREPLACE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREPLACE"
    // antlr3/PLSQL3.g:1434:1: keyREPLACE :{...}? ID ;
    public final PLSQL3Parser.keyREPLACE_return keyREPLACE() throws RecognitionException {
        PLSQL3Parser.keyREPLACE_return retval = new PLSQL3Parser.keyREPLACE_return();
        retval.start = input.LT(1);

        int keyREPLACE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1500=null;

        Object ID1500_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 352) ) { return retval; }

            // antlr3/PLSQL3.g:1434:34: ({...}? ID )
            // antlr3/PLSQL3.g:1434:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("REPLACE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREPLACE", "input.LT(1).Text.ToUpper() == \"REPLACE\"");
            }

            ID1500=(Token)match(input,ID,FOLLOW_ID_in_keyREPLACE11410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1500_tree = 
            (Object)adaptor.create(ID1500)
            ;
            adaptor.addChild(root_0, ID1500_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 352, keyREPLACE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREPLACE"


    public static class keyRESTRICT_REFERENCES_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRESTRICT_REFERENCES"
    // antlr3/PLSQL3.g:1435:1: keyRESTRICT_REFERENCES :{...}? ID ;
    public final PLSQL3Parser.keyRESTRICT_REFERENCES_return keyRESTRICT_REFERENCES() throws RecognitionException {
        PLSQL3Parser.keyRESTRICT_REFERENCES_return retval = new PLSQL3Parser.keyRESTRICT_REFERENCES_return();
        retval.start = input.LT(1);

        int keyRESTRICT_REFERENCES_StartIndex = input.index();

        Object root_0 = null;

        Token ID1501=null;

        Object ID1501_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 353) ) { return retval; }

            // antlr3/PLSQL3.g:1435:34: ({...}? ID )
            // antlr3/PLSQL3.g:1435:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("RESTRICT_REFERENCES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRESTRICT_REFERENCES", "input.LT(1).Text.ToUpper() == \"RESTRICT_REFERENCES\"");
            }

            ID1501=(Token)match(input,ID,FOLLOW_ID_in_keyRESTRICT_REFERENCES11429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1501_tree = 
            (Object)adaptor.create(ID1501)
            ;
            adaptor.addChild(root_0, ID1501_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 353, keyRESTRICT_REFERENCES_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRESTRICT_REFERENCES"


    public static class keyRETURN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRETURN"
    // antlr3/PLSQL3.g:1436:1: keyRETURN : 'RETURN' ;
    public final PLSQL3Parser.keyRETURN_return keyRETURN() throws RecognitionException {
        PLSQL3Parser.keyRETURN_return retval = new PLSQL3Parser.keyRETURN_return();
        retval.start = input.LT(1);

        int keyRETURN_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1502=null;

        Object string_literal1502_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 354) ) { return retval; }

            // antlr3/PLSQL3.g:1436:34: ( 'RETURN' )
            // antlr3/PLSQL3.g:1436:36: 'RETURN'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1502=(Token)match(input,140,FOLLOW_140_in_keyRETURN11459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1502_tree = 
            (Object)adaptor.create(string_literal1502)
            ;
            adaptor.addChild(root_0, string_literal1502_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 354, keyRETURN_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRETURN"


    public static class keyRETURNING_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyRETURNING"
    // antlr3/PLSQL3.g:1437:1: keyRETURNING : 'RETURNING' ;
    public final PLSQL3Parser.keyRETURNING_return keyRETURNING() throws RecognitionException {
        PLSQL3Parser.keyRETURNING_return retval = new PLSQL3Parser.keyRETURNING_return();
        retval.start = input.LT(1);

        int keyRETURNING_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1503=null;

        Object string_literal1503_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 355) ) { return retval; }

            // antlr3/PLSQL3.g:1437:34: ( 'RETURNING' )
            // antlr3/PLSQL3.g:1437:36: 'RETURNING'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1503=(Token)match(input,141,FOLLOW_141_in_keyRETURNING11487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1503_tree = 
            (Object)adaptor.create(string_literal1503)
            ;
            adaptor.addChild(root_0, string_literal1503_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 355, keyRETURNING_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyRETURNING"


    public static class keyREVERSE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyREVERSE"
    // antlr3/PLSQL3.g:1438:1: keyREVERSE :{...}? ID ;
    public final PLSQL3Parser.keyREVERSE_return keyREVERSE() throws RecognitionException {
        PLSQL3Parser.keyREVERSE_return retval = new PLSQL3Parser.keyREVERSE_return();
        retval.start = input.LT(1);

        int keyREVERSE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1504=null;

        Object ID1504_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 356) ) { return retval; }

            // antlr3/PLSQL3.g:1438:34: ({...}? ID )
            // antlr3/PLSQL3.g:1438:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("REVERSE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREVERSE", "input.LT(1).Text.ToUpper() == \"REVERSE\"");
            }

            ID1504=(Token)match(input,ID,FOLLOW_ID_in_keyREVERSE11519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1504_tree = 
            (Object)adaptor.create(ID1504)
            ;
            adaptor.addChild(root_0, ID1504_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 356, keyREVERSE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyREVERSE"


    public static class keyROLLBACK_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyROLLBACK"
    // antlr3/PLSQL3.g:1439:1: keyROLLBACK : 'ROLLBACK' ;
    public final PLSQL3Parser.keyROLLBACK_return keyROLLBACK() throws RecognitionException {
        PLSQL3Parser.keyROLLBACK_return retval = new PLSQL3Parser.keyROLLBACK_return();
        retval.start = input.LT(1);

        int keyROLLBACK_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1505=null;

        Object string_literal1505_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 357) ) { return retval; }

            // antlr3/PLSQL3.g:1439:34: ( 'ROLLBACK' )
            // antlr3/PLSQL3.g:1439:36: 'ROLLBACK'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1505=(Token)match(input,142,FOLLOW_142_in_keyROLLBACK11547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1505_tree = 
            (Object)adaptor.create(string_literal1505)
            ;
            adaptor.addChild(root_0, string_literal1505_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 357, keyROLLBACK_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyROLLBACK"


    public static class keySERIALLY_REUSABLE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySERIALLY_REUSABLE"
    // antlr3/PLSQL3.g:1440:1: keySERIALLY_REUSABLE :{...}? ID ;
    public final PLSQL3Parser.keySERIALLY_REUSABLE_return keySERIALLY_REUSABLE() throws RecognitionException {
        PLSQL3Parser.keySERIALLY_REUSABLE_return retval = new PLSQL3Parser.keySERIALLY_REUSABLE_return();
        retval.start = input.LT(1);

        int keySERIALLY_REUSABLE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1506=null;

        Object ID1506_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 358) ) { return retval; }

            // antlr3/PLSQL3.g:1440:34: ({...}? ID )
            // antlr3/PLSQL3.g:1440:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SERIALLY_REUSABLE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySERIALLY_REUSABLE", "input.LT(1).Text.ToUpper() == \"SERIALLY_REUSABLE\"");
            }

            ID1506=(Token)match(input,ID,FOLLOW_ID_in_keySERIALLY_REUSABLE11569); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1506_tree = 
            (Object)adaptor.create(ID1506)
            ;
            adaptor.addChild(root_0, ID1506_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 358, keySERIALLY_REUSABLE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySERIALLY_REUSABLE"


    public static class keySUBTYPE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keySUBTYPE"
    // antlr3/PLSQL3.g:1441:1: keySUBTYPE :{...}? ID ;
    public final PLSQL3Parser.keySUBTYPE_return keySUBTYPE() throws RecognitionException {
        PLSQL3Parser.keySUBTYPE_return retval = new PLSQL3Parser.keySUBTYPE_return();
        retval.start = input.LT(1);

        int keySUBTYPE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1507=null;

        Object ID1507_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 359) ) { return retval; }

            // antlr3/PLSQL3.g:1441:34: ({...}? ID )
            // antlr3/PLSQL3.g:1441:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("SUBTYPE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySUBTYPE", "input.LT(1).Text.ToUpper() == \"SUBTYPE\"");
            }

            ID1507=(Token)match(input,ID,FOLLOW_ID_in_keySUBTYPE11600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1507_tree = 
            (Object)adaptor.create(ID1507)
            ;
            adaptor.addChild(root_0, ID1507_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 359, keySUBTYPE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keySUBTYPE"


    public static class keyTRANSACTION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTRANSACTION"
    // antlr3/PLSQL3.g:1442:1: keyTRANSACTION :{...}? ID ;
    public final PLSQL3Parser.keyTRANSACTION_return keyTRANSACTION() throws RecognitionException {
        PLSQL3Parser.keyTRANSACTION_return retval = new PLSQL3Parser.keyTRANSACTION_return();
        retval.start = input.LT(1);

        int keyTRANSACTION_StartIndex = input.index();

        Object root_0 = null;

        Token ID1508=null;

        Object ID1508_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 360) ) { return retval; }

            // antlr3/PLSQL3.g:1442:34: ({...}? ID )
            // antlr3/PLSQL3.g:1442:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("TRANSACTION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTRANSACTION", "input.LT(1).Text.ToUpper() == \"TRANSACTION\"");
            }

            ID1508=(Token)match(input,ID,FOLLOW_ID_in_keyTRANSACTION11627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1508_tree = 
            (Object)adaptor.create(ID1508)
            ;
            adaptor.addChild(root_0, ID1508_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 360, keyTRANSACTION_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTRANSACTION"


    public static class keyTYPE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyTYPE"
    // antlr3/PLSQL3.g:1443:1: keyTYPE :{...}? ID ;
    public final PLSQL3Parser.keyTYPE_return keyTYPE() throws RecognitionException {
        PLSQL3Parser.keyTYPE_return retval = new PLSQL3Parser.keyTYPE_return();
        retval.start = input.LT(1);

        int keyTYPE_StartIndex = input.index();

        Object root_0 = null;

        Token ID1509=null;

        Object ID1509_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 361) ) { return retval; }

            // antlr3/PLSQL3.g:1443:34: ({...}? ID )
            // antlr3/PLSQL3.g:1443:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("TYPE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTYPE", "input.LT(1).Text.ToUpper() == \"TYPE\"");
            }

            ID1509=(Token)match(input,ID,FOLLOW_ID_in_keyTYPE11661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1509_tree = 
            (Object)adaptor.create(ID1509)
            ;
            adaptor.addChild(root_0, ID1509_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 361, keyTYPE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyTYPE"


    public static class keyUSING_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyUSING"
    // antlr3/PLSQL3.g:1444:1: keyUSING :{...}? ID ;
    public final PLSQL3Parser.keyUSING_return keyUSING() throws RecognitionException {
        PLSQL3Parser.keyUSING_return retval = new PLSQL3Parser.keyUSING_return();
        retval.start = input.LT(1);

        int keyUSING_StartIndex = input.index();

        Object root_0 = null;

        Token ID1510=null;

        Object ID1510_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 362) ) { return retval; }

            // antlr3/PLSQL3.g:1444:34: ({...}? ID )
            // antlr3/PLSQL3.g:1444:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("USING"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUSING", "input.LT(1).Text.ToUpper() == \"USING\"");
            }

            ID1510=(Token)match(input,ID,FOLLOW_ID_in_keyUSING11694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1510_tree = 
            (Object)adaptor.create(ID1510)
            ;
            adaptor.addChild(root_0, ID1510_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 362, keyUSING_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyUSING"


    public static class keyVARRAY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyVARRAY"
    // antlr3/PLSQL3.g:1445:1: keyVARRAY :{...}? ID ;
    public final PLSQL3Parser.keyVARRAY_return keyVARRAY() throws RecognitionException {
        PLSQL3Parser.keyVARRAY_return retval = new PLSQL3Parser.keyVARRAY_return();
        retval.start = input.LT(1);

        int keyVARRAY_StartIndex = input.index();

        Object root_0 = null;

        Token ID1511=null;

        Object ID1511_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 363) ) { return retval; }

            // antlr3/PLSQL3.g:1445:34: ({...}? ID )
            // antlr3/PLSQL3.g:1445:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("VARRAY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyVARRAY", "input.LT(1).Text.ToUpper() == \"VARRAY\"");
            }

            ID1511=(Token)match(input,ID,FOLLOW_ID_in_keyVARRAY11726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1511_tree = 
            (Object)adaptor.create(ID1511)
            ;
            adaptor.addChild(root_0, ID1511_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 363, keyVARRAY_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyVARRAY"


    public static class keyVARYING_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyVARYING"
    // antlr3/PLSQL3.g:1446:1: keyVARYING :{...}? ID ;
    public final PLSQL3Parser.keyVARYING_return keyVARYING() throws RecognitionException {
        PLSQL3Parser.keyVARYING_return retval = new PLSQL3Parser.keyVARYING_return();
        retval.start = input.LT(1);

        int keyVARYING_StartIndex = input.index();

        Object root_0 = null;

        Token ID1512=null;

        Object ID1512_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 364) ) { return retval; }

            // antlr3/PLSQL3.g:1446:33: ({...}? ID )
            // antlr3/PLSQL3.g:1446:35: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("VARYING"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyVARYING", "input.LT(1).Text.ToUpper() == \"VARYING\"");
            }

            ID1512=(Token)match(input,ID,FOLLOW_ID_in_keyVARYING11756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1512_tree = 
            (Object)adaptor.create(ID1512)
            ;
            adaptor.addChild(root_0, ID1512_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 364, keyVARYING_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyVARYING"


    public static class keyWHILE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyWHILE"
    // antlr3/PLSQL3.g:1447:1: keyWHILE : 'WHILE' ;
    public final PLSQL3Parser.keyWHILE_return keyWHILE() throws RecognitionException {
        PLSQL3Parser.keyWHILE_return retval = new PLSQL3Parser.keyWHILE_return();
        retval.start = input.LT(1);

        int keyWHILE_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1513=null;

        Object string_literal1513_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 365) ) { return retval; }

            // antlr3/PLSQL3.g:1447:34: ( 'WHILE' )
            // antlr3/PLSQL3.g:1447:36: 'WHILE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal1513=(Token)match(input,166,FOLLOW_166_in_keyWHILE11787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1513_tree = 
            (Object)adaptor.create(string_literal1513)
            ;
            adaptor.addChild(root_0, string_literal1513_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 365, keyWHILE_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyWHILE"


    public static class keyWORK_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyWORK"
    // antlr3/PLSQL3.g:1448:1: keyWORK :{...}? ID ;
    public final PLSQL3Parser.keyWORK_return keyWORK() throws RecognitionException {
        PLSQL3Parser.keyWORK_return retval = new PLSQL3Parser.keyWORK_return();
        retval.start = input.LT(1);

        int keyWORK_StartIndex = input.index();

        Object root_0 = null;

        Token ID1514=null;

        Object ID1514_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 366) ) { return retval; }

            // antlr3/PLSQL3.g:1448:34: ({...}? ID )
            // antlr3/PLSQL3.g:1448:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("WORK"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyWORK", "input.LT(1).Text.ToUpper() == \"WORK\"");
            }

            ID1514=(Token)match(input,ID,FOLLOW_ID_in_keyWORK11822); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1514_tree = 
            (Object)adaptor.create(ID1514)
            ;
            adaptor.addChild(root_0, ID1514_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 366, keyWORK_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyWORK"


    public static class sql_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_identifier"
    // antlr3/PLSQL3.g:1450:1: sql_identifier : ( identifier | 'ROWID' );
    public final PLSQL3Parser.sql_identifier_return sql_identifier() throws RecognitionException {
        PLSQL3Parser.sql_identifier_return retval = new PLSQL3Parser.sql_identifier_return();
        retval.start = input.LT(1);

        int sql_identifier_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal1516=null;
        PLSQL3Parser.identifier_return identifier1515 =null;


        Object string_literal1516_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 367) ) { return retval; }

            // antlr3/PLSQL3.g:1451:2: ( identifier | 'ROWID' )
            int alt364=2;
            int LA364_0 = input.LA(1);

            if ( (LA364_0==DOUBLEQUOTED_STRING||LA364_0==ID) ) {
                alt364=1;
            }
            else if ( (LA364_0==144) ) {
                alt364=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 364, 0, input);

                throw nvae;

            }
            switch (alt364) {
                case 1 :
                    // antlr3/PLSQL3.g:1451:4: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_sql_identifier11831);
                    identifier1515=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1515.getTree());

                    }
                    break;
                case 2 :
                    // antlr3/PLSQL3.g:1452:4: 'ROWID'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal1516=(Token)match(input,144,FOLLOW_144_in_sql_identifier11836); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1516_tree = 
                    (Object)adaptor.create(string_literal1516)
                    ;
                    adaptor.addChild(root_0, string_literal1516_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 367, sql_identifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "sql_identifier"

    // $ANTLR start synpred13_PLSQL3
    public final void synpred13_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:75:4: ( type_declaration )
        // antlr3/PLSQL3.g:75:4: type_declaration
        {
        pushFollow(FOLLOW_type_declaration_in_synpred13_PLSQL3234);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_PLSQL3

    // $ANTLR start synpred14_PLSQL3
    public final void synpred14_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:76:4: ( subtype_declaration )
        // antlr3/PLSQL3.g:76:4: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred14_PLSQL3239);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_PLSQL3

    // $ANTLR start synpred27_PLSQL3
    public final void synpred27_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:95:29: ( keyNEW )
        // antlr3/PLSQL3.g:95:29: keyNEW
        {
        pushFollow(FOLLOW_keyNEW_in_synpred27_PLSQL3361);
        keyNEW();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_PLSQL3

    // $ANTLR start synpred43_PLSQL3
    public final void synpred43_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:125:4: ( assignment_statement )
        // antlr3/PLSQL3.g:125:4: assignment_statement
        {
        pushFollow(FOLLOW_assignment_statement_in_synpred43_PLSQL3562);
        assignment_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred43_PLSQL3

    // $ANTLR start synpred44_PLSQL3
    public final void synpred44_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:126:4: ( exit_statement )
        // antlr3/PLSQL3.g:126:4: exit_statement
        {
        pushFollow(FOLLOW_exit_statement_in_synpred44_PLSQL3567);
        exit_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred44_PLSQL3

    // $ANTLR start synpred46_PLSQL3
    public final void synpred46_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:128:4: ( case_statement )
        // antlr3/PLSQL3.g:128:4: case_statement
        {
        pushFollow(FOLLOW_case_statement_in_synpred46_PLSQL3577);
        case_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred46_PLSQL3

    // $ANTLR start synpred48_PLSQL3
    public final void synpred48_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:130:4: ( loop_statement )
        // antlr3/PLSQL3.g:130:4: loop_statement
        {
        pushFollow(FOLLOW_loop_statement_in_synpred48_PLSQL3588);
        loop_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred48_PLSQL3

    // $ANTLR start synpred52_PLSQL3
    public final void synpred52_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:134:4: ( sql_statement )
        // antlr3/PLSQL3.g:134:4: sql_statement
        {
        pushFollow(FOLLOW_sql_statement_in_synpred52_PLSQL3609);
        sql_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred52_PLSQL3

    // $ANTLR start synpred53_PLSQL3
    public final void synpred53_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:135:4: ( plsql_block )
        // antlr3/PLSQL3.g:135:4: plsql_block
        {
        pushFollow(FOLLOW_plsql_block_in_synpred53_PLSQL3614);
        plsql_block();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred53_PLSQL3

    // $ANTLR start synpred62_PLSQL3
    public final void synpred62_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:151:4: ( subtype_declaration )
        // antlr3/PLSQL3.g:151:4: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred62_PLSQL3723);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred62_PLSQL3

    // $ANTLR start synpred70_PLSQL3
    public final void synpred70_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:159:4: ( type_declaration )
        // antlr3/PLSQL3.g:159:4: type_declaration
        {
        pushFollow(FOLLOW_type_declaration_in_synpred70_PLSQL3769);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred70_PLSQL3

    // $ANTLR start synpred73_PLSQL3
    public final void synpred73_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:165:5: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN )
        // antlr3/PLSQL3.g:165:5: keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN
        {
        pushFollow(FOLLOW_keyRESTRICT_REFERENCES_in_synpred73_PLSQL3793);
        keyRESTRICT_REFERENCES();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred73_PLSQL3795); if (state.failed) return ;

        // antlr3/PLSQL3.g:165:35: ( 'DEFAULT' | function_name )
        int alt369=2;
        int LA369_0 = input.LA(1);

        if ( (LA369_0==78) ) {
            alt369=1;
        }
        else if ( (LA369_0==DOUBLEQUOTED_STRING||LA369_0==ID||LA369_0==QUOTED_STRING) ) {
            alt369=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 369, 0, input);

            throw nvae;

        }
        switch (alt369) {
            case 1 :
                // antlr3/PLSQL3.g:165:37: 'DEFAULT'
                {
                match(input,78,FOLLOW_78_in_synpred73_PLSQL3799); if (state.failed) return ;

                }
                break;
            case 2 :
                // antlr3/PLSQL3.g:165:49: function_name
                {
                pushFollow(FOLLOW_function_name_in_synpred73_PLSQL3803);
                function_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        // antlr3/PLSQL3.g:165:65: ( COMMA pragma_param )+
        int cnt370=0;
        loop370:
        do {
            int alt370=2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0==COMMA) ) {
                alt370=1;
            }


            switch (alt370) {
        	case 1 :
        	    // antlr3/PLSQL3.g:165:67: COMMA pragma_param
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred73_PLSQL3809); if (state.failed) return ;

        	    pushFollow(FOLLOW_pragma_param_in_synpred73_PLSQL3811);
        	    pragma_param();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt370 >= 1 ) break loop370;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(370, input);
                    throw eee;
            }
            cnt370++;
        } while (true);


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred73_PLSQL3816); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred73_PLSQL3

    // $ANTLR start synpred74_PLSQL3
    public final void synpred74_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:166:5: ( keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN )
        // antlr3/PLSQL3.g:166:5: keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN
        {
        pushFollow(FOLLOW_keyEXCEPTION_INIT_in_synpred74_PLSQL3823);
        keyEXCEPTION_INIT();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred74_PLSQL3825); if (state.failed) return ;

        pushFollow(FOLLOW_exception_name_in_synpred74_PLSQL3827);
        exception_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,COMMA,FOLLOW_COMMA_in_synpred74_PLSQL3829); if (state.failed) return ;

        pushFollow(FOLLOW_literal_in_synpred74_PLSQL3831);
        literal();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred74_PLSQL3833); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred74_PLSQL3

    // $ANTLR start synpred75_PLSQL3
    public final void synpred75_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:167:5: ( keyAUTONOMOUS_TRANSACTION )
        // antlr3/PLSQL3.g:167:5: keyAUTONOMOUS_TRANSACTION
        {
        pushFollow(FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred75_PLSQL3839);
        keyAUTONOMOUS_TRANSACTION();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred75_PLSQL3

    // $ANTLR start synpred76_PLSQL3
    public final void synpred76_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:168:5: ( keySERIALLY_REUSABLE )
        // antlr3/PLSQL3.g:168:5: keySERIALLY_REUSABLE
        {
        pushFollow(FOLLOW_keySERIALLY_REUSABLE_in_synpred76_PLSQL3845);
        keySERIALLY_REUSABLE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred76_PLSQL3

    // $ANTLR start synpred77_PLSQL3
    public final void synpred77_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:169:5: ( keyBUILTIN LPAREN pragma_params RPAREN )
        // antlr3/PLSQL3.g:169:5: keyBUILTIN LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyBUILTIN_in_synpred77_PLSQL3851);
        keyBUILTIN();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred77_PLSQL3853); if (state.failed) return ;

        pushFollow(FOLLOW_pragma_params_in_synpred77_PLSQL3855);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred77_PLSQL3857); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred77_PLSQL3

    // $ANTLR start synpred78_PLSQL3
    public final void synpred78_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:170:5: ( keyFIPSFLAG LPAREN pragma_params RPAREN )
        // antlr3/PLSQL3.g:170:5: keyFIPSFLAG LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyFIPSFLAG_in_synpred78_PLSQL3863);
        keyFIPSFLAG();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred78_PLSQL3865); if (state.failed) return ;

        pushFollow(FOLLOW_pragma_params_in_synpred78_PLSQL3867);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred78_PLSQL3869); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred78_PLSQL3

    // $ANTLR start synpred79_PLSQL3
    public final void synpred79_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:171:5: ( keyINTERFACE LPAREN pragma_params RPAREN )
        // antlr3/PLSQL3.g:171:5: keyINTERFACE LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyINTERFACE_in_synpred79_PLSQL3875);
        keyINTERFACE();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred79_PLSQL3877); if (state.failed) return ;

        pushFollow(FOLLOW_pragma_params_in_synpred79_PLSQL3879);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred79_PLSQL3881); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred79_PLSQL3

    // $ANTLR start synpred80_PLSQL3
    public final void synpred80_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:172:5: ( keyNEW_NAMES LPAREN pragma_params RPAREN )
        // antlr3/PLSQL3.g:172:5: keyNEW_NAMES LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyNEW_NAMES_in_synpred80_PLSQL3887);
        keyNEW_NAMES();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred80_PLSQL3889); if (state.failed) return ;

        pushFollow(FOLLOW_pragma_params_in_synpred80_PLSQL3891);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred80_PLSQL3893); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred80_PLSQL3

    // $ANTLR start synpred114_PLSQL3
    public final void synpred114_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:239:4: ( keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? )
        // antlr3/PLSQL3.g:239:4: keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )?
        {
        pushFollow(FOLLOW_keyINTERVAL_in_synpred114_PLSQL31280);
        keyINTERVAL();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyDAY_in_synpred114_PLSQL31282);
        keyDAY();

        state._fsp--;
        if (state.failed) return ;

        // antlr3/PLSQL3.g:239:23: ( LPAREN NUMBER RPAREN )?
        int alt379=2;
        int LA379_0 = input.LA(1);

        if ( (LA379_0==LPAREN) ) {
            alt379=1;
        }
        switch (alt379) {
            case 1 :
                // antlr3/PLSQL3.g:239:25: LPAREN NUMBER RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred114_PLSQL31286); if (state.failed) return ;

                match(input,NUMBER,FOLLOW_NUMBER_in_synpred114_PLSQL31288); if (state.failed) return ;

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred114_PLSQL31290); if (state.failed) return ;

                }
                break;

        }


        match(input,155,FOLLOW_155_in_synpred114_PLSQL31295); if (state.failed) return ;

        pushFollow(FOLLOW_keySECOND_in_synpred114_PLSQL31297);
        keySECOND();

        state._fsp--;
        if (state.failed) return ;

        // antlr3/PLSQL3.g:239:64: ( LPAREN NUMBER RPAREN )?
        int alt380=2;
        int LA380_0 = input.LA(1);

        if ( (LA380_0==LPAREN) ) {
            alt380=1;
        }
        switch (alt380) {
            case 1 :
                // antlr3/PLSQL3.g:239:66: LPAREN NUMBER RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred114_PLSQL31301); if (state.failed) return ;

                match(input,NUMBER,FOLLOW_NUMBER_in_synpred114_PLSQL31303); if (state.failed) return ;

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred114_PLSQL31305); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred114_PLSQL3

    // $ANTLR start synpred116_PLSQL3
    public final void synpred116_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:240:4: ( keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH )
        // antlr3/PLSQL3.g:240:4: keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH
        {
        pushFollow(FOLLOW_keyINTERVAL_in_synpred116_PLSQL31313);
        keyINTERVAL();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyYEAR_in_synpred116_PLSQL31315);
        keyYEAR();

        state._fsp--;
        if (state.failed) return ;

        // antlr3/PLSQL3.g:240:24: ( LPAREN NUMBER RPAREN )?
        int alt381=2;
        int LA381_0 = input.LA(1);

        if ( (LA381_0==LPAREN) ) {
            alt381=1;
        }
        switch (alt381) {
            case 1 :
                // antlr3/PLSQL3.g:240:26: LPAREN NUMBER RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred116_PLSQL31319); if (state.failed) return ;

                match(input,NUMBER,FOLLOW_NUMBER_in_synpred116_PLSQL31321); if (state.failed) return ;

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred116_PLSQL31323); if (state.failed) return ;

                }
                break;

        }


        match(input,155,FOLLOW_155_in_synpred116_PLSQL31328); if (state.failed) return ;

        pushFollow(FOLLOW_keyMONTH_in_synpred116_PLSQL31330);
        keyMONTH();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred116_PLSQL3

    // $ANTLR start synpred117_PLSQL3
    public final void synpred117_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:241:6: ( keyTIME )
        // antlr3/PLSQL3.g:241:6: keyTIME
        {
        pushFollow(FOLLOW_keyTIME_in_synpred117_PLSQL31337);
        keyTIME();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred117_PLSQL3

    // $ANTLR start synpred172_PLSQL3
    public final void synpred172_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:267:4: ( datatype )
        // antlr3/PLSQL3.g:267:4: datatype
        {
        pushFollow(FOLLOW_datatype_in_synpred172_PLSQL31806);
        datatype();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred172_PLSQL3

    // $ANTLR start synpred232_PLSQL3
    public final void synpred232_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:471:28: ({...}? LPAREN ( call_parameters )? RPAREN )
        // antlr3/PLSQL3.g:471:28: {...}? LPAREN ( call_parameters )? RPAREN
        {
        if ( !(( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred232_PLSQL3", " input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ");
        }

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred232_PLSQL32921); if (state.failed) return ;

        // antlr3/PLSQL3.g:471:110: ( call_parameters )?
        int alt424=2;
        int LA424_0 = input.LA(1);

        if ( (LA424_0==DOUBLEQUOTED_STRING||LA424_0==ID||LA424_0==LPAREN||LA424_0==MINUS||LA424_0==NUMBER||LA424_0==PLUS||LA424_0==QUOTED_STRING||LA424_0==65||LA424_0==81||LA424_0==89||LA424_0==118||LA424_0==120||LA424_0==144||LA424_0==147||LA424_0==151||LA424_0==156) ) {
            alt424=1;
        }
        switch (alt424) {
            case 1 :
                // antlr3/PLSQL3.g:471:112: call_parameters
                {
                pushFollow(FOLLOW_call_parameters_in_synpred232_PLSQL32925);
                call_parameters();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred232_PLSQL32930); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred232_PLSQL3

    // $ANTLR start synpred238_PLSQL3
    public final void synpred238_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:506:7: ( numeric_loop_param )
        // antlr3/PLSQL3.g:506:9: numeric_loop_param
        {
        pushFollow(FOLLOW_numeric_loop_param_in_synpred238_PLSQL33077);
        numeric_loop_param();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred238_PLSQL3

    // $ANTLR start synpred239_PLSQL3
    public final void synpred239_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:507:7: ( cursor_loop_param )
        // antlr3/PLSQL3.g:507:9: cursor_loop_param
        {
        pushFollow(FOLLOW_cursor_loop_param_in_synpred239_PLSQL33093);
        cursor_loop_param();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred239_PLSQL3

    // $ANTLR start synpred242_PLSQL3
    public final void synpred242_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:518:22: ( keyREVERSE )
        // antlr3/PLSQL3.g:518:22: keyREVERSE
        {
        pushFollow(FOLLOW_keyREVERSE_in_synpred242_PLSQL33157);
        keyREVERSE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred242_PLSQL3

    // $ANTLR start synpred252_PLSQL3
    public final void synpred252_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:576:4: ( close_statement )
        // antlr3/PLSQL3.g:576:4: close_statement
        {
        pushFollow(FOLLOW_close_statement_in_synpred252_PLSQL33391);
        close_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred252_PLSQL3

    // $ANTLR start synpred256_PLSQL3
    public final void synpred256_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:580:4: ( open_statement )
        // antlr3/PLSQL3.g:580:4: open_statement
        {
        pushFollow(FOLLOW_open_statement_in_synpred256_PLSQL33411);
        open_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred256_PLSQL3

    // $ANTLR start synpred263_PLSQL3
    public final void synpred263_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:599:12: ( join_clause )
        // antlr3/PLSQL3.g:599:12: join_clause
        {
        pushFollow(FOLLOW_join_clause_in_synpred263_PLSQL33510);
        join_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred263_PLSQL3

    // $ANTLR start synpred264_PLSQL3
    public final void synpred264_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:599:26: ( LPAREN join_clause RPAREN )
        // antlr3/PLSQL3.g:599:26: LPAREN join_clause RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred264_PLSQL33514); if (state.failed) return ;

        pushFollow(FOLLOW_join_clause_in_synpred264_PLSQL33516);
        join_clause();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred264_PLSQL33518); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred264_PLSQL3

    // $ANTLR start synpred265_PLSQL3
    public final void synpred265_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:600:5: ( where_clause )
        // antlr3/PLSQL3.g:600:5: where_clause
        {
        pushFollow(FOLLOW_where_clause_in_synpred265_PLSQL33530);
        where_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred265_PLSQL3

    // $ANTLR start synpred266_PLSQL3
    public final void synpred266_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:600:23: ( hierarchical_query_clause )
        // antlr3/PLSQL3.g:600:23: hierarchical_query_clause
        {
        pushFollow(FOLLOW_hierarchical_query_clause_in_synpred266_PLSQL33537);
        hierarchical_query_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred266_PLSQL3

    // $ANTLR start synpred267_PLSQL3
    public final void synpred267_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:600:54: ( group_by_clause )
        // antlr3/PLSQL3.g:600:54: group_by_clause
        {
        pushFollow(FOLLOW_group_by_clause_in_synpred267_PLSQL33544);
        group_by_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred267_PLSQL3

    // $ANTLR start synpred268_PLSQL3
    public final void synpred268_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:601:5: ( 'HAVING' sql_condition )
        // antlr3/PLSQL3.g:601:5: 'HAVING' sql_condition
        {
        match(input,97,FOLLOW_97_in_synpred268_PLSQL33553); if (state.failed) return ;

        pushFollow(FOLLOW_sql_condition_in_synpred268_PLSQL33555);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred268_PLSQL3

    // $ANTLR start synpred269_PLSQL3
    public final void synpred269_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:601:33: ( model_clause )
        // antlr3/PLSQL3.g:601:33: model_clause
        {
        pushFollow(FOLLOW_model_clause_in_synpred269_PLSQL33562);
        model_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred269_PLSQL3

    // $ANTLR start synpred274_PLSQL3
    public final void synpred274_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:602:5: ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )
        // antlr3/PLSQL3.g:602:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery )
        {
        // antlr3/PLSQL3.g:602:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )
        int alt429=3;
        switch ( input.LA(1) ) {
        case 157:
            {
            alt429=1;
            }
            break;
        case 104:
            {
            alt429=2;
            }
            break;
        case 111:
            {
            alt429=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 429, 0, input);

            throw nvae;

        }

        switch (alt429) {
            case 1 :
                // antlr3/PLSQL3.g:602:7: 'UNION' ( 'ALL' )?
                {
                match(input,157,FOLLOW_157_in_synpred274_PLSQL33573); if (state.failed) return ;

                // antlr3/PLSQL3.g:602:15: ( 'ALL' )?
                int alt428=2;
                int LA428_0 = input.LA(1);

                if ( (LA428_0==50) ) {
                    alt428=1;
                }
                switch (alt428) {
                    case 1 :
                        // antlr3/PLSQL3.g:602:17: 'ALL'
                        {
                        match(input,50,FOLLOW_50_in_synpred274_PLSQL33577); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // antlr3/PLSQL3.g:603:6: 'INTERSECT'
                {
                match(input,104,FOLLOW_104_in_synpred274_PLSQL33587); if (state.failed) return ;

                }
                break;
            case 3 :
                // antlr3/PLSQL3.g:604:6: 'MINUS'
                {
                match(input,111,FOLLOW_111_in_synpred274_PLSQL33594); if (state.failed) return ;

                }
                break;

        }


        // antlr3/PLSQL3.g:606:4: ( select_expression | subquery )
        int alt430=2;
        int LA430_0 = input.LA(1);

        if ( (LA430_0==147) ) {
            alt430=1;
        }
        else if ( (LA430_0==LPAREN) ) {
            alt430=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 430, 0, input);

            throw nvae;

        }
        switch (alt430) {
            case 1 :
                // antlr3/PLSQL3.g:606:6: select_expression
                {
                pushFollow(FOLLOW_select_expression_in_synpred274_PLSQL33606);
                select_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // antlr3/PLSQL3.g:607:6: subquery
                {
                pushFollow(FOLLOW_subquery_in_synpred274_PLSQL33614);
                subquery();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred274_PLSQL3

    // $ANTLR start synpred275_PLSQL3
    public final void synpred275_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:610:5: ( order_by_clause )
        // antlr3/PLSQL3.g:610:5: order_by_clause
        {
        pushFollow(FOLLOW_order_by_clause_in_synpred275_PLSQL33630);
        order_by_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred275_PLSQL3

    // $ANTLR start synpred278_PLSQL3
    public final void synpred278_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:623:21: ( COMMA selected_table )
        // antlr3/PLSQL3.g:623:21: COMMA selected_table
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred278_PLSQL33686); if (state.failed) return ;

        pushFollow(FOLLOW_selected_table_in_synpred278_PLSQL33688);
        selected_table();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred278_PLSQL3

    // $ANTLR start synpred279_PLSQL3
    public final void synpred279_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:627:21: ( inner_cross_join_clause )
        // antlr3/PLSQL3.g:627:21: inner_cross_join_clause
        {
        pushFollow(FOLLOW_inner_cross_join_clause_in_synpred279_PLSQL33706);
        inner_cross_join_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred279_PLSQL3

    // $ANTLR start synpred280_PLSQL3
    public final void synpred280_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:627:47: ( outer_join_clause )
        // antlr3/PLSQL3.g:627:47: outer_join_clause
        {
        pushFollow(FOLLOW_outer_join_clause_in_synpred280_PLSQL33710);
        outer_join_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred280_PLSQL3

    // $ANTLR start synpred283_PLSQL3
    public final void synpred283_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:630:4: ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) )
        // antlr3/PLSQL3.g:630:4: ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
        {
        // antlr3/PLSQL3.g:630:4: ( keyINNER )?
        int alt431=2;
        int LA431_0 = input.LA(1);

        if ( (LA431_0==ID) ) {
            int LA431_1 = input.LA(2);

            if ( (LA431_1==ID) ) {
                int LA431_2 = input.LA(3);

                if ( (LA431_2==ID) ) {
                    int LA431_4 = input.LA(4);

                    if ( (LA431_4==ID||LA431_4==126) ) {
                        alt431=1;
                    }
                }
                else if ( (LA431_2==DOUBLEQUOTED_STRING||LA431_2==144) ) {
                    alt431=1;
                }
            }
        }
        switch (alt431) {
            case 1 :
                // antlr3/PLSQL3.g:630:6: keyINNER
                {
                pushFollow(FOLLOW_keyINNER_in_synpred283_PLSQL33725);
                keyINNER();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_keyJOIN_in_synpred283_PLSQL33730);
        keyJOIN();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_table_name_in_synpred283_PLSQL33732);
        table_name();

        state._fsp--;
        if (state.failed) return ;

        // antlr3/PLSQL3.g:630:37: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
        int alt432=2;
        int LA432_0 = input.LA(1);

        if ( (LA432_0==126) ) {
            alt432=1;
        }
        else if ( (LA432_0==ID) ) {
            alt432=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 432, 0, input);

            throw nvae;

        }
        switch (alt432) {
            case 1 :
                // antlr3/PLSQL3.g:630:39: 'ON' sql_condition
                {
                match(input,126,FOLLOW_126_in_synpred283_PLSQL33736); if (state.failed) return ;

                pushFollow(FOLLOW_sql_condition_in_synpred283_PLSQL33738);
                sql_condition();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // antlr3/PLSQL3.g:630:60: keyUSING LPAREN column_specs RPAREN
                {
                pushFollow(FOLLOW_keyUSING_in_synpred283_PLSQL33742);
                keyUSING();

                state._fsp--;
                if (state.failed) return ;

                match(input,LPAREN,FOLLOW_LPAREN_in_synpred283_PLSQL33744); if (state.failed) return ;

                pushFollow(FOLLOW_column_specs_in_synpred283_PLSQL33746);
                column_specs();

                state._fsp--;
                if (state.failed) return ;

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred283_PLSQL33748); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred283_PLSQL3

    // $ANTLR start synpred284_PLSQL3
    public final void synpred284_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:631:6: ( keyCROSS )
        // antlr3/PLSQL3.g:631:6: keyCROSS
        {
        pushFollow(FOLLOW_keyCROSS_in_synpred284_PLSQL33757);
        keyCROSS();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred284_PLSQL3

    // $ANTLR start synpred286_PLSQL3
    public final void synpred286_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:635:5: ( outer_join_type keyJOIN )
        // antlr3/PLSQL3.g:635:5: outer_join_type keyJOIN
        {
        pushFollow(FOLLOW_outer_join_type_in_synpred286_PLSQL33794);
        outer_join_type();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyJOIN_in_synpred286_PLSQL33796);
        keyJOIN();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred286_PLSQL3

    // $ANTLR start synpred287_PLSQL3
    public final void synpred287_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:636:18: ( outer_join_type )
        // antlr3/PLSQL3.g:636:18: outer_join_type
        {
        pushFollow(FOLLOW_outer_join_type_in_synpred287_PLSQL33806);
        outer_join_type();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred287_PLSQL3

    // $ANTLR start synpred288_PLSQL3
    public final void synpred288_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:638:20: ( query_partition_clause )
        // antlr3/PLSQL3.g:638:20: query_partition_clause
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred288_PLSQL33823);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred288_PLSQL3

    // $ANTLR start synpred289_PLSQL3
    public final void synpred289_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:639:5: ( 'ON' sql_condition )
        // antlr3/PLSQL3.g:639:5: 'ON' sql_condition
        {
        match(input,126,FOLLOW_126_in_synpred289_PLSQL33832); if (state.failed) return ;

        pushFollow(FOLLOW_sql_condition_in_synpred289_PLSQL33834);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred289_PLSQL3

    // $ANTLR start synpred290_PLSQL3
    public final void synpred290_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:639:26: ( keyUSING LPAREN column_specs RPAREN )
        // antlr3/PLSQL3.g:639:26: keyUSING LPAREN column_specs RPAREN
        {
        pushFollow(FOLLOW_keyUSING_in_synpred290_PLSQL33838);
        keyUSING();

        state._fsp--;
        if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred290_PLSQL33840); if (state.failed) return ;

        pushFollow(FOLLOW_column_specs_in_synpred290_PLSQL33842);
        column_specs();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred290_PLSQL33844); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred290_PLSQL3

    // $ANTLR start synpred291_PLSQL3
    public final void synpred291_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:645:6: ( keyFULL )
        // antlr3/PLSQL3.g:645:6: keyFULL
        {
        pushFollow(FOLLOW_keyFULL_in_synpred291_PLSQL33873);
        keyFULL();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred291_PLSQL3

    // $ANTLR start synpred292_PLSQL3
    public final void synpred292_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:645:16: ( keyLEFT )
        // antlr3/PLSQL3.g:645:16: keyLEFT
        {
        pushFollow(FOLLOW_keyLEFT_in_synpred292_PLSQL33877);
        keyLEFT();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred292_PLSQL3

    // $ANTLR start synpred293_PLSQL3
    public final void synpred293_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:645:39: ( keyOUTER )
        // antlr3/PLSQL3.g:645:39: keyOUTER
        {
        pushFollow(FOLLOW_keyOUTER_in_synpred293_PLSQL33887);
        keyOUTER();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred293_PLSQL3

    // $ANTLR start synpred295_PLSQL3
    public final void synpred295_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:654:55: ( keyNOCYCLE )
        // antlr3/PLSQL3.g:654:55: keyNOCYCLE
        {
        pushFollow(FOLLOW_keyNOCYCLE_in_synpred295_PLSQL33943);
        keyNOCYCLE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred295_PLSQL3

    // $ANTLR start synpred296_PLSQL3
    public final void synpred296_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:660:20: ( COMMA group_by_expr )
        // antlr3/PLSQL3.g:660:20: COMMA group_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred296_PLSQL33976); if (state.failed) return ;

        pushFollow(FOLLOW_group_by_expr_in_synpred296_PLSQL33978);
        group_by_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred296_PLSQL3

    // $ANTLR start synpred297_PLSQL3
    public final void synpred297_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:663:4: ( rollup_cube_clause )
        // antlr3/PLSQL3.g:663:4: rollup_cube_clause
        {
        pushFollow(FOLLOW_rollup_cube_clause_in_synpred297_PLSQL33991);
        rollup_cube_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred297_PLSQL3

    // $ANTLR start synpred298_PLSQL3
    public final void synpred298_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:664:4: ( grouping_sets_clause )
        // antlr3/PLSQL3.g:664:4: grouping_sets_clause
        {
        pushFollow(FOLLOW_grouping_sets_clause_in_synpred298_PLSQL33996);
        grouping_sets_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred298_PLSQL3

    // $ANTLR start synpred299_PLSQL3
    public final void synpred299_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:668:6: ( keyROLLUP )
        // antlr3/PLSQL3.g:668:6: keyROLLUP
        {
        pushFollow(FOLLOW_keyROLLUP_in_synpred299_PLSQL34013);
        keyROLLUP();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred299_PLSQL3

    // $ANTLR start synpred301_PLSQL3
    public final void synpred301_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:677:4: ( rollup_cube_clause )
        // antlr3/PLSQL3.g:677:4: rollup_cube_clause
        {
        pushFollow(FOLLOW_rollup_cube_clause_in_synpred301_PLSQL34072);
        rollup_cube_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred301_PLSQL3

    // $ANTLR start synpred304_PLSQL3
    public final void synpred304_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:685:8: ( keyIGNORE )
        // antlr3/PLSQL3.g:685:8: keyIGNORE
        {
        pushFollow(FOLLOW_keyIGNORE_in_synpred304_PLSQL34126);
        keyIGNORE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred304_PLSQL3

    // $ANTLR start synpred305_PLSQL3
    public final void synpred305_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:685:6: ( ( keyIGNORE | keyKEEP ) keyNAV )
        // antlr3/PLSQL3.g:685:6: ( keyIGNORE | keyKEEP ) keyNAV
        {
        // antlr3/PLSQL3.g:685:6: ( keyIGNORE | keyKEEP )
        int alt433=2;
        int LA433_0 = input.LA(1);

        if ( (LA433_0==ID) ) {
            int LA433_1 = input.LA(2);

            if ( (((synpred304_PLSQL3()&&synpred304_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("IGNORE")))) ) {
                alt433=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("KEEP"))) ) {
                alt433=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 433, 1, input);

                throw nvae;

            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 433, 0, input);

            throw nvae;

        }
        switch (alt433) {
            case 1 :
                // antlr3/PLSQL3.g:685:8: keyIGNORE
                {
                pushFollow(FOLLOW_keyIGNORE_in_synpred305_PLSQL34126);
                keyIGNORE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // antlr3/PLSQL3.g:685:20: keyKEEP
                {
                pushFollow(FOLLOW_keyKEEP_in_synpred305_PLSQL34130);
                keyKEEP();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_keyNAV_in_synpred305_PLSQL34134);
        keyNAV();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred305_PLSQL3

    // $ANTLR start synpred306_PLSQL3
    public final void synpred306_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:686:16: ( keyDIMENSION )
        // antlr3/PLSQL3.g:686:16: keyDIMENSION
        {
        pushFollow(FOLLOW_keyDIMENSION_in_synpred306_PLSQL34147);
        keyDIMENSION();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred306_PLSQL3

    // $ANTLR start synpred311_PLSQL3
    public final void synpred311_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:706:6: ( query_partition_clause ( column_spec )? )
        // antlr3/PLSQL3.g:706:6: query_partition_clause ( column_spec )?
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred311_PLSQL34271);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;

        // antlr3/PLSQL3.g:706:29: ( column_spec )?
        int alt435=2;
        int LA435_0 = input.LA(1);

        if ( (LA435_0==DOUBLEQUOTED_STRING||LA435_0==ID||LA435_0==144) ) {
            alt435=1;
        }
        switch (alt435) {
            case 1 :
                // antlr3/PLSQL3.g:706:31: column_spec
                {
                pushFollow(FOLLOW_column_spec_in_synpred311_PLSQL34275);
                column_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred311_PLSQL3

    // $ANTLR start synpred318_PLSQL3
    public final void synpred318_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:717:56: ( keyAUTOMATIC )
        // antlr3/PLSQL3.g:717:56: keyAUTOMATIC
        {
        pushFollow(FOLLOW_keyAUTOMATIC_in_synpred318_PLSQL34382);
        keyAUTOMATIC();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred318_PLSQL3

    // $ANTLR start synpred330_PLSQL3
    public final void synpred330_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:734:4: ( sql_condition )
        // antlr3/PLSQL3.g:734:4: sql_condition
        {
        pushFollow(FOLLOW_sql_condition_in_synpred330_PLSQL34543);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred330_PLSQL3

    // $ANTLR start synpred331_PLSQL3
    public final void synpred331_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:734:20: ( sql_expression )
        // antlr3/PLSQL3.g:734:20: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred331_PLSQL34547);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred331_PLSQL3

    // $ANTLR start synpred335_PLSQL3
    public final void synpred335_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:742:55: ( keyINCREMENT )
        // antlr3/PLSQL3.g:742:55: keyINCREMENT
        {
        pushFollow(FOLLOW_keyINCREMENT_in_synpred335_PLSQL34618);
        keyINCREMENT();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred335_PLSQL3

    // $ANTLR start synpred343_PLSQL3
    public final void synpred343_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:768:20: ( COMMA order_by_expr )
        // antlr3/PLSQL3.g:768:20: COMMA order_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred343_PLSQL34785); if (state.failed) return ;

        pushFollow(FOLLOW_order_by_expr_in_synpred343_PLSQL34787);
        order_by_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred343_PLSQL3

    // $ANTLR start synpred345_PLSQL3
    public final void synpred345_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:775:5: ( 'ASC' | 'DESC' )
        // antlr3/PLSQL3.g:
        {
        if ( input.LA(1)==54||input.LA(1)==80 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred345_PLSQL3

    // $ANTLR start synpred346_PLSQL3
    public final void synpred346_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:775:34: ( 'DESC' )
        // antlr3/PLSQL3.g:775:34: 'DESC'
        {
        match(input,80,FOLLOW_80_in_synpred346_PLSQL34829); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred346_PLSQL3

    // $ANTLR start synpred347_PLSQL3
    public final void synpred347_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:775:46: ( keyNULLS keyFIRST )
        // antlr3/PLSQL3.g:775:46: keyNULLS keyFIRST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred347_PLSQL34836);
        keyNULLS();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyFIRST_in_synpred347_PLSQL34838);
        keyFIRST();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred347_PLSQL3

    // $ANTLR start synpred348_PLSQL3
    public final void synpred348_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:775:66: ( keyNULLS keyLAST )
        // antlr3/PLSQL3.g:775:66: keyNULLS keyLAST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred348_PLSQL34842);
        keyNULLS();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_keyLAST_in_synpred348_PLSQL34844);
        keyLAST();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred348_PLSQL3

    // $ANTLR start synpred355_PLSQL3
    public final void synpred355_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:811:4: ({...}? sql_expression )
        // antlr3/PLSQL3.g:811:4: {...}? sql_expression
        {
        if ( !((  is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred355_PLSQL3", "  is_sql ");
        }

        pushFollow(FOLLOW_sql_expression_in_synpred355_PLSQL34998);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred355_PLSQL3

    // $ANTLR start synpred357_PLSQL3
    public final void synpred357_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:830:14: ( 'OR' expr_or )
        // antlr3/PLSQL3.g:830:14: 'OR' expr_or
        {
        match(input,127,FOLLOW_127_in_synpred357_PLSQL35076); if (state.failed) return ;

        pushFollow(FOLLOW_expr_or_in_synpred357_PLSQL35078);
        expr_or();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred357_PLSQL3

    // $ANTLR start synpred358_PLSQL3
    public final void synpred358_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:833:15: ( 'AND' expr_and )
        // antlr3/PLSQL3.g:833:15: 'AND' expr_and
        {
        match(input,51,FOLLOW_51_in_synpred358_PLSQL35095); if (state.failed) return ;

        pushFollow(FOLLOW_expr_and_in_synpred358_PLSQL35097);
        expr_and();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred358_PLSQL3

    // $ANTLR start synpred360_PLSQL3
    public final void synpred360_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:840:5: ( relational_op expr_add )
        // antlr3/PLSQL3.g:840:5: relational_op expr_add
        {
        pushFollow(FOLLOW_relational_op_in_synpred360_PLSQL35134);
        relational_op();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_add_in_synpred360_PLSQL35136);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred360_PLSQL3

    // $ANTLR start synpred361_PLSQL3
    public final void synpred361_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:841:5: ( FOUND_ATTR )
        // antlr3/PLSQL3.g:841:5: FOUND_ATTR
        {
        match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_synpred361_PLSQL35142); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred361_PLSQL3

    // $ANTLR start synpred362_PLSQL3
    public final void synpred362_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:841:18: ( NOTFOUND_ATTR )
        // antlr3/PLSQL3.g:841:18: NOTFOUND_ATTR
        {
        match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_synpred362_PLSQL35146); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred362_PLSQL3

    // $ANTLR start synpred363_PLSQL3
    public final void synpred363_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:841:34: ( ISOPEN_ATTR )
        // antlr3/PLSQL3.g:841:34: ISOPEN_ATTR
        {
        match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_synpred363_PLSQL35150); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred363_PLSQL3

    // $ANTLR start synpred364_PLSQL3
    public final void synpred364_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:841:48: ( ROWCOUNT_ATTR )
        // antlr3/PLSQL3.g:841:48: ROWCOUNT_ATTR
        {
        match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_synpred364_PLSQL35154); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred364_PLSQL3

    // $ANTLR start synpred365_PLSQL3
    public final void synpred365_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:841:64: ( BULK_ROWCOUNT_ATTR )
        // antlr3/PLSQL3.g:841:64: BULK_ROWCOUNT_ATTR
        {
        match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred365_PLSQL35158); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred365_PLSQL3

    // $ANTLR start synpred367_PLSQL3
    public final void synpred367_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:842:5: ( 'IS' ( 'NOT' )? 'NULL' )
        // antlr3/PLSQL3.g:842:5: 'IS' ( 'NOT' )? 'NULL'
        {
        match(input,106,FOLLOW_106_in_synpred367_PLSQL35164); if (state.failed) return ;

        // antlr3/PLSQL3.g:842:10: ( 'NOT' )?
        int alt447=2;
        int LA447_0 = input.LA(1);

        if ( (LA447_0==118) ) {
            alt447=1;
        }
        switch (alt447) {
            case 1 :
                // antlr3/PLSQL3.g:842:12: 'NOT'
                {
                match(input,118,FOLLOW_118_in_synpred367_PLSQL35168); if (state.failed) return ;

                }
                break;

        }


        match(input,120,FOLLOW_120_in_synpred367_PLSQL35173); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred367_PLSQL3

    // $ANTLR start synpred369_PLSQL3
    public final void synpred369_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:843:5: ( ( 'NOT' )? 'LIKE' expr_add )
        // antlr3/PLSQL3.g:843:5: ( 'NOT' )? 'LIKE' expr_add
        {
        // antlr3/PLSQL3.g:843:5: ( 'NOT' )?
        int alt448=2;
        int LA448_0 = input.LA(1);

        if ( (LA448_0==118) ) {
            alt448=1;
        }
        switch (alt448) {
            case 1 :
                // antlr3/PLSQL3.g:843:7: 'NOT'
                {
                match(input,118,FOLLOW_118_in_synpred369_PLSQL35181); if (state.failed) return ;

                }
                break;

        }


        match(input,107,FOLLOW_107_in_synpred369_PLSQL35186); if (state.failed) return ;

        pushFollow(FOLLOW_expr_add_in_synpred369_PLSQL35188);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred369_PLSQL3

    // $ANTLR start synpred371_PLSQL3
    public final void synpred371_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:844:5: ( ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add )
        // antlr3/PLSQL3.g:844:5: ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add
        {
        // antlr3/PLSQL3.g:844:5: ( 'NOT' )?
        int alt449=2;
        int LA449_0 = input.LA(1);

        if ( (LA449_0==118) ) {
            alt449=1;
        }
        switch (alt449) {
            case 1 :
                // antlr3/PLSQL3.g:844:7: 'NOT'
                {
                match(input,118,FOLLOW_118_in_synpred371_PLSQL35196); if (state.failed) return ;

                }
                break;

        }


        match(input,57,FOLLOW_57_in_synpred371_PLSQL35201); if (state.failed) return ;

        pushFollow(FOLLOW_expr_add_in_synpred371_PLSQL35203);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        match(input,51,FOLLOW_51_in_synpred371_PLSQL35205); if (state.failed) return ;

        pushFollow(FOLLOW_expr_add_in_synpred371_PLSQL35207);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred371_PLSQL3

    // $ANTLR start synpred373_PLSQL3
    public final void synpred373_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:845:5: ( ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )
        // antlr3/PLSQL3.g:845:5: ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN
        {
        // antlr3/PLSQL3.g:845:5: ( 'NOT' )?
        int alt450=2;
        int LA450_0 = input.LA(1);

        if ( (LA450_0==118) ) {
            alt450=1;
        }
        switch (alt450) {
            case 1 :
                // antlr3/PLSQL3.g:845:7: 'NOT'
                {
                match(input,118,FOLLOW_118_in_synpred373_PLSQL35215); if (state.failed) return ;

                }
                break;

        }


        match(input,99,FOLLOW_99_in_synpred373_PLSQL35220); if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred373_PLSQL35222); if (state.failed) return ;

        pushFollow(FOLLOW_nested_expressions_in_synpred373_PLSQL35224);
        nested_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred373_PLSQL35226); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred373_PLSQL3

    // $ANTLR start synpred375_PLSQL3
    public final void synpred375_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:854:21: ( COMMA sql_expression )
        // antlr3/PLSQL3.g:854:21: COMMA sql_expression
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred375_PLSQL35261); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expression_in_synpred375_PLSQL35263);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred375_PLSQL3

    // $ANTLR start synpred378_PLSQL3
    public final void synpred378_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:861:15: ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )
        // antlr3/PLSQL3.g:861:15: ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul
        {
        if ( input.LA(1)==DOUBLEVERTBAR||input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_expr_mul_in_synpred378_PLSQL35311);
        expr_mul();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred378_PLSQL3

    // $ANTLR start synpred380_PLSQL3
    public final void synpred380_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:864:16: ( ( ASTERISK | DIVIDE ) expr_sign )
        // antlr3/PLSQL3.g:864:16: ( ASTERISK | DIVIDE ) expr_sign
        {
        if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_expr_sign_in_synpred380_PLSQL35338);
        expr_sign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred380_PLSQL3

    // $ANTLR start synpred383_PLSQL3
    public final void synpred383_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:870:16: ( EXPONENT expr_expr )
        // antlr3/PLSQL3.g:870:16: EXPONENT expr_expr
        {
        match(input,EXPONENT,FOLLOW_EXPONENT_in_synpred383_PLSQL35376); if (state.failed) return ;

        pushFollow(FOLLOW_expr_expr_in_synpred383_PLSQL35378);
        expr_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred383_PLSQL3

    // $ANTLR start synpred384_PLSQL3
    public final void synpred384_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:873:4: ( expr_paren )
        // antlr3/PLSQL3.g:873:6: expr_paren
        {
        pushFollow(FOLLOW_expr_paren_in_synpred384_PLSQL35393);
        expr_paren();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred384_PLSQL3

    // $ANTLR start synpred385_PLSQL3
    public final void synpred385_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:874:4: ( function_expression )
        // antlr3/PLSQL3.g:874:6: function_expression
        {
        pushFollow(FOLLOW_function_expression_in_synpred385_PLSQL35406);
        function_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred385_PLSQL3

    // $ANTLR start synpred386_PLSQL3
    public final void synpred386_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:876:4: ( case_expression )
        // antlr3/PLSQL3.g:876:6: case_expression
        {
        pushFollow(FOLLOW_case_expression_in_synpred386_PLSQL35420);
        case_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred386_PLSQL3

    // $ANTLR start synpred387_PLSQL3
    public final void synpred387_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:877:4: ( cursor_expression )
        // antlr3/PLSQL3.g:877:6: cursor_expression
        {
        pushFollow(FOLLOW_cursor_expression_in_synpred387_PLSQL35433);
        cursor_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred387_PLSQL3

    // $ANTLR start synpred388_PLSQL3
    public final void synpred388_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:878:4: ( simple_expression )
        // antlr3/PLSQL3.g:878:6: simple_expression
        {
        pushFollow(FOLLOW_simple_expression_in_synpred388_PLSQL35446);
        simple_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred388_PLSQL3

    // $ANTLR start synpred389_PLSQL3
    public final void synpred389_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:879:4: ( select_expression )
        // antlr3/PLSQL3.g:879:6: select_expression
        {
        pushFollow(FOLLOW_select_expression_in_synpred389_PLSQL35459);
        select_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred389_PLSQL3

    // $ANTLR start synpred396_PLSQL3
    public final void synpred396_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:893:4: ( column_spec )
        // antlr3/PLSQL3.g:893:6: column_spec
        {
        pushFollow(FOLLOW_column_spec_in_synpred396_PLSQL35518);
        column_spec();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred396_PLSQL3

    // $ANTLR start synpred410_PLSQL3
    public final void synpred410_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:944:23: ( keyDBTIMEZONE )
        // antlr3/PLSQL3.g:944:23: keyDBTIMEZONE
        {
        pushFollow(FOLLOW_keyDBTIMEZONE_in_synpred410_PLSQL35815);
        keyDBTIMEZONE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred410_PLSQL3

    // $ANTLR start synpred411_PLSQL3
    public final void synpred411_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:944:39: ( keySESSIONTIMEZONE )
        // antlr3/PLSQL3.g:944:39: keySESSIONTIMEZONE
        {
        pushFollow(FOLLOW_keySESSIONTIMEZONE_in_synpred411_PLSQL35819);
        keySESSIONTIMEZONE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred411_PLSQL3

    // $ANTLR start synpred413_PLSQL3
    public final void synpred413_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:948:4: ( function_call ( DOT nested_expression )? )
        // antlr3/PLSQL3.g:948:4: function_call ( DOT nested_expression )?
        {
        pushFollow(FOLLOW_function_call_in_synpred413_PLSQL35839);
        function_call();

        state._fsp--;
        if (state.failed) return ;

        // antlr3/PLSQL3.g:948:18: ( DOT nested_expression )?
        int alt451=2;
        int LA451_0 = input.LA(1);

        if ( (LA451_0==DOT) ) {
            alt451=1;
        }
        switch (alt451) {
            case 1 :
                // antlr3/PLSQL3.g:948:20: DOT nested_expression
                {
                match(input,DOT,FOLLOW_DOT_in_synpred413_PLSQL35843); if (state.failed) return ;

                pushFollow(FOLLOW_nested_expression_in_synpred413_PLSQL35845);
                nested_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred413_PLSQL3

    // $ANTLR start synpred416_PLSQL3
    public final void synpred416_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:951:18: ( LPAREN nested_expression RPAREN )
        // antlr3/PLSQL3.g:951:18: LPAREN nested_expression RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred416_PLSQL35883); if (state.failed) return ;

        pushFollow(FOLLOW_nested_expression_in_synpred416_PLSQL35885);
        nested_expression();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred416_PLSQL35887); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred416_PLSQL3

    // $ANTLR start synpred421_PLSQL3
    public final void synpred421_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:962:5: ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? )
        // antlr3/PLSQL3.g:962:5: keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )?
        {
        pushFollow(FOLLOW_keyDAY_in_synpred421_PLSQL35959);
        keyDAY();

        state._fsp--;
        if (state.failed) return ;

        // antlr3/PLSQL3.g:962:12: ( LPAREN leading_field_precision RPAREN )?
        int alt454=2;
        int LA454_0 = input.LA(1);

        if ( (LA454_0==LPAREN) ) {
            alt454=1;
        }
        switch (alt454) {
            case 1 :
                // antlr3/PLSQL3.g:962:14: LPAREN leading_field_precision RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred421_PLSQL35963); if (state.failed) return ;

                pushFollow(FOLLOW_leading_field_precision_in_synpred421_PLSQL35965);
                leading_field_precision();

                state._fsp--;
                if (state.failed) return ;

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred421_PLSQL35967); if (state.failed) return ;

                }
                break;

        }


        match(input,155,FOLLOW_155_in_synpred421_PLSQL35972); if (state.failed) return ;

        pushFollow(FOLLOW_keySECOND_in_synpred421_PLSQL35974);
        keySECOND();

        state._fsp--;
        if (state.failed) return ;

        // antlr3/PLSQL3.g:962:70: ( LPAREN fractional_second_precision RPAREN )?
        int alt455=2;
        int LA455_0 = input.LA(1);

        if ( (LA455_0==LPAREN) ) {
            alt455=1;
        }
        switch (alt455) {
            case 1 :
                // antlr3/PLSQL3.g:962:72: LPAREN fractional_second_precision RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred421_PLSQL35978); if (state.failed) return ;

                pushFollow(FOLLOW_fractional_second_precision_in_synpred421_PLSQL35980);
                fractional_second_precision();

                state._fsp--;
                if (state.failed) return ;

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred421_PLSQL35982); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred421_PLSQL3

    // $ANTLR start synpred428_PLSQL3
    public final void synpred428_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1023:21: ( DOT sql_identifier )
        // antlr3/PLSQL3.g:1023:21: DOT sql_identifier
        {
        match(input,DOT,FOLLOW_DOT_in_synpred428_PLSQL36228); if (state.failed) return ;

        pushFollow(FOLLOW_sql_identifier_in_synpred428_PLSQL36230);
        sql_identifier();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred428_PLSQL3

    // $ANTLR start synpred432_PLSQL3
    public final void synpred432_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1036:6: ( table_spec )
        // antlr3/PLSQL3.g:1036:6: table_spec
        {
        pushFollow(FOLLOW_table_spec_in_synpred432_PLSQL36277);
        table_spec();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred432_PLSQL3

    // $ANTLR start synpred435_PLSQL3
    public final void synpred435_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1036:54: ( alias )
        // antlr3/PLSQL3.g:1036:54: alias
        {
        pushFollow(FOLLOW_alias_in_synpred435_PLSQL36298);
        alias();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred435_PLSQL3

    // $ANTLR start synpred441_PLSQL3
    public final void synpred441_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1051:4: ({...}? condition_or )
        // antlr3/PLSQL3.g:1051:4: {...}? condition_or
        {
        if ( !((  is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred441_PLSQL3", "  is_sql ");
        }

        pushFollow(FOLLOW_condition_or_in_synpred441_PLSQL36389);
        condition_or();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred441_PLSQL3

    // $ANTLR start synpred442_PLSQL3
    public final void synpred442_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1063:20: ( 'OR' condition_and )
        // antlr3/PLSQL3.g:1063:20: 'OR' condition_and
        {
        match(input,127,FOLLOW_127_in_synpred442_PLSQL36442); if (state.failed) return ;

        pushFollow(FOLLOW_condition_and_in_synpred442_PLSQL36444);
        condition_and();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred442_PLSQL3

    // $ANTLR start synpred443_PLSQL3
    public final void synpred443_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1066:20: ( 'AND' condition_not )
        // antlr3/PLSQL3.g:1066:20: 'AND' condition_not
        {
        match(input,51,FOLLOW_51_in_synpred443_PLSQL36461); if (state.failed) return ;

        pushFollow(FOLLOW_condition_not_in_synpred443_PLSQL36463);
        condition_not();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred443_PLSQL3

    // $ANTLR start synpred446_PLSQL3
    public final void synpred446_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1074:4: ( condition_is )
        // antlr3/PLSQL3.g:1074:4: condition_is
        {
        pushFollow(FOLLOW_condition_is_in_synpred446_PLSQL36498);
        condition_is();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred446_PLSQL3

    // $ANTLR start synpred447_PLSQL3
    public final void synpred447_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1075:4: ( condition_comparison )
        // antlr3/PLSQL3.g:1075:4: condition_comparison
        {
        pushFollow(FOLLOW_condition_comparison_in_synpred447_PLSQL36503);
        condition_comparison();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred447_PLSQL3

    // $ANTLR start synpred448_PLSQL3
    public final void synpred448_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1076:4: ( condition_group_comparison )
        // antlr3/PLSQL3.g:1076:4: condition_group_comparison
        {
        pushFollow(FOLLOW_condition_group_comparison_in_synpred448_PLSQL36508);
        condition_group_comparison();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred448_PLSQL3

    // $ANTLR start synpred449_PLSQL3
    public final void synpred449_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1077:4: ( condition_in )
        // antlr3/PLSQL3.g:1077:4: condition_in
        {
        pushFollow(FOLLOW_condition_in_in_synpred449_PLSQL36513);
        condition_in();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred449_PLSQL3

    // $ANTLR start synpred450_PLSQL3
    public final void synpred450_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1078:4: ( condition_is_a_set )
        // antlr3/PLSQL3.g:1078:4: condition_is_a_set
        {
        pushFollow(FOLLOW_condition_is_a_set_in_synpred450_PLSQL36518);
        condition_is_a_set();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred450_PLSQL3

    // $ANTLR start synpred451_PLSQL3
    public final void synpred451_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1079:4: ( condition_is_any )
        // antlr3/PLSQL3.g:1079:4: condition_is_any
        {
        pushFollow(FOLLOW_condition_is_any_in_synpred451_PLSQL36523);
        condition_is_any();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred451_PLSQL3

    // $ANTLR start synpred452_PLSQL3
    public final void synpred452_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1080:4: ( condition_is_empty )
        // antlr3/PLSQL3.g:1080:4: condition_is_empty
        {
        pushFollow(FOLLOW_condition_is_empty_in_synpred452_PLSQL36528);
        condition_is_empty();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred452_PLSQL3

    // $ANTLR start synpred453_PLSQL3
    public final void synpred453_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1081:4: ( condition_is_of_type )
        // antlr3/PLSQL3.g:1081:4: condition_is_of_type
        {
        pushFollow(FOLLOW_condition_is_of_type_in_synpred453_PLSQL36533);
        condition_is_of_type();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred453_PLSQL3

    // $ANTLR start synpred454_PLSQL3
    public final void synpred454_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1082:4: ( condition_is_present )
        // antlr3/PLSQL3.g:1082:4: condition_is_present
        {
        pushFollow(FOLLOW_condition_is_present_in_synpred454_PLSQL36538);
        condition_is_present();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred454_PLSQL3

    // $ANTLR start synpred455_PLSQL3
    public final void synpred455_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1083:4: ( condition_like )
        // antlr3/PLSQL3.g:1083:4: condition_like
        {
        pushFollow(FOLLOW_condition_like_in_synpred455_PLSQL36543);
        condition_like();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred455_PLSQL3

    // $ANTLR start synpred456_PLSQL3
    public final void synpred456_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1084:4: ( condition_memeber )
        // antlr3/PLSQL3.g:1084:4: condition_memeber
        {
        pushFollow(FOLLOW_condition_memeber_in_synpred456_PLSQL36548);
        condition_memeber();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred456_PLSQL3

    // $ANTLR start synpred457_PLSQL3
    public final void synpred457_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1085:4: ( condition_between )
        // antlr3/PLSQL3.g:1085:4: condition_between
        {
        pushFollow(FOLLOW_condition_between_in_synpred457_PLSQL36553);
        condition_between();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred457_PLSQL3

    // $ANTLR start synpred458_PLSQL3
    public final void synpred458_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1086:4: ( condition_regexp_like )
        // antlr3/PLSQL3.g:1086:4: condition_regexp_like
        {
        pushFollow(FOLLOW_condition_regexp_like_in_synpred458_PLSQL36558);
        condition_regexp_like();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred458_PLSQL3

    // $ANTLR start synpred459_PLSQL3
    public final void synpred459_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1087:4: ( condition_submultiset )
        // antlr3/PLSQL3.g:1087:4: condition_submultiset
        {
        pushFollow(FOLLOW_condition_submultiset_in_synpred459_PLSQL36563);
        condition_submultiset();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred459_PLSQL3

    // $ANTLR start synpred460_PLSQL3
    public final void synpred460_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1088:4: ( condition_equals_path )
        // antlr3/PLSQL3.g:1088:4: condition_equals_path
        {
        pushFollow(FOLLOW_condition_equals_path_in_synpred460_PLSQL36568);
        condition_equals_path();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred460_PLSQL3

    // $ANTLR start synpred461_PLSQL3
    public final void synpred461_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1089:4: ( condition_under_path )
        // antlr3/PLSQL3.g:1089:4: condition_under_path
        {
        pushFollow(FOLLOW_condition_under_path_in_synpred461_PLSQL36573);
        condition_under_path();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred461_PLSQL3

    // $ANTLR start synpred463_PLSQL3
    public final void synpred463_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1096:37: ( keyNAN )
        // antlr3/PLSQL3.g:1096:37: keyNAN
        {
        pushFollow(FOLLOW_keyNAN_in_synpred463_PLSQL36617);
        keyNAN();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred463_PLSQL3

    // $ANTLR start synpred464_PLSQL3
    public final void synpred464_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1096:46: ( keyINFINITE )
        // antlr3/PLSQL3.g:1096:46: keyINFINITE
        {
        pushFollow(FOLLOW_keyINFINITE_in_synpred464_PLSQL36621);
        keyINFINITE();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred464_PLSQL3

    // $ANTLR start synpred467_PLSQL3
    public final void synpred467_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1099:102: ( outer_join_sign )
        // antlr3/PLSQL3.g:1099:102: outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred467_PLSQL36668);
        outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred467_PLSQL3

    // $ANTLR start synpred468_PLSQL3
    public final void synpred468_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1099:4: ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? )
        // antlr3/PLSQL3.g:1099:4: LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )?
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred468_PLSQL36637); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expressions_in_synpred468_PLSQL36639);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred468_PLSQL36641); if (state.failed) return ;

        // antlr3/PLSQL3.g:1099:34: ( outer_join_sign )?
        int alt457=2;
        int LA457_0 = input.LA(1);

        if ( (LA457_0==LPAREN) ) {
            alt457=1;
        }
        switch (alt457) {
            case 1 :
                // antlr3/PLSQL3.g:1099:36: outer_join_sign
                {
                pushFollow(FOLLOW_outer_join_sign_in_synpred468_PLSQL36645);
                outer_join_sign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        match(input,LPAREN,FOLLOW_LPAREN_in_synpred468_PLSQL36660); if (state.failed) return ;

        pushFollow(FOLLOW_select_command_in_synpred468_PLSQL36662);
        select_command();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred468_PLSQL36664); if (state.failed) return ;

        // antlr3/PLSQL3.g:1099:100: ( outer_join_sign )?
        int alt458=2;
        int LA458_0 = input.LA(1);

        if ( (LA458_0==LPAREN) ) {
            alt458=1;
        }
        switch (alt458) {
            case 1 :
                // antlr3/PLSQL3.g:1099:102: outer_join_sign
                {
                pushFollow(FOLLOW_outer_join_sign_in_synpred468_PLSQL36668);
                outer_join_sign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred468_PLSQL3

    // $ANTLR start synpred477_PLSQL3
    public final void synpred477_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1100:108: ( sql_expression )
        // antlr3/PLSQL3.g:1100:108: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred477_PLSQL36727);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred477_PLSQL3

    // $ANTLR start synpred478_PLSQL3
    public final void synpred478_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1100:158: ( outer_join_sign )
        // antlr3/PLSQL3.g:1100:158: outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred478_PLSQL36741);
        outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred478_PLSQL3

    // $ANTLR start synpred482_PLSQL3
    public final void synpred482_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1103:87: ( grouping_expression_list )
        // antlr3/PLSQL3.g:1103:87: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred482_PLSQL36788);
        grouping_expression_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred482_PLSQL3

    // $ANTLR start synpred483_PLSQL3
    public final void synpred483_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1103:4: ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // antlr3/PLSQL3.g:1103:4: LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred483_PLSQL36754); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expressions_in_synpred483_PLSQL36756);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred483_PLSQL36758); if (state.failed) return ;

        if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        // antlr3/PLSQL3.g:1103:50: ( 'ANY' | keySOME | 'ALL' )
        int alt459=3;
        switch ( input.LA(1) ) {
        case 52:
            {
            alt459=1;
            }
            break;
        case ID:
            {
            alt459=2;
            }
            break;
        case 50:
            {
            alt459=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 459, 0, input);

            throw nvae;

        }

        switch (alt459) {
            case 1 :
                // antlr3/PLSQL3.g:1103:52: 'ANY'
                {
                match(input,52,FOLLOW_52_in_synpred483_PLSQL36772); if (state.failed) return ;

                }
                break;
            case 2 :
                // antlr3/PLSQL3.g:1103:60: keySOME
                {
                pushFollow(FOLLOW_keySOME_in_synpred483_PLSQL36776);
                keySOME();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // antlr3/PLSQL3.g:1103:70: 'ALL'
                {
                match(input,50,FOLLOW_50_in_synpred483_PLSQL36780); if (state.failed) return ;

                }
                break;

        }


        match(input,LPAREN,FOLLOW_LPAREN_in_synpred483_PLSQL36784); if (state.failed) return ;

        // antlr3/PLSQL3.g:1103:85: ( grouping_expression_list | select_command )
        int alt460=2;
        int LA460_0 = input.LA(1);

        if ( (LA460_0==DOUBLEQUOTED_STRING||LA460_0==ID||LA460_0==LPAREN||LA460_0==MINUS||LA460_0==NUMBER||LA460_0==PLUS||LA460_0==QUOTED_STRING||LA460_0==65||LA460_0==81||LA460_0==89||LA460_0==120||LA460_0==144||LA460_0==151||LA460_0==156) ) {
            alt460=1;
        }
        else if ( (LA460_0==147) ) {
            int LA460_13 = input.LA(2);

            if ( (synpred482_PLSQL3()) ) {
                alt460=1;
            }
            else if ( (true) ) {
                alt460=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 460, 13, input);

                throw nvae;

            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 460, 0, input);

            throw nvae;

        }
        switch (alt460) {
            case 1 :
                // antlr3/PLSQL3.g:1103:87: grouping_expression_list
                {
                pushFollow(FOLLOW_grouping_expression_list_in_synpred483_PLSQL36788);
                grouping_expression_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // antlr3/PLSQL3.g:1103:114: select_command
                {
                pushFollow(FOLLOW_select_command_in_synpred483_PLSQL36792);
                select_command();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred483_PLSQL36796); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred483_PLSQL3

    // $ANTLR start synpred491_PLSQL3
    public final void synpred491_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1104:96: ( sql_expressions )
        // antlr3/PLSQL3.g:1104:96: sql_expressions
        {
        pushFollow(FOLLOW_sql_expressions_in_synpred491_PLSQL36847);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred491_PLSQL3

    // $ANTLR start synpred493_PLSQL3
    public final void synpred493_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1107:59: ( grouping_expression_list )
        // antlr3/PLSQL3.g:1107:59: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred493_PLSQL36884);
        grouping_expression_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred493_PLSQL3

    // $ANTLR start synpred494_PLSQL3
    public final void synpred494_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1107:4: ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // antlr3/PLSQL3.g:1107:4: LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred494_PLSQL36865); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expressions_in_synpred494_PLSQL36867);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred494_PLSQL36869); if (state.failed) return ;

        // antlr3/PLSQL3.g:1107:34: ( 'NOT' )?
        int alt461=2;
        int LA461_0 = input.LA(1);

        if ( (LA461_0==118) ) {
            alt461=1;
        }
        switch (alt461) {
            case 1 :
                // antlr3/PLSQL3.g:1107:36: 'NOT'
                {
                match(input,118,FOLLOW_118_in_synpred494_PLSQL36873); if (state.failed) return ;

                }
                break;

        }


        match(input,99,FOLLOW_99_in_synpred494_PLSQL36878); if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred494_PLSQL36880); if (state.failed) return ;

        // antlr3/PLSQL3.g:1107:57: ( grouping_expression_list | select_command )
        int alt462=2;
        int LA462_0 = input.LA(1);

        if ( (LA462_0==DOUBLEQUOTED_STRING||LA462_0==ID||LA462_0==LPAREN||LA462_0==MINUS||LA462_0==NUMBER||LA462_0==PLUS||LA462_0==QUOTED_STRING||LA462_0==65||LA462_0==81||LA462_0==89||LA462_0==120||LA462_0==144||LA462_0==151||LA462_0==156) ) {
            alt462=1;
        }
        else if ( (LA462_0==147) ) {
            int LA462_13 = input.LA(2);

            if ( (synpred493_PLSQL3()) ) {
                alt462=1;
            }
            else if ( (true) ) {
                alt462=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 462, 13, input);

                throw nvae;

            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 462, 0, input);

            throw nvae;

        }
        switch (alt462) {
            case 1 :
                // antlr3/PLSQL3.g:1107:59: grouping_expression_list
                {
                pushFollow(FOLLOW_grouping_expression_list_in_synpred494_PLSQL36884);
                grouping_expression_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // antlr3/PLSQL3.g:1107:86: select_command
                {
                pushFollow(FOLLOW_select_command_in_synpred494_PLSQL36888);
                select_command();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred494_PLSQL36892); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred494_PLSQL3

    // $ANTLR start synpred496_PLSQL3
    public final void synpred496_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1108:44: ( expression_list )
        // antlr3/PLSQL3.g:1108:44: expression_list
        {
        pushFollow(FOLLOW_expression_list_in_synpred496_PLSQL36912);
        expression_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred496_PLSQL3

    // $ANTLR start synpred506_PLSQL3
    public final void synpred506_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1132:41: ( keyLIKEC )
        // antlr3/PLSQL3.g:1132:41: keyLIKEC
        {
        pushFollow(FOLLOW_keyLIKEC_in_synpred506_PLSQL37092);
        keyLIKEC();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred506_PLSQL3

    // $ANTLR start synpred507_PLSQL3
    public final void synpred507_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1132:52: ( keyLIKE2 )
        // antlr3/PLSQL3.g:1132:52: keyLIKE2
        {
        pushFollow(FOLLOW_keyLIKE2_in_synpred507_PLSQL37096);
        keyLIKE2();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred507_PLSQL3

    // $ANTLR start synpred508_PLSQL3
    public final void synpred508_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1132:91: ( keyESCAPE sql_expression )
        // antlr3/PLSQL3.g:1132:91: keyESCAPE sql_expression
        {
        pushFollow(FOLLOW_keyESCAPE_in_synpred508_PLSQL37108);
        keyESCAPE();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_sql_expression_in_synpred508_PLSQL37110);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred508_PLSQL3

    // $ANTLR start synpred517_PLSQL3
    public final void synpred517_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1162:22: ( COMMA expression_list )
        // antlr3/PLSQL3.g:1162:22: COMMA expression_list
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred517_PLSQL37321); if (state.failed) return ;

        pushFollow(FOLLOW_expression_list_in_synpred517_PLSQL37323);
        expression_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred517_PLSQL3

    // $ANTLR start synpred518_PLSQL3
    public final void synpred518_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1165:4: ( LPAREN sql_expressions RPAREN )
        // antlr3/PLSQL3.g:1165:4: LPAREN sql_expressions RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred518_PLSQL37336); if (state.failed) return ;

        pushFollow(FOLLOW_sql_expressions_in_synpred518_PLSQL37338);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred518_PLSQL37340); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred518_PLSQL3

    // $ANTLR start synpred526_PLSQL3
    public final void synpred526_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1183:4: ( sql_expression )
        // antlr3/PLSQL3.g:1183:6: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred526_PLSQL37437);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred526_PLSQL3

    // $ANTLR start synpred529_PLSQL3
    public final void synpred529_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1197:9: ( 'PRIOR' )
        // antlr3/PLSQL3.g:1197:9: 'PRIOR'
        {
        match(input,134,FOLLOW_134_in_synpred529_PLSQL37528); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred529_PLSQL3

    // $ANTLR start synpred530_PLSQL3
    public final void synpred530_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1197:5: ( ( 'PRIOR' )? sql_condition )
        // antlr3/PLSQL3.g:1197:7: ( 'PRIOR' )? sql_condition
        {
        // antlr3/PLSQL3.g:1197:7: ( 'PRIOR' )?
        int alt463=2;
        int LA463_0 = input.LA(1);

        if ( (LA463_0==134) ) {
            int LA463_1 = input.LA(2);

            if ( (synpred529_PLSQL3()) ) {
                alt463=1;
            }
        }
        switch (alt463) {
            case 1 :
                // antlr3/PLSQL3.g:1197:9: 'PRIOR'
                {
                match(input,134,FOLLOW_134_in_synpred530_PLSQL37528); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_sql_condition_in_synpred530_PLSQL37533);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred530_PLSQL3

    // $ANTLR start synpred531_PLSQL3
    public final void synpred531_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1197:40: ( 'PRIOR' )
        // antlr3/PLSQL3.g:1197:40: 'PRIOR'
        {
        match(input,134,FOLLOW_134_in_synpred531_PLSQL37540); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred531_PLSQL3

    // $ANTLR start synpred540_PLSQL3
    public final void synpred540_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1216:6: ( sql_expression )
        // antlr3/PLSQL3.g:1216:8: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred540_PLSQL37691);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred540_PLSQL3

    // $ANTLR start synpred541_PLSQL3
    public final void synpred541_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1216:45: ( NUMBER )
        // antlr3/PLSQL3.g:1216:47: NUMBER
        {
        match(input,NUMBER,FOLLOW_NUMBER_in_synpred541_PLSQL37703); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred541_PLSQL3

    // $ANTLR start synpred562_PLSQL3
    public final void synpred562_PLSQL3_fragment() throws RecognitionException {
        // antlr3/PLSQL3.g:1286:5: ( variable_names )
        // antlr3/PLSQL3.g:1286:5: variable_names
        {
        pushFollow(FOLLOW_variable_names_in_synpred562_PLSQL38115);
        variable_names();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred562_PLSQL3

    // Delegated rules

    public final boolean synpred238_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred450_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred450_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred508_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred508_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred540_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred540_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred458_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred458_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred518_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred518_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred482_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred482_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred447_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred447_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred529_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred529_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred369_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred369_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred442_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred442_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred477_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred477_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred494_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred494_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred483_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred483_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred541_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred541_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred365_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred460_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred460_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred453_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred453_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred491_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred491_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred478_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred478_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred443_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred443_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred452_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred452_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred468_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred468_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred363_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred461_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred461_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred496_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred496_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred455_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred455_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred531_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred531_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred451_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred451_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred464_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred464_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred467_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred467_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred449_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred449_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred457_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred457_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred378_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred373_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred373_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred454_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred454_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred432_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred380_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred463_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred463_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred448_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred448_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred493_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred493_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred562_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred562_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred530_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred530_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred446_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred446_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred435_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred435_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred526_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred526_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred459_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred459_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred517_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred517_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred428_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred428_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred456_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred456_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred507_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred507_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred506_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred506_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_PLSQL3() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_PLSQL3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA10 dfa10 = new DFA10(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA166 dfa166 = new DFA166(this);
    static final String DFA10_eotS =
        "\u02c4\uffff";
    static final String DFA10_eofS =
        "\u02c4\uffff";
    static final String DFA10_minS =
        "\1\17\2\15\4\uffff\20\5\1\26\7\5\1\102\11\5\1\uffff\1\17\1\42\1"+
        "\5\2\42\1\33\1\17\1\26\1\17\1\5\1\17\1\5\1\17\1\uffff\1\42\2\5\1"+
        "\42\1\u0094\1\42\1\u0094\1\42\1\u0094\1\5\1\42\1\5\3\42\1\5\1\u0094"+
        "\1\17\1\42\1\17\1\7\27\26\1\102\6\26\1\7\1\26\1\7\1\uffff\1\13\2"+
        "\54\1\42\1\26\1\54\1\13\1\26\1\5\1\7\2\53\1\uffff\1\7\2\uffff\1"+
        "\54\1\26\1\17\1\26\1\17\1\26\1\17\4\54\1\5\1\42\1\17\1\7\2\54\1"+
        "\7\1\17\1\26\1\170\1\0\1\17\1\26\1\17\1\26\1\uffff\1\42\1\26\3\42"+
        "\2\26\1\42\1\u0094\1\42\1\u0094\1\42\1\u0094\1\26\1\42\1\26\3\42"+
        "\1\26\1\u0094\1\17\3\42\3\5\1\54\2\5\13\13\1\7\5\13\1\26\7\13\1"+
        "\102\6\13\1\7\1\13\1\7\1\17\1\152\1\5\1\17\1\42\2\17\1\7\1\17\1"+
        "\5\2\54\2\5\1\11\2\54\2\5\1\11\2\54\2\5\1\11\4\5\1\54\1\5\1\11\2"+
        "\5\1\42\1\26\1\6\1\26\1\55\2\7\2\53\1\13\3\54\1\26\1\17\1\26\1\17"+
        "\1\26\1\17\4\54\1\26\1\42\1\17\1\7\3\54\1\u009b\2\42\1\13\2\42\1"+
        "\33\1\42\1\26\1\17\1\13\1\17\1\13\1\42\2\13\1\42\1\u0094\1\42\1"+
        "\u0094\1\42\1\u0094\1\13\1\42\1\13\3\42\1\13\1\u0094\1\17\2\42\1"+
        "\13\2\5\2\57\1\42\1\6\1\17\1\5\1\17\1\5\1\17\2\5\1\17\1\5\1\54\3"+
        "\26\2\17\1\42\4\26\2\54\1\26\2\11\2\54\1\26\2\11\2\54\1\26\2\11"+
        "\4\26\1\54\2\11\2\26\1\54\1\13\2\54\1\42\1\26\1\54\1\26\2\7\2\53"+
        "\1\54\1\26\1\17\1\26\1\17\1\26\1\17\4\54\1\13\1\42\1\17\1\7\2\54"+
        "\13\13\1\7\5\13\1\26\7\13\1\102\6\13\1\7\1\13\1\7\1\17\1\54\1\26"+
        "\10\11\1\55\1\42\1\26\1\15\2\57\1\54\1\17\1\26\1\17\1\26\1\17\2"+
        "\26\1\17\1\26\1\5\1\42\3\13\1\54\3\13\2\17\1\13\2\54\1\13\2\11\2"+
        "\54\1\13\2\11\2\54\1\13\2\11\4\13\1\54\2\11\2\13\1\42\1\13\2\42"+
        "\1\33\1\42\1\26\1\17\1\13\1\17\1\13\1\42\2\13\1\42\1\u0094\1\42"+
        "\1\u0094\1\42\1\u0094\1\13\1\42\1\13\3\42\1\13\1\u0094\1\17\2\42"+
        "\1\5\1\55\1\uffff\4\17\1\54\1\17\10\11\1\54\1\u009b\1\42\2\13\2"+
        "\57\1\17\1\13\1\17\1\13\1\17\2\13\1\17\2\13\2\54\1\42\1\26\1\54"+
        "\1\26\2\7\2\53\1\54\1\26\1\17\1\26\1\17\1\26\1\17\4\54\1\13\1\42"+
        "\1\17\1\7\2\54\10\11\1\26\1\15\4\17\1\54\1\17\10\11\1\42\3\13\1"+
        "\54\3\13\2\17\1\13\2\54\1\13\2\11\2\54\1\13\2\11\2\54\1\13\2\11"+
        "\4\13\1\54\2\11\2\13\10\11\2\13\4\17\1\54\1\u009b\1\42\2\13\2\57"+
        "\1\17\1\13\1\17\1\13\1\17\2\13\1\17\1\13\10\11\1\54\1\17\10\11\2"+
        "\13\4\17\10\11";
    static final String DFA10_maxS =
        "\1\u0087\2\u00a3\4\uffff\6\166\1\u0089\3\166\1\u00a7\5\166\1\26"+
        "\7\166\1\103\10\166\1\u008c\1\uffff\1\u00a3\1\42\1\166\2\42\1\u009b"+
        "\1\42\1\26\1\u0090\1\166\1\u0090\1\166\1\u00a3\1\uffff\1\42\2\166"+
        "\1\42\1\u0094\1\42\1\u0094\1\42\1\u0094\1\166\1\42\1\166\3\42\1"+
        "\166\1\u0094\1\u0090\2\42\1\u00a7\6\166\1\u0089\10\166\1\26\7\166"+
        "\1\103\11\166\1\uffff\3\54\1\42\1\26\1\54\1\u00a3\1\26\1\166\1\57"+
        "\2\53\1\uffff\1\u00a7\2\uffff\1\54\1\102\1\u0090\1\102\1\u0090\1"+
        "\102\1\u0090\4\54\1\166\1\42\1\u0090\1\57\2\54\1\u00a7\1\u009c\1"+
        "\26\1\170\1\0\1\u0090\1\166\1\u0090\1\166\1\uffff\1\42\1\166\3\42"+
        "\2\166\1\42\1\u0094\1\42\1\u0094\1\42\1\u0094\1\166\1\42\1\166\3"+
        "\42\1\166\1\u0094\1\u0090\3\42\3\166\1\54\1\166\1\u00a7\1\u00a3"+
        "\6\54\1\u0089\3\54\1\u00a7\5\54\1\26\3\103\4\54\1\103\3\54\1\103"+
        "\2\54\1\57\1\54\1\57\1\26\1\u008c\1\166\1\u0090\1\42\1\u00a3\1\u0090"+
        "\1\u00a7\1\u009c\1\166\2\54\2\166\1\15\2\54\2\166\1\15\2\54\2\166"+
        "\1\15\4\166\1\54\1\166\1\15\2\166\1\42\1\26\1\177\1\26\1\55\1\166"+
        "\1\57\2\53\4\54\1\102\1\u0090\1\102\1\u0090\1\102\1\u0090\4\54\1"+
        "\166\1\42\1\u0090\1\57\3\54\1\u009b\2\42\1\54\2\42\1\u009b\1\42"+
        "\1\26\1\u0090\1\54\1\u0090\1\54\1\42\1\54\1\103\1\42\1\u0094\1\42"+
        "\1\u0094\1\42\1\u0094\1\54\1\42\1\54\3\42\1\54\1\u0094\1\u0090\2"+
        "\42\1\u00a3\2\166\2\57\1\42\1\177\1\u0090\1\166\1\u0090\1\166\1"+
        "\u0090\2\166\1\u0090\1\166\1\54\1\166\1\u00a7\1\166\2\u0090\1\42"+
        "\4\166\2\54\2\166\1\15\2\54\2\166\1\15\2\54\2\166\1\15\4\166\1\54"+
        "\1\166\1\15\2\166\4\54\1\42\1\26\1\54\1\26\2\57\2\53\1\54\1\102"+
        "\1\u0090\1\102\1\u0090\1\102\1\u0090\5\54\1\42\1\u0090\1\57\2\54"+
        "\1\u00a3\6\54\1\u0089\3\54\1\u00a7\5\54\1\26\3\103\4\54\1\103\3"+
        "\54\1\103\2\54\1\57\1\54\1\57\1\26\1\54\1\u00a7\10\15\1\u00a7\1"+
        "\42\2\166\2\57\1\54\1\u0090\1\166\1\u0090\1\166\1\u0090\2\166\1"+
        "\u0090\2\166\1\42\5\54\1\u00a7\1\54\2\u0090\3\54\1\103\1\54\1\15"+
        "\2\54\1\103\1\54\1\15\2\54\1\103\1\54\1\15\6\54\1\15\2\54\1\42\1"+
        "\54\2\42\1\u009b\1\42\1\26\1\u0090\1\54\1\u0090\1\54\1\42\1\54\1"+
        "\103\1\42\1\u0094\1\42\1\u0094\1\42\1\u0094\1\54\1\42\1\54\3\42"+
        "\1\54\1\u0094\1\u0090\2\42\1\166\1\u00a7\1\uffff\4\u0090\1\54\1"+
        "\26\10\15\1\54\1\u009b\1\42\1\54\3\57\1\u0090\1\54\1\u0090\1\54"+
        "\1\u0090\2\54\1\u0090\4\54\1\42\1\26\1\54\1\26\2\57\2\53\1\54\1"+
        "\102\1\u0090\1\102\1\u0090\1\102\1\u0090\5\54\1\42\1\u0090\1\57"+
        "\2\54\10\11\2\166\4\u0090\1\54\1\26\10\15\1\42\5\54\1\u00a7\1\54"+
        "\2\u0090\3\54\1\103\1\54\1\15\2\54\1\103\1\54\1\15\2\54\1\103\1"+
        "\54\1\15\6\54\1\15\2\54\10\11\2\54\4\u0090\1\54\1\u009b\1\42\1\54"+
        "\3\57\1\u0090\1\54\1\u0090\1\54\1\u0090\2\54\1\u0090\1\54\10\11"+
        "\1\54\1\26\10\15\2\54\4\u0090\10\11";
    static final String DFA10_acceptS =
        "\3\uffff\1\11\1\12\1\14\1\1\42\uffff\1\13\15\uffff\1\10\66\uffff"+
        "\1\2\14\uffff\1\5\1\uffff\1\4\1\7\32\uffff\1\3\u0176\uffff\1\6\u00b3"+
        "\uffff";
    static final String DFA10_specialS =
        "\u0094\uffff\1\0\u022f\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\2\6\uffff\1\1\107\uffff\1\4\46\uffff\1\5\1\uffff\1\3",
            "\1\51\1\uffff\1\50\6\uffff\1\21\43\uffff\1\45\1\11\1\10\1\7"+
            "\1\42\1\17\2\uffff\1\30\1\33\1\43\3\uffff\1\6\1\uffff\1\20\2"+
            "\14\5\uffff\1\27\3\uffff\1\51\4\uffff\1\25\12\uffff\1\23\1\22"+
            "\5\uffff\1\15\2\uffff\1\40\1\uffff\1\37\1\12\1\34\1\44\3\uffff"+
            "\2\14\1\35\1\36\6\uffff\1\41\1\13\4\uffff\1\16\1\26\5\uffff"+
            "\1\46\5\uffff\1\24\11\uffff\1\47\1\uffff\1\31\1\32",
            "\1\51\1\uffff\1\6\6\uffff\1\6\43\uffff\6\6\2\uffff\3\6\3\uffff"+
            "\1\6\1\uffff\3\6\5\uffff\1\6\3\uffff\1\51\4\uffff\1\6\12\uffff"+
            "\2\6\5\uffff\1\6\2\uffff\1\6\1\uffff\4\6\3\uffff\4\6\6\uffff"+
            "\2\6\4\uffff\2\6\5\uffff\1\6\5\uffff\1\6\11\uffff\1\6\1\uffff"+
            "\2\6",
            "",
            "",
            "",
            "",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\25\uffff\1\53\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\6\25\uffff\1\55\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6\22\uffff\1\54",
            "\1\6\25\uffff\1\56\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\1\uffff\1\64\5\uffff\1\62\10\uffff\1\57\4\uffff\1\60\17"+
            "\uffff\1\65\1\uffff\1\6\1\uffff\1\63\36\uffff\1\6\33\uffff\1"+
            "\66\13\uffff\1\6\25\uffff\1\67\32\uffff\1\61",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\25\uffff\1\70\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\71",
            "\1\6\20\uffff\1\72\4\uffff\1\73\21\uffff\1\6\25\uffff\1\74"+
            "\12\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\25\uffff\1\75\21\uffff\1\6\25\uffff\1\76\12\uffff\1\6"+
            "\33\uffff\1\52\13\uffff\1\6",
            "\1\6\25\uffff\1\77\21\uffff\1\6\25\uffff\1\100\12\uffff\1\6"+
            "\33\uffff\1\52\13\uffff\1\6",
            "\1\6\20\uffff\1\101\4\uffff\1\102\21\uffff\1\6\40\uffff\1\6"+
            "\33\uffff\1\52\13\uffff\1\6",
            "\1\6\20\uffff\1\103\4\uffff\1\104\21\uffff\1\6\40\uffff\1\6"+
            "\33\uffff\1\52\13\uffff\1\6",
            "\1\6\25\uffff\1\105\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\6\25\uffff\1\106\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\2\107",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\25\uffff\1\110\12\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\1\uffff\1\64\5\uffff\1\111\35\uffff\1\65\1\uffff\1\6\1"+
            "\uffff\1\63\36\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\25\uffff\1\112\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\6\1\uffff\1\64\5\uffff\1\62\15\uffff\1\113\17\uffff\1\65"+
            "\1\uffff\1\6\1\uffff\1\63\36\uffff\1\6\33\uffff\1\66\13\uffff"+
            "\1\6\25\uffff\1\67",
            "",
            "\1\155\6\uffff\1\114\4\uffff\1\156\36\uffff\1\152\1\117\1\116"+
            "\1\115\1\147\1\125\2\uffff\1\135\1\140\1\150\5\uffff\1\126\2"+
            "\122\5\uffff\1\134\10\uffff\1\132\12\uffff\1\130\1\127\5\uffff"+
            "\1\123\2\uffff\1\145\1\uffff\1\144\1\120\1\141\1\151\3\uffff"+
            "\2\122\1\142\1\143\6\uffff\1\146\1\121\4\uffff\1\124\1\133\5"+
            "\uffff\1\153\5\uffff\1\131\11\uffff\1\154\1\uffff\1\136\1\137",
            "\1\157",
            "\1\6\25\uffff\1\55\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\160",
            "\1\161",
            "\1\162\177\uffff\1\163",
            "\1\165\6\uffff\1\165\13\uffff\1\164",
            "\1\166",
            "\1\167\6\uffff\1\167\171\uffff\1\170",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\171\6\uffff\1\171\171\uffff\1\172",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\155\6\uffff\1\174\4\uffff\1\156\36\uffff\1\152\1\117\1\116"+
            "\1\115\1\147\1\125\2\uffff\1\135\1\140\1\150\5\uffff\1\126\2"+
            "\122\5\uffff\1\134\10\uffff\1\132\12\uffff\1\130\1\127\5\uffff"+
            "\1\123\2\uffff\1\145\1\uffff\1\144\1\120\1\141\1\151\3\uffff"+
            "\2\122\1\142\1\143\6\uffff\1\146\1\121\4\uffff\1\124\1\133\1"+
            "\175\4\uffff\1\153\2\uffff\1\176\2\uffff\1\131\2\uffff\1\173"+
            "\6\uffff\1\154\1\uffff\1\136\1\137",
            "",
            "\1\177",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\25\uffff\1\73\21\uffff\1\6\25\uffff\1\74\12\uffff\1\6"+
            "\33\uffff\1\52\13\uffff\1\6",
            "\1\u0080",
            "\1\u0081",
            "\1\u0082",
            "\1\u0083",
            "\1\u0084",
            "\1\u0085",
            "\1\6\25\uffff\1\102\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\u0086",
            "\1\6\25\uffff\1\104\21\uffff\1\6\40\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\u0087",
            "\1\u0088",
            "\1\u0089",
            "\1\6\20\uffff\1\u008a\4\uffff\1\u008b\21\uffff\1\6\40\uffff"+
            "\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u008c",
            "\1\u008d\6\uffff\1\u008d\171\uffff\1\170",
            "\1\u008e",
            "\1\165\6\uffff\1\165\13\uffff\1\u008f",
            "\1\u0097\5\uffff\1\u0095\1\uffff\1\156\6\uffff\1\u0090\4\uffff"+
            "\1\u0091\17\uffff\1\u0098\1\uffff\1\u0094\1\uffff\1\u0096\12"+
            "\uffff\6\156\2\uffff\3\156\5\uffff\3\156\5\uffff\1\156\10\uffff"+
            "\1\156\12\uffff\2\156\5\uffff\1\156\2\uffff\1\156\1\uffff\4"+
            "\156\1\u0093\2\uffff\4\156\6\uffff\2\156\4\uffff\2\156\5\uffff"+
            "\1\156\5\uffff\1\156\11\uffff\1\156\1\uffff\2\156\3\uffff\1"+
            "\u0092",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\4\uffff\1\u009a\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\4\uffff\1\u009c\21\uffff\1\u0094\110\uffff\1\u0093"+
            "\22\uffff\1\u009b",
            "\1\u0099\4\uffff\1\u009d\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\4\uffff\1\u009e\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u009f",
            "\1\u00a0\4\uffff\1\u00a1\21\uffff\1\u0094\25\uffff\1\u00a2"+
            "\62\uffff\1\u0093",
            "\1\u0099\4\uffff\1\u00a3\21\uffff\1\u0094\25\uffff\1\u00a4"+
            "\62\uffff\1\u0093",
            "\1\u0099\4\uffff\1\u00a5\21\uffff\1\u0094\25\uffff\1\u00a6"+
            "\62\uffff\1\u0093",
            "\1\u00a7\4\uffff\1\u00a8\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u00a9\4\uffff\1\u00aa\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\4\uffff\1\u00ab\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\4\uffff\1\u00ac\21\uffff\1\u0094\110\uffff\1\u0093",
            "\2\u00ad",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\25\uffff\1\u00ae\62\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0097\5\uffff\1\u00af\10\uffff\1\u0099\24\uffff\1\u0098"+
            "\1\uffff\1\u0094\1\uffff\1\u0096\106\uffff\1\u0093",
            "\1\u0099\4\uffff\1\u00b0\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0097\5\uffff\1\u0095\10\uffff\1\u0099\4\uffff\1\u00b1\17"+
            "\uffff\1\u0098\1\uffff\1\u0094\1\uffff\1\u0096\106\uffff\1\u0093",
            "",
            "\1\u00b2\40\uffff\1\u00b3",
            "\1\u00b4",
            "\1\u00b5",
            "\1\u00b6",
            "\1\u00b7",
            "\1\u00b8",
            "\1\u00dc\3\uffff\1\u00db\6\uffff\1\u00c4\25\uffff\1\u00dd\15"+
            "\uffff\1\u00d8\1\u00bc\1\u00bb\1\u00ba\1\u00d5\1\u00c2\2\uffff"+
            "\1\u00cb\1\u00ce\1\u00d6\5\uffff\1\u00c3\2\u00bf\5\uffff\1\u00ca"+
            "\10\uffff\1\u00c8\7\uffff\1\u00b9\2\uffff\1\u00c6\1\u00c5\5"+
            "\uffff\1\u00c0\2\uffff\1\u00d3\1\uffff\1\u00d2\1\u00bd\1\u00cf"+
            "\1\u00d7\3\uffff\2\u00bf\1\u00d0\1\u00d1\6\uffff\1\u00d4\1\u00be"+
            "\4\uffff\1\u00c1\1\u00c9\5\uffff\1\u00d9\5\uffff\1\u00c7\11"+
            "\uffff\1\u00da\1\uffff\1\u00cc\1\u00cd",
            "\1\u00de",
            "\1\6\1\uffff\1\64\5\uffff\1\u00df\15\uffff\1\u00e0\17\uffff"+
            "\1\65\1\uffff\1\6\1\uffff\1\63\36\uffff\1\6\33\uffff\1\u00e1"+
            "\13\uffff\1\6",
            "\1\64\5\uffff\1\u00e2\35\uffff\1\65\3\uffff\1\63",
            "\1\65",
            "\1\65",
            "",
            "\1\u0097\5\uffff\1\u0095\1\uffff\1\156\6\uffff\1\u00e3\4\uffff"+
            "\1\u00e4\17\uffff\1\u0098\1\uffff\1\u0094\1\uffff\1\u0096\12"+
            "\uffff\6\156\2\uffff\3\156\5\uffff\3\156\5\uffff\1\156\10\uffff"+
            "\1\156\12\uffff\2\156\5\uffff\1\156\2\uffff\1\156\1\uffff\4"+
            "\156\1\u0093\2\uffff\4\156\6\uffff\2\156\4\uffff\2\156\5\uffff"+
            "\1\156\5\uffff\1\156\11\uffff\1\156\1\uffff\2\156\3\uffff\1"+
            "\u0092",
            "",
            "",
            "\1\u00e5",
            "\1\u00e6\25\uffff\1\u00e8\25\uffff\1\u00e7",
            "\1\u00e9\6\uffff\1\u00e9\171\uffff\1\u00ea",
            "\1\u00eb\25\uffff\1\u00ed\25\uffff\1\u00ec",
            "\1\u00ee\6\uffff\1\u00ee\171\uffff\1\u00ef",
            "\1\u00f0\25\uffff\1\u00f2\25\uffff\1\u00f1",
            "\1\u00f3\6\uffff\1\u00f3\171\uffff\1\u00f4",
            "\1\u00f5",
            "\1\u00f6",
            "\1\u00f7",
            "\1\u00f8",
            "\1\6\25\uffff\1\u008b\21\uffff\1\6\40\uffff\1\6\33\uffff\1"+
            "\52\13\uffff\1\6",
            "\1\u00f9",
            "\1\u00fa\6\uffff\1\u00fa\171\uffff\1\u00fb",
            "\1\64\5\uffff\1\u00e2\35\uffff\1\65\3\uffff\1\63",
            "\1\u00fc",
            "\1\u00fd",
            "\1\156\5\uffff\1\156\10\uffff\1\156\4\uffff\1\u00fe\1\uffff"+
            "\1\u0099\4\uffff\1\u0099\1\uffff\1\u0099\2\uffff\1\u0099\3\uffff"+
            "\1\156\1\uffff\1\156\1\uffff\1\156\106\uffff\1\156\44\uffff"+
            "\1\u00ff\13\uffff\1\156",
            "\1\156\6\uffff\1\156\4\uffff\1\156\1\uffff\1\156\4\uffff\1"+
            "\u0100\1\uffff\1\156\2\uffff\1\156\31\uffff\1\156\17\uffff\1"+
            "\156\7\uffff\1\156\34\uffff\1\156\1\uffff\1\156\27\uffff\1\156"+
            "\2\uffff\1\156\3\uffff\1\156\4\uffff\1\156",
            "\1\u0101",
            "\1\u0102",
            "\1\uffff",
            "\1\u0103\6\uffff\1\u0103\171\uffff\1\u0104",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0105\6\uffff\1\u0105\171\uffff\1\u0106",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "",
            "\1\u0107",
            "\1\u0099\4\uffff\1\u009c\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0108",
            "\1\u0109",
            "\1\u010a",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\4\uffff\1\u00a1\1\uffff\1\u0099\4\uffff\1\u0099\1"+
            "\uffff\1\u0099\2\uffff\1\u0099\5\uffff\1\u0094\25\uffff\1\u00a2"+
            "\62\uffff\1\u0093",
            "\1\u010b",
            "\1\u010c",
            "\1\u010d",
            "\1\u010e",
            "\1\u010f",
            "\1\u0110",
            "\1\u0099\4\uffff\1\u00a8\1\uffff\1\u0099\4\uffff\1\u0099\1"+
            "\uffff\1\u0099\2\uffff\1\u0099\5\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0111",
            "\1\u0099\4\uffff\1\u00aa\1\uffff\1\u0099\4\uffff\1\u0099\1"+
            "\uffff\1\u0099\2\uffff\1\u0099\5\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0112",
            "\1\u0113",
            "\1\u0114",
            "\1\u0115\4\uffff\1\u0116\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0117",
            "\1\u0118\6\uffff\1\u0118\171\uffff\1\u0104",
            "\1\u0119",
            "\1\u011a",
            "\1\u011b",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u011c",
            "\1\6\25\uffff\1\u011d\21\uffff\1\6\40\uffff\1\6\33\uffff\1"+
            "\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6\60"+
            "\uffff\1\61",
            "\1\u00dc\3\uffff\1\u00db\6\uffff\1\u00c4\25\uffff\1\u00dd\15"+
            "\uffff\1\u00d8\1\u00bc\1\u00bb\1\u00ba\1\u00d5\1\u00c2\2\uffff"+
            "\1\u00cb\1\u00ce\1\u00d6\5\uffff\1\u00c3\2\u00bf\5\uffff\1\u00ca"+
            "\10\uffff\1\u00c8\12\uffff\1\u00c6\1\u00c5\5\uffff\1\u00c0\2"+
            "\uffff\1\u00d3\1\uffff\1\u00d2\1\u00bd\1\u00cf\1\u00d7\3\uffff"+
            "\2\u00bf\1\u00d0\1\u00d1\6\uffff\1\u00d4\1\u00be\4\uffff\1\u00c1"+
            "\1\u00c9\5\uffff\1\u00d9\5\uffff\1\u00c7\11\uffff\1\u00da\1"+
            "\uffff\1\u00cc\1\u00cd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u011e\20\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u0120\20\uffff\1\u00dd\134\uffff\1\u011f",
            "\1\u00dc\17\uffff\1\u0121\20\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u0127\3\uffff\1\u00dc\1\uffff\1\u0125\10\uffff\1\u0122\4"+
            "\uffff\1\u0123\17\uffff\1\u0128\1\u00dd\2\uffff\1\u0126\167"+
            "\uffff\1\u0124",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u0129\20\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u012a",
            "\1\u00dc\12\uffff\1\u012b\4\uffff\1\u012c\20\uffff\1\u00dd"+
            "\26\uffff\1\u012d",
            "\1\u00dc\17\uffff\1\u012e\20\uffff\1\u00dd\26\uffff\1\u012f",
            "\1\u00dc\17\uffff\1\u0130\20\uffff\1\u00dd\26\uffff\1\u0131",
            "\1\u00dc\12\uffff\1\u0132\4\uffff\1\u0133\20\uffff\1\u00dd",
            "\1\u00dc\12\uffff\1\u0134\4\uffff\1\u0135\20\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u0136\20\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u0137\20\uffff\1\u00dd",
            "\2\u0138",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd\26\uffff\1\u0139",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u0127\3\uffff\1\u00dc\1\uffff\1\u013a\35\uffff\1\u0128\1"+
            "\u00dd\2\uffff\1\u0126",
            "\1\u00dc\17\uffff\1\u013b\20\uffff\1\u00dd",
            "\1\u0127\3\uffff\1\u00dc\1\uffff\1\u0125\15\uffff\1\u013c\17"+
            "\uffff\1\u0128\1\u00dd\2\uffff\1\u0126",
            "\1\u013d\6\uffff\1\u013d",
            "\1\176\41\uffff\1\67",
            "\1\6\20\uffff\1\u013e\26\uffff\1\6\40\uffff\1\6\33\uffff\1"+
            "\52\13\uffff\1\6",
            "\1\u013f\6\uffff\1\u013f\171\uffff\1\u0140",
            "\1\u008f",
            "\1\155\6\uffff\1\174\4\uffff\1\156\36\uffff\1\152\1\117\1\116"+
            "\1\115\1\147\1\125\2\uffff\1\135\1\140\1\150\5\uffff\1\126\2"+
            "\122\5\uffff\1\134\10\uffff\1\132\12\uffff\1\130\1\127\5\uffff"+
            "\1\123\2\uffff\1\145\1\uffff\1\144\1\120\1\141\1\151\3\uffff"+
            "\2\122\1\142\1\143\6\uffff\1\146\1\121\4\uffff\1\124\1\133\1"+
            "\175\4\uffff\1\153\5\uffff\1\131\2\uffff\1\173\6\uffff\1\154"+
            "\1\uffff\1\136\1\137",
            "\1\u0141\6\uffff\1\u0141\171\uffff\1\u0140",
            "\1\156\5\uffff\1\156\10\uffff\1\156\4\uffff\1\u0142\1\uffff"+
            "\1\u0099\4\uffff\1\u0099\1\uffff\1\u0099\2\uffff\1\u0099\3\uffff"+
            "\1\156\1\uffff\1\156\1\uffff\1\156\106\uffff\1\156\44\uffff"+
            "\1\u00ff\13\uffff\1\156",
            "\1\156\6\uffff\1\156\4\uffff\1\156\1\uffff\1\156\4\uffff\1"+
            "\u0143\1\uffff\1\156\2\uffff\1\156\31\uffff\1\156\17\uffff\1"+
            "\156\7\uffff\1\156\34\uffff\1\156\1\uffff\1\156\27\uffff\1\156"+
            "\2\uffff\1\156\3\uffff\1\156\4\uffff\1\156",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u00e8",
            "\1\u00e8",
            "\1\6\47\uffff\1\6\25\uffff\1\74\12\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\6\3\uffff\1\u0145\3\uffff\1\u0144\37\uffff\1\6\40\uffff"+
            "\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u0145\3\uffff\1\u0144",
            "\1\u00ed",
            "\1\u00ed",
            "\1\6\47\uffff\1\6\25\uffff\1\76\12\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\6\3\uffff\1\u0147\3\uffff\1\u0146\37\uffff\1\6\40\uffff"+
            "\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u0147\3\uffff\1\u0146",
            "\1\u00f2",
            "\1\u00f2",
            "\1\6\47\uffff\1\6\25\uffff\1\100\12\uffff\1\6\33\uffff\1\52"+
            "\13\uffff\1\6",
            "\1\6\3\uffff\1\u0149\3\uffff\1\u0148\37\uffff\1\6\40\uffff"+
            "\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u0149\3\uffff\1\u0148",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u014a",
            "\1\6\3\uffff\1\u014c\3\uffff\1\u014b\37\uffff\1\6\40\uffff"+
            "\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u014c\3\uffff\1\u014b",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u014d",
            "\1\u014e",
            "\1\156\1\uffff\1\156\2\uffff\2\156\3\uffff\6\156\1\uffff\1"+
            "\156\1\uffff\1\156\2\uffff\2\156\2\uffff\2\156\2\uffff\1\156"+
            "\5\uffff\1\156\1\uffff\1\u014f\6\uffff\1\156\5\uffff\1\156\51"+
            "\uffff\1\156\6\uffff\2\156\12\uffff\1\156\10\uffff\1\156",
            "\1\u0150",
            "\1\u0094",
            "\1\u0097\5\uffff\1\u0151\10\uffff\1\u0099\4\uffff\1\u00b1\17"+
            "\uffff\1\u0098\1\uffff\1\u0094\1\uffff\1\u0096\106\uffff\1\u0093",
            "\1\u0097\5\uffff\1\u0152\35\uffff\1\u0098\3\uffff\1\u0096",
            "\1\u0098",
            "\1\u0098",
            "\1\u0153\40\uffff\1\u0154",
            "\1\u0155",
            "\1\u0156",
            "\1\u0157",
            "\1\u0158\25\uffff\1\u015a\25\uffff\1\u0159",
            "\1\u015b\6\uffff\1\u015b\171\uffff\1\u015c",
            "\1\u015d\25\uffff\1\u015f\25\uffff\1\u015e",
            "\1\u0160\6\uffff\1\u0160\171\uffff\1\u0161",
            "\1\u0162\25\uffff\1\u0164\25\uffff\1\u0163",
            "\1\u0165\6\uffff\1\u0165\171\uffff\1\u0166",
            "\1\u0167",
            "\1\u0168",
            "\1\u0169",
            "\1\u016a",
            "\1\u0099\4\uffff\1\u0116\1\uffff\1\u0099\4\uffff\1\u0099\1"+
            "\uffff\1\u0099\2\uffff\1\u0099\5\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u016b",
            "\1\u016c\6\uffff\1\u016c\171\uffff\1\u016d",
            "\1\u0097\5\uffff\1\u0152\35\uffff\1\u0098\3\uffff\1\u0096",
            "\1\u016e",
            "\1\u016f",
            "\1\u00b3",
            "\1\163",
            "\1\u0170",
            "\1\u0171",
            "\1\u00dc\17\uffff\1\u0120\20\uffff\1\u00dd",
            "\1\u0172",
            "\1\u0173",
            "\1\u0174\177\uffff\1\u0175",
            "\1\u0176",
            "\1\u0177",
            "\1\u0178\6\uffff\1\u0178\171\uffff\1\u0179",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u017a\6\uffff\1\u017a\171\uffff\1\u017b",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u017c",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u012c\20\uffff\1\u00dd\26\uffff\1\u012d",
            "\1\u017d",
            "\1\u017e",
            "\1\u017f",
            "\1\u0180",
            "\1\u0181",
            "\1\u0182",
            "\1\u00dc\17\uffff\1\u0133\20\uffff\1\u00dd",
            "\1\u0183",
            "\1\u00dc\17\uffff\1\u0135\20\uffff\1\u00dd",
            "\1\u0184",
            "\1\u0185",
            "\1\u0186",
            "\1\u00dc\12\uffff\1\u0187\4\uffff\1\u0188\20\uffff\1\u00dd",
            "\1\u0189",
            "\1\u018a\6\uffff\1\u018a\171\uffff\1\u0179",
            "\1\u018b",
            "\1\u018c",
            "\1\u00dc\3\uffff\1\u01af\6\uffff\1\u0198\25\uffff\1\u00dd\15"+
            "\uffff\1\u01ac\1\u0190\1\u018f\1\u018e\1\u01a9\1\u0196\2\uffff"+
            "\1\u019f\1\u01a2\1\u01aa\5\uffff\1\u0197\2\u0193\5\uffff\1\u019e"+
            "\10\uffff\1\u019c\7\uffff\1\u018d\2\uffff\1\u019a\1\u0199\5"+
            "\uffff\1\u0194\2\uffff\1\u01a7\1\uffff\1\u01a6\1\u0191\1\u01a3"+
            "\1\u01ab\3\uffff\2\u0193\1\u01a4\1\u01a5\6\uffff\1\u01a8\1\u0192"+
            "\4\uffff\1\u0195\1\u019d\5\uffff\1\u01ad\5\uffff\1\u019b\11"+
            "\uffff\1\u01ae\1\uffff\1\u01a0\1\u01a1",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\7\uffff\1\u01b0\15\uffff\1\u00e0\21\uffff\1\6\1\uffff"+
            "\1\63\36\uffff\1\6\33\uffff\1\u00e1\13\uffff\1\6",
            "\1\63",
            "\1\63",
            "\1\u01b1",
            "\1\156\1\uffff\1\156\2\uffff\2\156\3\uffff\6\156\1\uffff\1"+
            "\156\1\uffff\1\156\2\uffff\2\156\2\uffff\2\156\2\uffff\1\156"+
            "\5\uffff\1\156\1\uffff\1\u01b2\6\uffff\1\156\5\uffff\1\156\51"+
            "\uffff\1\156\6\uffff\2\156\12\uffff\1\156\10\uffff\1\156",
            "\1\u01b3\6\uffff\1\u01b3\171\uffff\1\u01b4",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u01b5\6\uffff\1\u01b5\171\uffff\1\u01b6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u01b7\6\uffff\1\u01b7\171\uffff\1\u01b8",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u01b9\6\uffff\1\u01b9\171\uffff\1\u01ba",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u01bb",
            "\1\u0099\4\uffff\1\u01bc\21\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093\60\uffff\1\u0092",
            "\1\u01bd\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u01be\6\uffff\1\u01be\171\uffff\1\u01bf",
            "\1\u01c0\6\uffff\1\u01c0\171\uffff\1\u01bf",
            "\1\u01c1",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u015a",
            "\1\u015a",
            "\1\u0099\26\uffff\1\u0094\25\uffff\1\u00a2\62\uffff\1\u0093",
            "\1\u01c3\3\uffff\1\u01c2\10\uffff\1\u0099\26\uffff\1\u0094"+
            "\110\uffff\1\u0093",
            "\1\u01c3\3\uffff\1\u01c2",
            "\1\u015f",
            "\1\u015f",
            "\1\u0099\26\uffff\1\u0094\25\uffff\1\u00a4\62\uffff\1\u0093",
            "\1\u01c5\3\uffff\1\u01c4\10\uffff\1\u0099\26\uffff\1\u0094"+
            "\110\uffff\1\u0093",
            "\1\u01c5\3\uffff\1\u01c4",
            "\1\u0164",
            "\1\u0164",
            "\1\u0099\26\uffff\1\u0094\25\uffff\1\u00a6\62\uffff\1\u0093",
            "\1\u01c7\3\uffff\1\u01c6\10\uffff\1\u0099\26\uffff\1\u0094"+
            "\110\uffff\1\u0093",
            "\1\u01c7\3\uffff\1\u01c6",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u01c8",
            "\1\u01ca\3\uffff\1\u01c9\10\uffff\1\u0099\26\uffff\1\u0094"+
            "\110\uffff\1\u0093",
            "\1\u01ca\3\uffff\1\u01c9",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u01cb",
            "\1\u01cc\40\uffff\1\u01cd",
            "\1\u01ce",
            "\1\u01cf",
            "\1\u01d0",
            "\1\u01d1",
            "\1\u01d2",
            "\1\u01d3",
            "\1\u0127\3\uffff\1\u00dc\1\uffff\1\u01d4\15\uffff\1\u013c\17"+
            "\uffff\1\u0128\1\u00dd\2\uffff\1\u0126",
            "\1\u0127\5\uffff\1\u01d5\35\uffff\1\u0128\3\uffff\1\u0126",
            "\1\u0128",
            "\1\u0128",
            "\1\u01d6",
            "\1\u01d7\25\uffff\1\u01d9\25\uffff\1\u01d8",
            "\1\u01da\6\uffff\1\u01da\171\uffff\1\u01db",
            "\1\u01dc\25\uffff\1\u01de\25\uffff\1\u01dd",
            "\1\u01df\6\uffff\1\u01df\171\uffff\1\u01e0",
            "\1\u01e1\25\uffff\1\u01e3\25\uffff\1\u01e2",
            "\1\u01e4\6\uffff\1\u01e4\171\uffff\1\u01e5",
            "\1\u01e6",
            "\1\u01e7",
            "\1\u01e8",
            "\1\u01e9",
            "\1\u00dc\17\uffff\1\u0188\20\uffff\1\u00dd",
            "\1\u01ea",
            "\1\u01eb\6\uffff\1\u01eb\171\uffff\1\u01ec",
            "\1\u0127\5\uffff\1\u01d5\35\uffff\1\u0128\3\uffff\1\u0126",
            "\1\u01ed",
            "\1\u01ee",
            "\1\u00dc\3\uffff\1\u01af\6\uffff\1\u0198\25\uffff\1\u00dd\15"+
            "\uffff\1\u01ac\1\u0190\1\u018f\1\u018e\1\u01a9\1\u0196\2\uffff"+
            "\1\u019f\1\u01a2\1\u01aa\5\uffff\1\u0197\2\u0193\5\uffff\1\u019e"+
            "\10\uffff\1\u019c\12\uffff\1\u019a\1\u0199\5\uffff\1\u0194\2"+
            "\uffff\1\u01a7\1\uffff\1\u01a6\1\u0191\1\u01a3\1\u01ab\3\uffff"+
            "\2\u0193\1\u01a4\1\u01a5\6\uffff\1\u01a8\1\u0192\4\uffff\1\u0195"+
            "\1\u019d\5\uffff\1\u01ad\5\uffff\1\u019b\11\uffff\1\u01ae\1"+
            "\uffff\1\u01a0\1\u01a1",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u01ef\20\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u01f1\20\uffff\1\u00dd\134\uffff\1\u01f0",
            "\1\u00dc\17\uffff\1\u01f2\20\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u01f8\3\uffff\1\u00dc\1\uffff\1\u01f6\10\uffff\1\u01f3\4"+
            "\uffff\1\u01f4\17\uffff\1\u01f9\1\u00dd\2\uffff\1\u01f7\167"+
            "\uffff\1\u01f5",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u01fa\20\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u01fb",
            "\1\u00dc\12\uffff\1\u01fc\4\uffff\1\u01fd\20\uffff\1\u00dd"+
            "\26\uffff\1\u01fe",
            "\1\u00dc\17\uffff\1\u01ff\20\uffff\1\u00dd\26\uffff\1\u0200",
            "\1\u00dc\17\uffff\1\u0201\20\uffff\1\u00dd\26\uffff\1\u0202",
            "\1\u00dc\12\uffff\1\u0203\4\uffff\1\u0204\20\uffff\1\u00dd",
            "\1\u00dc\12\uffff\1\u0205\4\uffff\1\u0206\20\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u0207\20\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u0208\20\uffff\1\u00dd",
            "\2\u0209",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd\26\uffff\1\u020a",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u01f8\3\uffff\1\u00dc\1\uffff\1\u020b\35\uffff\1\u01f9\1"+
            "\u00dd\2\uffff\1\u01f7",
            "\1\u00dc\17\uffff\1\u020c\20\uffff\1\u00dd",
            "\1\u01f8\3\uffff\1\u00dc\1\uffff\1\u01f6\15\uffff\1\u020d\17"+
            "\uffff\1\u01f9\1\u00dd\2\uffff\1\u01f7",
            "\1\u020e\6\uffff\1\u020e",
            "\1\u020f",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093\6\uffff\1\u0210"+
            "\51\uffff\1\u0092",
            "\1\u0145\3\uffff\1\u0211",
            "\1\u0145\3\uffff\1\u0211",
            "\1\u0147\3\uffff\1\u0212",
            "\1\u0147\3\uffff\1\u0212",
            "\1\u0149\3\uffff\1\u0213",
            "\1\u0149\3\uffff\1\u0213",
            "\1\u014c\3\uffff\1\u0214",
            "\1\u014c\3\uffff\1\u0214",
            "\1\156\110\uffff\1\156\44\uffff\1\u00ff\13\uffff\1\156",
            "\1\u0215",
            "\1\u0099\6\uffff\1\u0099\4\uffff\1\u0099\1\uffff\1\u0099\2"+
            "\uffff\1\u0099\5\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0216\10\uffff\1\u0099\4\uffff\1\u00b1\21\uffff\1\u0094"+
            "\1\uffff\1\u0096\106\uffff\1\u0093",
            "\1\u0096",
            "\1\u0096",
            "\1\u0154",
            "\1\u0217\6\uffff\1\u0217\171\uffff\1\u0218",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0219\6\uffff\1\u0219\171\uffff\1\u021a",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u021b\6\uffff\1\u021b\171\uffff\1\u021c",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u021d\6\uffff\1\u021d\171\uffff\1\u021e",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\6\47\uffff\1\6\40\uffff\1\6\33\uffff\1\52\13\uffff\1\6",
            "\1\u021f",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u0220",
            "\1\u00dc\17\uffff\1\u0221\20\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd\172\uffff\1\u0124",
            "\1\u00dc\12\uffff\1\u0222\25\uffff\1\u00dd",
            "\1\u0223\6\uffff\1\u0223\171\uffff\1\u0224",
            "\1\u0225\6\uffff\1\u0225\171\uffff\1\u0224",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u01d9",
            "\1\u01d9",
            "\1\u00dc\40\uffff\1\u00dd\26\uffff\1\u012d",
            "\1\u0227\1\uffff\1\u00dc\1\uffff\1\u0226\36\uffff\1\u00dd",
            "\1\u0227\3\uffff\1\u0226",
            "\1\u01de",
            "\1\u01de",
            "\1\u00dc\40\uffff\1\u00dd\26\uffff\1\u012f",
            "\1\u0229\1\uffff\1\u00dc\1\uffff\1\u0228\36\uffff\1\u00dd",
            "\1\u0229\3\uffff\1\u0228",
            "\1\u01e3",
            "\1\u01e3",
            "\1\u00dc\40\uffff\1\u00dd\26\uffff\1\u0131",
            "\1\u022b\1\uffff\1\u00dc\1\uffff\1\u022a\36\uffff\1\u00dd",
            "\1\u022b\3\uffff\1\u022a",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u022c",
            "\1\u022e\1\uffff\1\u00dc\1\uffff\1\u022d\36\uffff\1\u00dd",
            "\1\u022e\3\uffff\1\u022d",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u022f",
            "\1\u00dc\17\uffff\1\u01f1\20\uffff\1\u00dd",
            "\1\u0230",
            "\1\u0231",
            "\1\u0232\177\uffff\1\u0233",
            "\1\u0234",
            "\1\u0235",
            "\1\u0236\6\uffff\1\u0236\171\uffff\1\u0237",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u0238\6\uffff\1\u0238\171\uffff\1\u0239",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u023a",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\17\uffff\1\u01fd\20\uffff\1\u00dd\26\uffff\1\u01fe",
            "\1\u023b",
            "\1\u023c",
            "\1\u023d",
            "\1\u023e",
            "\1\u023f",
            "\1\u0240",
            "\1\u00dc\17\uffff\1\u0204\20\uffff\1\u00dd",
            "\1\u0241",
            "\1\u00dc\17\uffff\1\u0206\20\uffff\1\u00dd",
            "\1\u0242",
            "\1\u0243",
            "\1\u0244",
            "\1\u00dc\12\uffff\1\u0245\4\uffff\1\u0246\20\uffff\1\u00dd",
            "\1\u0247",
            "\1\u0248\6\uffff\1\u0248\171\uffff\1\u0237",
            "\1\u0249",
            "\1\u024a",
            "\1\6\7\uffff\1\u01b0\15\uffff\1\u00e0\21\uffff\1\6\40\uffff"+
            "\1\6\33\uffff\1\u00e1\13\uffff\1\6",
            "\1\156\110\uffff\1\156\6\uffff\1\u0210\35\uffff\1\u00ff\13"+
            "\uffff\1\156",
            "",
            "\1\u024b\6\uffff\1\u024b\171\uffff\1\u024c",
            "\1\u024d\6\uffff\1\u024d\171\uffff\1\u024e",
            "\1\u024f\6\uffff\1\u024f\171\uffff\1\u0250",
            "\1\u0251\6\uffff\1\u0251\171\uffff\1\u0252",
            "\1\u0253",
            "\1\u0254\6\uffff\1\u0254",
            "\1\u01c3\3\uffff\1\u0255",
            "\1\u01c3\3\uffff\1\u0255",
            "\1\u01c5\3\uffff\1\u0256",
            "\1\u01c5\3\uffff\1\u0256",
            "\1\u01c7\3\uffff\1\u0257",
            "\1\u01c7\3\uffff\1\u0257",
            "\1\u01ca\3\uffff\1\u0258",
            "\1\u01ca\3\uffff\1\u0258",
            "\1\u01cd",
            "\1\u0175",
            "\1\u0259",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\1\uffff\1\u025a\15\uffff\1\u013c\20\uffff\1\u00dd"+
            "\2\uffff\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u025b\6\uffff\1\u025b\171\uffff\1\u025c",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u025d\6\uffff\1\u025d\171\uffff\1\u025e",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u025f\6\uffff\1\u025f\171\uffff\1\u0260",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u0261\6\uffff\1\u0261\171\uffff\1\u0262",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u0263\40\uffff\1\u0264",
            "\1\u0265",
            "\1\u0266",
            "\1\u0267",
            "\1\u0268",
            "\1\u0269",
            "\1\u026a",
            "\1\u01f8\3\uffff\1\u00dc\1\uffff\1\u026b\15\uffff\1\u020d\17"+
            "\uffff\1\u01f9\1\u00dd\2\uffff\1\u01f7",
            "\1\u01f8\5\uffff\1\u026c\35\uffff\1\u01f9\3\uffff\1\u01f7",
            "\1\u01f9",
            "\1\u01f9",
            "\1\u026d",
            "\1\u026e\25\uffff\1\u0270\25\uffff\1\u026f",
            "\1\u0271\6\uffff\1\u0271\171\uffff\1\u0272",
            "\1\u0273\25\uffff\1\u0275\25\uffff\1\u0274",
            "\1\u0276\6\uffff\1\u0276\171\uffff\1\u0277",
            "\1\u0278\25\uffff\1\u027a\25\uffff\1\u0279",
            "\1\u027b\6\uffff\1\u027b\171\uffff\1\u027c",
            "\1\u027d",
            "\1\u027e",
            "\1\u027f",
            "\1\u0280",
            "\1\u00dc\17\uffff\1\u0246\20\uffff\1\u00dd",
            "\1\u0281",
            "\1\u0282\6\uffff\1\u0282\171\uffff\1\u0283",
            "\1\u01f8\5\uffff\1\u026c\35\uffff\1\u01f9\3\uffff\1\u01f7",
            "\1\u0284",
            "\1\u0285",
            "\1\u0145",
            "\1\u0145",
            "\1\u0147",
            "\1\u0147",
            "\1\u0149",
            "\1\u0149",
            "\1\u014c",
            "\1\u014c",
            "\1\u0099\26\uffff\1\u0094\110\uffff\1\u0093",
            "\1\u0216\10\uffff\1\u0099\4\uffff\1\u00b1\21\uffff\1\u0094"+
            "\110\uffff\1\u0093",
            "\1\u0286\6\uffff\1\u0286\171\uffff\1\u0287",
            "\1\u0288\6\uffff\1\u0288\171\uffff\1\u0289",
            "\1\u028a\6\uffff\1\u028a\171\uffff\1\u028b",
            "\1\u028c\6\uffff\1\u028c\171\uffff\1\u028d",
            "\1\u028e",
            "\1\u028f\6\uffff\1\u028f",
            "\1\u0227\3\uffff\1\u0290",
            "\1\u0227\3\uffff\1\u0290",
            "\1\u0229\3\uffff\1\u0291",
            "\1\u0229\3\uffff\1\u0291",
            "\1\u022b\3\uffff\1\u0292",
            "\1\u022b\3\uffff\1\u0292",
            "\1\u022e\3\uffff\1\u0293",
            "\1\u022e\3\uffff\1\u0293",
            "\1\u0294",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u0295",
            "\1\u00dc\17\uffff\1\u0296\20\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd\172\uffff\1\u01f5",
            "\1\u00dc\12\uffff\1\u0297\25\uffff\1\u00dd",
            "\1\u0298\6\uffff\1\u0298\171\uffff\1\u0299",
            "\1\u029a\6\uffff\1\u029a\171\uffff\1\u0299",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u0270",
            "\1\u0270",
            "\1\u00dc\40\uffff\1\u00dd\26\uffff\1\u01fe",
            "\1\u029c\1\uffff\1\u00dc\1\uffff\1\u029b\36\uffff\1\u00dd",
            "\1\u029c\3\uffff\1\u029b",
            "\1\u0275",
            "\1\u0275",
            "\1\u00dc\40\uffff\1\u00dd\26\uffff\1\u0200",
            "\1\u029e\1\uffff\1\u00dc\1\uffff\1\u029d\36\uffff\1\u00dd",
            "\1\u029e\3\uffff\1\u029d",
            "\1\u027a",
            "\1\u027a",
            "\1\u00dc\40\uffff\1\u00dd\26\uffff\1\u0202",
            "\1\u02a0\1\uffff\1\u00dc\1\uffff\1\u029f\36\uffff\1\u00dd",
            "\1\u02a0\3\uffff\1\u029f",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u02a1",
            "\1\u02a3\1\uffff\1\u00dc\1\uffff\1\u02a2\36\uffff\1\u00dd",
            "\1\u02a3\3\uffff\1\u02a2",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u01c3",
            "\1\u01c3",
            "\1\u01c5",
            "\1\u01c5",
            "\1\u01c7",
            "\1\u01c7",
            "\1\u01ca",
            "\1\u01ca",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\1\uffff\1\u025a\15\uffff\1\u013c\20\uffff\1\u00dd",
            "\1\u02a4\6\uffff\1\u02a4\171\uffff\1\u02a5",
            "\1\u02a6\6\uffff\1\u02a6\171\uffff\1\u02a7",
            "\1\u02a8\6\uffff\1\u02a8\171\uffff\1\u02a9",
            "\1\u02aa\6\uffff\1\u02aa\171\uffff\1\u02ab",
            "\1\u0264",
            "\1\u0233",
            "\1\u02ac",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\1\uffff\1\u02ad\15\uffff\1\u020d\20\uffff\1\u00dd"+
            "\2\uffff\1\u01f7",
            "\1\u01f7",
            "\1\u01f7",
            "\1\u02ae\6\uffff\1\u02ae\171\uffff\1\u02af",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u02b0\6\uffff\1\u02b0\171\uffff\1\u02b1",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u02b2\6\uffff\1\u02b2\171\uffff\1\u02b3",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u02b4\6\uffff\1\u02b4\171\uffff\1\u02b5",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u0227",
            "\1\u0227",
            "\1\u0229",
            "\1\u0229",
            "\1\u022b",
            "\1\u022b",
            "\1\u022e",
            "\1\u022e",
            "\1\u02b6",
            "\1\u02b7\6\uffff\1\u02b7",
            "\1\u029c\3\uffff\1\u02b8",
            "\1\u029c\3\uffff\1\u02b8",
            "\1\u029e\3\uffff\1\u02b9",
            "\1\u029e\3\uffff\1\u02b9",
            "\1\u02a0\3\uffff\1\u02ba",
            "\1\u02a0\3\uffff\1\u02ba",
            "\1\u02a3\3\uffff\1\u02bb",
            "\1\u02a3\3\uffff\1\u02bb",
            "\1\u00dc\40\uffff\1\u00dd",
            "\1\u00dc\1\uffff\1\u02ad\15\uffff\1\u020d\20\uffff\1\u00dd",
            "\1\u02bc\6\uffff\1\u02bc\171\uffff\1\u02bd",
            "\1\u02be\6\uffff\1\u02be\171\uffff\1\u02bf",
            "\1\u02c0\6\uffff\1\u02c0\171\uffff\1\u02c1",
            "\1\u02c2\6\uffff\1\u02c2\171\uffff\1\u02c3",
            "\1\u029c",
            "\1\u029c",
            "\1\u029e",
            "\1\u029e",
            "\1\u02a0",
            "\1\u02a0",
            "\1\u02a3",
            "\1\u02a3"
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "73:1: package_obj_spec : ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_148 = input.LA(1);

                         
                        int index10_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((input.LT(1).getText().equalsIgnoreCase("TYPE"))&&(input.LT(1).getText().equalsIgnoreCase("TYPE")))&&synpred13_PLSQL3())) ) {s = 110;}

                        else if ( (((synpred14_PLSQL3()&&synpred14_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("SUBTYPE")))) ) {s = 153;}

                         
                        input.seek(index10_148);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA19_eotS =
        "\u00c3\uffff";
    static final String DFA19_eofS =
        "\u00c3\uffff";
    static final String DFA19_minS =
        "\1\17\2\15\1\136\4\uffff\20\5\1\26\7\5\1\102\11\5\1\uffff\1\26\1"+
        "\uffff\1\42\1\5\2\42\1\33\1\17\1\26\1\17\1\5\1\17\1\5\1\17\1\42"+
        "\2\5\1\42\1\u0094\1\42\1\u0094\1\42\1\u0094\1\5\1\42\1\5\3\42\1"+
        "\5\1\u0094\1\17\1\42\1\17\1\136\1\13\2\54\1\42\1\26\1\54\1\uffff"+
        "\1\26\1\5\1\7\2\53\1\uffff\1\7\1\uffff\1\54\1\26\1\17\1\26\1\17"+
        "\1\26\1\17\4\54\1\5\1\42\1\17\1\7\2\54\1\42\3\5\1\54\3\5\1\17\1"+
        "\42\2\17\1\33\1\42\1\5\2\54\2\5\1\11\2\54\2\5\1\11\2\54\2\5\1\11"+
        "\4\5\1\54\1\5\1\11\2\5\1\54\1\u009b\1\42\2\5\2\57\1\42\1\54\1\17"+
        "\1\5\1\17\1\5\1\17\2\5\1\17\1\5\1\54\1\17\1\54\1\26\10\11\2\5\1"+
        "\175\1\uffff\4\17\10\11";
    static final String DFA19_maxS =
        "\1\u0087\2\u00a3\1\u0087\4\uffff\6\166\1\u0089\3\166\1\u00a7\5\166"+
        "\1\26\7\166\1\103\11\166\1\uffff\1\26\1\uffff\1\42\1\166\2\42\1"+
        "\u009b\1\42\1\26\1\u0090\1\166\1\u0090\1\166\1\u00a3\1\42\2\166"+
        "\1\42\1\u0094\1\42\1\u0094\1\42\1\u0094\1\166\1\42\1\166\3\42\1"+
        "\166\1\u0094\1\u0090\2\42\1\u0087\3\54\1\42\1\26\1\54\1\uffff\1"+
        "\26\1\166\1\57\2\53\1\uffff\1\u00a7\1\uffff\1\54\1\102\1\u0090\1"+
        "\102\1\u0090\1\102\1\u0090\4\54\1\166\1\42\1\u0090\1\57\2\54\1\42"+
        "\3\166\1\54\1\166\1\u00a7\1\166\1\u0090\1\42\1\u00a3\1\u0090\1\u009b"+
        "\1\42\1\166\2\54\2\166\1\15\2\54\2\166\1\15\2\54\2\166\1\15\4\166"+
        "\1\54\1\166\1\15\2\166\1\54\1\u009b\1\42\2\166\2\57\1\42\1\54\1"+
        "\u0090\1\166\1\u0090\1\166\1\u0090\2\166\1\u0090\1\166\1\54\1\26"+
        "\1\54\1\u00a7\10\15\2\166\1\u009b\1\uffff\4\u0090\10\11";
    static final String DFA19_acceptS =
        "\4\uffff\1\10\1\11\1\12\1\1\42\uffff\1\4\1\uffff\1\2\47\uffff\1"+
        "\3\5\uffff\1\6\1\uffff\1\5\131\uffff\1\7\14\uffff";
    static final String DFA19_specialS =
        "\u00c3\uffff}>";
    static final String[] DFA19_transitionS = {
            "\1\2\6\uffff\1\1\62\uffff\1\3\24\uffff\1\5\46\uffff\1\6\1\uffff"+
            "\1\4",
            "\1\52\1\uffff\1\51\6\uffff\1\22\43\uffff\1\46\1\12\1\11\1\10"+
            "\1\43\1\20\2\uffff\1\31\1\34\1\44\3\uffff\1\7\1\uffff\1\21\2"+
            "\15\5\uffff\1\30\3\uffff\1\52\4\uffff\1\26\12\uffff\1\24\1\23"+
            "\5\uffff\1\16\2\uffff\1\41\1\uffff\1\40\1\13\1\35\1\45\3\uffff"+
            "\2\15\1\36\1\37\6\uffff\1\42\1\14\4\uffff\1\17\1\27\5\uffff"+
            "\1\47\5\uffff\1\25\11\uffff\1\50\1\uffff\1\32\1\33",
            "\1\52\1\uffff\1\7\6\uffff\1\7\43\uffff\6\7\2\uffff\3\7\3\uffff"+
            "\1\7\1\uffff\3\7\5\uffff\1\7\3\uffff\1\52\4\uffff\1\7\12\uffff"+
            "\2\7\5\uffff\1\7\2\uffff\1\7\1\uffff\4\7\3\uffff\4\7\6\uffff"+
            "\2\7\4\uffff\2\7\5\uffff\1\7\5\uffff\1\7\11\uffff\1\7\1\uffff"+
            "\2\7",
            "\1\5\40\uffff\1\53\7\uffff\1\4",
            "",
            "",
            "",
            "",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\55\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\25\uffff\1\57\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7\22\uffff\1\56",
            "\1\7\25\uffff\1\60\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\1\uffff\1\66\5\uffff\1\64\10\uffff\1\61\4\uffff\1\62\17"+
            "\uffff\1\67\1\uffff\1\7\1\uffff\1\65\36\uffff\1\7\33\uffff\1"+
            "\70\13\uffff\1\7\60\uffff\1\63",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\71\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\72",
            "\1\7\20\uffff\1\73\4\uffff\1\74\21\uffff\1\7\25\uffff\1\75"+
            "\12\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\76\21\uffff\1\7\25\uffff\1\77\12\uffff\1\7"+
            "\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\100\21\uffff\1\7\25\uffff\1\101\12\uffff\1"+
            "\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\20\uffff\1\102\4\uffff\1\103\21\uffff\1\7\40\uffff\1\7"+
            "\33\uffff\1\54\13\uffff\1\7",
            "\1\7\20\uffff\1\104\4\uffff\1\105\21\uffff\1\7\40\uffff\1\7"+
            "\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\106\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\25\uffff\1\107\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\2\110",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\25\uffff\1\111\12\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\1\uffff\1\66\5\uffff\1\112\35\uffff\1\67\1\uffff\1\7\1"+
            "\uffff\1\65\36\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\113\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\1\uffff\1\66\5\uffff\1\64\15\uffff\1\114\17\uffff\1\67"+
            "\1\uffff\1\7\1\uffff\1\65\36\uffff\1\7\33\uffff\1\70\13\uffff"+
            "\1\7",
            "",
            "\1\115",
            "",
            "\1\116",
            "\1\7\25\uffff\1\57\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\117",
            "\1\120",
            "\1\121\177\uffff\1\122",
            "\1\124\6\uffff\1\124\13\uffff\1\123",
            "\1\125",
            "\1\126\6\uffff\1\126\171\uffff\1\127",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\130\6\uffff\1\130\171\uffff\1\131",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\54\6\uffff\1\133\43\uffff\6\54\2\uffff\3\54\5\uffff\3\54"+
            "\5\uffff\1\54\10\uffff\1\54\12\uffff\2\54\5\uffff\1\54\2\uffff"+
            "\1\54\1\uffff\4\54\3\uffff\4\54\6\uffff\2\54\4\uffff\2\54\1"+
            "\134\4\uffff\1\54\2\uffff\1\124\2\uffff\1\54\2\uffff\1\132\6"+
            "\uffff\1\54\1\uffff\2\54",
            "\1\135",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\74\21\uffff\1\7\25\uffff\1\75\12\uffff\1\7"+
            "\33\uffff\1\54\13\uffff\1\7",
            "\1\136",
            "\1\137",
            "\1\140",
            "\1\141",
            "\1\142",
            "\1\143",
            "\1\7\25\uffff\1\103\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\144",
            "\1\7\25\uffff\1\105\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\145",
            "\1\146",
            "\1\147",
            "\1\7\20\uffff\1\150\4\uffff\1\151\21\uffff\1\7\40\uffff\1\7"+
            "\33\uffff\1\54\13\uffff\1\7",
            "\1\152",
            "\1\153\6\uffff\1\153\171\uffff\1\127",
            "\1\154",
            "\1\124\6\uffff\1\124\13\uffff\1\155",
            "\1\5\50\uffff\1\4",
            "\1\156\40\uffff\1\157",
            "\1\160",
            "\1\161",
            "\1\162",
            "\1\163",
            "\1\164",
            "",
            "\1\165",
            "\1\7\1\uffff\1\66\5\uffff\1\166\15\uffff\1\167\17\uffff\1\67"+
            "\1\uffff\1\7\1\uffff\1\65\36\uffff\1\7\33\uffff\1\170\13\uffff"+
            "\1\7",
            "\1\66\5\uffff\1\171\35\uffff\1\67\3\uffff\1\65",
            "\1\67",
            "\1\67",
            "",
            "\1\54\5\uffff\1\54\10\uffff\1\172\4\uffff\1\173\17\uffff\1"+
            "\54\1\uffff\1\54\1\uffff\1\54\106\uffff\1\54\60\uffff\1\54",
            "",
            "\1\174",
            "\1\175\25\uffff\1\177\25\uffff\1\176",
            "\1\u0080\6\uffff\1\u0080\171\uffff\1\u0081",
            "\1\u0082\25\uffff\1\u0084\25\uffff\1\u0083",
            "\1\u0085\6\uffff\1\u0085\171\uffff\1\u0086",
            "\1\u0087\25\uffff\1\u0089\25\uffff\1\u0088",
            "\1\u008a\6\uffff\1\u008a\171\uffff\1\u008b",
            "\1\u008c",
            "\1\u008d",
            "\1\u008e",
            "\1\u008f",
            "\1\7\25\uffff\1\151\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\u0090",
            "\1\u0091\6\uffff\1\u0091\171\uffff\1\u0092",
            "\1\66\5\uffff\1\171\35\uffff\1\67\3\uffff\1\65",
            "\1\u0093",
            "\1\u0094",
            "\1\u0095",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0096",
            "\1\7\25\uffff\1\u0097\21\uffff\1\7\40\uffff\1\7\33\uffff\1"+
            "\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7\60"+
            "\uffff\1\63",
            "\1\7\20\uffff\1\u0098\26\uffff\1\7\40\uffff\1\7\33\uffff\1"+
            "\54\13\uffff\1\7",
            "\1\u0099\6\uffff\1\u0099\171\uffff\1\u009a",
            "\1\155",
            "\1\54\6\uffff\1\133\43\uffff\6\54\2\uffff\3\54\5\uffff\3\54"+
            "\5\uffff\1\54\10\uffff\1\54\12\uffff\2\54\5\uffff\1\54\2\uffff"+
            "\1\54\1\uffff\4\54\3\uffff\4\54\6\uffff\2\54\4\uffff\2\54\1"+
            "\134\4\uffff\1\54\5\uffff\1\54\2\uffff\1\132\6\uffff\1\54\1"+
            "\uffff\2\54",
            "\1\u009b\6\uffff\1\u009b\171\uffff\1\u009a",
            "\1\u009c\1\uffff\1\54\4\uffff\1\54\1\uffff\1\54\2\uffff\1\54"+
            "\163\uffff\1\54",
            "\1\u009d",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\177",
            "\1\177",
            "\1\7\47\uffff\1\7\25\uffff\1\75\12\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\3\uffff\1\u009f\3\uffff\1\u009e\37\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u009f\3\uffff\1\u009e",
            "\1\u0084",
            "\1\u0084",
            "\1\7\47\uffff\1\7\25\uffff\1\77\12\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\3\uffff\1\u00a1\3\uffff\1\u00a0\37\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00a1\3\uffff\1\u00a0",
            "\1\u0089",
            "\1\u0089",
            "\1\7\47\uffff\1\7\25\uffff\1\101\12\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\3\uffff\1\u00a3\3\uffff\1\u00a2\37\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00a3\3\uffff\1\u00a2",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00a4",
            "\1\7\3\uffff\1\u00a6\3\uffff\1\u00a5\37\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00a6\3\uffff\1\u00a5",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\157",
            "\1\122",
            "\1\u00a7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\7\uffff\1\u00a8\15\uffff\1\167\21\uffff\1\7\1\uffff\1"+
            "\65\36\uffff\1\7\33\uffff\1\170\13\uffff\1\7",
            "\1\65",
            "\1\65",
            "\1\u00a9",
            "\1\u00aa",
            "\1\u00ab\6\uffff\1\u00ab\171\uffff\1\u00ac",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00ad\6\uffff\1\u00ad\171\uffff\1\u00ae",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00af\6\uffff\1\u00af\171\uffff\1\u00b0",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00b1\6\uffff\1\u00b1\171\uffff\1\u00b2",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00b3",
            "\1\u00b4\6\uffff\1\u00b4",
            "\1\u00b5",
            "\1\54\26\uffff\1\54\110\uffff\1\54\6\uffff\1\u00b6\51\uffff"+
            "\1\54",
            "\1\u009f\3\uffff\1\u00b7",
            "\1\u009f\3\uffff\1\u00b7",
            "\1\u00a1\3\uffff\1\u00b8",
            "\1\u00a1\3\uffff\1\u00b8",
            "\1\u00a3\3\uffff\1\u00b9",
            "\1\u00a3\3\uffff\1\u00b9",
            "\1\u00a6\3\uffff\1\u00ba",
            "\1\u00a6\3\uffff\1\u00ba",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\7\uffff\1\u00a8\15\uffff\1\167\21\uffff\1\7\40\uffff\1"+
            "\7\33\uffff\1\170\13\uffff\1\7",
            "\1\u00b6\35\uffff\1\54",
            "",
            "\1\u00bb\6\uffff\1\u00bb\171\uffff\1\u00bc",
            "\1\u00bd\6\uffff\1\u00bd\171\uffff\1\u00be",
            "\1\u00bf\6\uffff\1\u00bf\171\uffff\1\u00c0",
            "\1\u00c1\6\uffff\1\u00c1\171\uffff\1\u00c2",
            "\1\u009f",
            "\1\u009f",
            "\1\u00a1",
            "\1\u00a1",
            "\1\u00a3",
            "\1\u00a3",
            "\1\u00a6",
            "\1\u00a6"
    };

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "107:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration );";
        }
    }
    static final String DFA29_eotS =
        "\u0170\uffff";
    static final String DFA29_eofS =
        "\u0170\uffff";
    static final String DFA29_minS =
        "\1\17\2\15\1\136\4\uffff\20\5\1\26\7\5\1\102\11\5\1\uffff\1\26\1"+
        "\17\1\42\1\5\2\42\1\33\1\17\1\26\1\17\1\5\1\17\1\5\1\17\1\42\2\5"+
        "\1\42\1\u0094\1\42\1\u0094\1\42\1\u0094\1\5\1\42\1\5\3\42\1\5\1"+
        "\u0094\1\17\1\42\1\17\1\136\12\26\1\7\15\26\1\102\6\26\1\7\1\26"+
        "\1\7\1\uffff\1\13\2\54\1\42\1\26\1\54\1\uffff\1\26\1\5\1\7\2\53"+
        "\1\uffff\1\7\1\uffff\1\54\1\26\1\17\1\26\1\17\1\26\1\17\4\54\1\5"+
        "\1\42\1\17\1\7\2\54\1\170\1\uffff\1\0\1\42\1\26\2\42\1\7\1\17\1"+
        "\26\1\17\1\26\1\17\1\26\1\42\2\26\1\42\1\u0094\1\42\1\u0094\1\42"+
        "\1\u0094\1\26\1\42\1\26\3\42\1\26\1\u0094\1\17\3\42\3\5\1\54\3\5"+
        "\1\17\1\42\2\17\1\7\1\17\1\5\2\54\2\5\1\11\2\54\2\5\1\11\2\54\2"+
        "\5\1\11\4\5\1\54\1\5\1\11\2\5\1\55\1\13\2\54\1\42\1\26\1\6\1\26"+
        "\2\7\2\53\1\54\1\26\1\17\1\26\1\17\1\26\1\17\4\54\1\26\1\42\1\17"+
        "\1\7\3\54\1\u009b\1\42\2\5\2\57\1\42\1\6\1\17\1\5\1\17\1\5\1\17"+
        "\2\5\1\17\1\5\1\42\3\26\1\54\3\26\2\17\1\26\2\54\1\26\2\11\2\54"+
        "\1\26\2\11\2\54\1\26\2\11\4\26\1\54\2\11\2\26\1\54\1\17\1\54\1\26"+
        "\10\11\1\54\1\55\1\42\1\26\1\15\2\57\1\17\1\26\1\17\1\26\1\17\2"+
        "\26\1\17\1\26\2\5\1\55\1\uffff\4\17\1\54\1\17\20\11\1\26\1\15\4"+
        "\17\10\11";
    static final String DFA29_maxS =
        "\1\u0087\2\u00a3\1\u0087\4\uffff\6\166\1\u0089\3\166\1\u00a7\5\166"+
        "\1\26\7\166\1\103\11\166\1\uffff\1\26\1\u00a3\1\42\1\166\2\42\1"+
        "\u009b\1\42\1\26\1\u0090\1\166\1\u0090\1\166\1\u00a3\1\42\2\166"+
        "\1\42\1\u0094\1\42\1\u0094\1\42\1\u0094\1\166\1\42\1\166\3\42\1"+
        "\166\1\u0094\1\u0090\2\42\1\u0087\6\166\1\u0089\3\166\1\u00a7\5"+
        "\166\1\26\7\166\1\103\11\166\1\uffff\3\54\1\42\1\26\1\54\1\uffff"+
        "\1\26\1\166\1\57\2\53\1\uffff\1\u00a7\1\uffff\1\54\1\102\1\u0090"+
        "\1\102\1\u0090\1\102\1\u0090\4\54\1\166\1\42\1\u0090\1\57\2\54\1"+
        "\170\1\uffff\1\0\1\42\1\166\2\42\1\u00a7\1\u009c\1\26\1\u0090\1"+
        "\166\1\u0090\1\166\1\42\2\166\1\42\1\u0094\1\42\1\u0094\1\42\1\u0094"+
        "\1\166\1\42\1\166\3\42\1\166\1\u0094\1\u0090\3\42\3\166\1\54\1\166"+
        "\1\u00a7\1\166\1\u0090\1\42\1\u00a3\1\u0090\1\u00a7\1\u009c\1\166"+
        "\2\54\2\166\1\15\2\54\2\166\1\15\2\54\2\166\1\15\4\166\1\54\1\166"+
        "\1\15\2\166\1\55\3\54\1\42\1\26\1\177\1\26\1\166\1\57\2\53\1\54"+
        "\1\102\1\u0090\1\102\1\u0090\1\102\1\u0090\4\54\1\166\1\42\1\u0090"+
        "\1\57\3\54\1\u009b\1\42\2\166\2\57\1\42\1\177\1\u0090\1\166\1\u0090"+
        "\1\166\1\u0090\2\166\1\u0090\1\166\1\42\3\166\1\54\1\166\1\u00a7"+
        "\1\166\2\u0090\1\166\2\54\2\166\1\15\2\54\2\166\1\15\2\54\2\166"+
        "\1\15\4\166\1\54\1\166\1\15\2\166\1\54\1\26\1\54\1\u00a7\10\15\1"+
        "\54\1\u00a7\1\42\2\166\2\57\1\u0090\1\166\1\u0090\1\166\1\u0090"+
        "\2\166\1\u0090\3\166\1\u00a7\1\uffff\4\u0090\1\54\1\26\10\15\10"+
        "\11\2\166\4\u0090\10\11";
    static final String DFA29_acceptS =
        "\4\uffff\1\10\1\11\1\13\1\1\42\uffff\1\4\105\uffff\1\12\6\uffff"+
        "\1\3\5\uffff\1\6\1\uffff\1\5\22\uffff\1\2\u00b8\uffff\1\7\44\uffff";
    static final String DFA29_specialS =
        "\u0093\uffff\1\0\u00dc\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\2\6\uffff\1\1\62\uffff\1\3\24\uffff\1\5\46\uffff\1\6\1\uffff"+
            "\1\4",
            "\1\52\1\uffff\1\51\6\uffff\1\22\43\uffff\1\46\1\12\1\11\1\10"+
            "\1\43\1\20\2\uffff\1\31\1\34\1\44\3\uffff\1\7\1\uffff\1\21\2"+
            "\15\5\uffff\1\30\3\uffff\1\52\4\uffff\1\26\12\uffff\1\24\1\23"+
            "\5\uffff\1\16\2\uffff\1\41\1\uffff\1\40\1\13\1\35\1\45\3\uffff"+
            "\2\15\1\36\1\37\6\uffff\1\42\1\14\4\uffff\1\17\1\27\5\uffff"+
            "\1\47\5\uffff\1\25\11\uffff\1\50\1\uffff\1\32\1\33",
            "\1\52\1\uffff\1\7\6\uffff\1\7\43\uffff\6\7\2\uffff\3\7\3\uffff"+
            "\1\7\1\uffff\3\7\5\uffff\1\7\3\uffff\1\52\4\uffff\1\7\12\uffff"+
            "\2\7\5\uffff\1\7\2\uffff\1\7\1\uffff\4\7\3\uffff\4\7\6\uffff"+
            "\2\7\4\uffff\2\7\5\uffff\1\7\5\uffff\1\7\11\uffff\1\7\1\uffff"+
            "\2\7",
            "\1\5\40\uffff\1\53\7\uffff\1\4",
            "",
            "",
            "",
            "",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\55\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\25\uffff\1\57\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7\22\uffff\1\56",
            "\1\7\25\uffff\1\60\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\1\uffff\1\66\5\uffff\1\64\10\uffff\1\61\4\uffff\1\62\17"+
            "\uffff\1\67\1\uffff\1\7\1\uffff\1\65\36\uffff\1\7\33\uffff\1"+
            "\70\13\uffff\1\7\60\uffff\1\63",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\71\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\72",
            "\1\7\20\uffff\1\73\4\uffff\1\74\21\uffff\1\7\25\uffff\1\75"+
            "\12\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\76\21\uffff\1\7\25\uffff\1\77\12\uffff\1\7"+
            "\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\100\21\uffff\1\7\25\uffff\1\101\12\uffff\1"+
            "\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\20\uffff\1\102\4\uffff\1\103\21\uffff\1\7\40\uffff\1\7"+
            "\33\uffff\1\54\13\uffff\1\7",
            "\1\7\20\uffff\1\104\4\uffff\1\105\21\uffff\1\7\40\uffff\1\7"+
            "\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\106\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\25\uffff\1\107\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\2\110",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\25\uffff\1\111\12\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\1\uffff\1\66\5\uffff\1\112\35\uffff\1\67\1\uffff\1\7\1"+
            "\uffff\1\65\36\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\113\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\1\uffff\1\66\5\uffff\1\64\15\uffff\1\114\17\uffff\1\67"+
            "\1\uffff\1\7\1\uffff\1\65\36\uffff\1\7\33\uffff\1\70\13\uffff"+
            "\1\7",
            "",
            "\1\115",
            "\1\157\6\uffff\1\130\4\uffff\1\160\36\uffff\1\154\1\120\1\117"+
            "\1\116\1\151\1\126\2\uffff\1\137\1\142\1\152\5\uffff\1\127\2"+
            "\123\5\uffff\1\136\10\uffff\1\134\12\uffff\1\132\1\131\5\uffff"+
            "\1\124\2\uffff\1\147\1\uffff\1\146\1\121\1\143\1\153\3\uffff"+
            "\2\123\1\144\1\145\6\uffff\1\150\1\122\4\uffff\1\125\1\135\5"+
            "\uffff\1\155\5\uffff\1\133\11\uffff\1\156\1\uffff\1\140\1\141",
            "\1\161",
            "\1\7\25\uffff\1\57\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\162",
            "\1\163",
            "\1\164\177\uffff\1\165",
            "\1\167\6\uffff\1\167\13\uffff\1\166",
            "\1\170",
            "\1\171\6\uffff\1\171\171\uffff\1\172",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\173\6\uffff\1\173\171\uffff\1\174",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\157\6\uffff\1\176\4\uffff\1\160\36\uffff\1\154\1\120\1\117"+
            "\1\116\1\151\1\126\2\uffff\1\137\1\142\1\152\5\uffff\1\127\2"+
            "\123\5\uffff\1\136\10\uffff\1\134\12\uffff\1\132\1\131\5\uffff"+
            "\1\124\2\uffff\1\147\1\uffff\1\146\1\121\1\143\1\153\3\uffff"+
            "\2\123\1\144\1\145\6\uffff\1\150\1\122\4\uffff\1\125\1\135\1"+
            "\177\4\uffff\1\155\2\uffff\1\167\2\uffff\1\133\2\uffff\1\175"+
            "\6\uffff\1\156\1\uffff\1\140\1\141",
            "\1\u0080",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\25\uffff\1\74\21\uffff\1\7\25\uffff\1\75\12\uffff\1\7"+
            "\33\uffff\1\54\13\uffff\1\7",
            "\1\u0081",
            "\1\u0082",
            "\1\u0083",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\7\25\uffff\1\103\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\u0087",
            "\1\7\25\uffff\1\105\21\uffff\1\7\40\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\u0088",
            "\1\u0089",
            "\1\u008a",
            "\1\7\20\uffff\1\u008b\4\uffff\1\u008c\21\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u008d",
            "\1\u008e\6\uffff\1\u008e\171\uffff\1\172",
            "\1\u008f",
            "\1\167\6\uffff\1\167\13\uffff\1\u0090",
            "\1\5\50\uffff\1\4",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\4\uffff\1\u0094\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\4\uffff\1\u0096\21\uffff\1\u0093\110\uffff\1\u0091"+
            "\22\uffff\1\u0095",
            "\1\u0092\4\uffff\1\u0097\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u009d\5\uffff\1\u009b\1\uffff\1\160\6\uffff\1\u0098\4\uffff"+
            "\1\u0099\17\uffff\1\u009e\1\uffff\1\u0093\1\uffff\1\u009c\12"+
            "\uffff\6\160\2\uffff\3\160\5\uffff\3\160\5\uffff\1\160\10\uffff"+
            "\1\160\12\uffff\2\160\5\uffff\1\160\2\uffff\1\160\1\uffff\4"+
            "\160\1\u0091\2\uffff\4\160\6\uffff\2\160\4\uffff\2\160\5\uffff"+
            "\1\160\5\uffff\1\160\11\uffff\1\160\1\uffff\2\160\3\uffff\1"+
            "\u009a",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\4\uffff\1\u009f\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u00a0",
            "\1\u00a1\4\uffff\1\u00a2\21\uffff\1\u0093\25\uffff\1\u00a3"+
            "\62\uffff\1\u0091",
            "\1\u0092\4\uffff\1\u00a4\21\uffff\1\u0093\25\uffff\1\u00a5"+
            "\62\uffff\1\u0091",
            "\1\u0092\4\uffff\1\u00a6\21\uffff\1\u0093\25\uffff\1\u00a7"+
            "\62\uffff\1\u0091",
            "\1\u00a8\4\uffff\1\u00a9\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u00aa\4\uffff\1\u00ab\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\4\uffff\1\u00ac\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\4\uffff\1\u00ad\21\uffff\1\u0093\110\uffff\1\u0091",
            "\2\u00ae",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\25\uffff\1\u00af\62\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u009d\5\uffff\1\u00b0\10\uffff\1\u0092\24\uffff\1\u009e"+
            "\1\uffff\1\u0093\1\uffff\1\u009c\106\uffff\1\u0091",
            "\1\u0092\4\uffff\1\u00b1\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u009d\5\uffff\1\u009b\10\uffff\1\u0092\4\uffff\1\u00b2\17"+
            "\uffff\1\u009e\1\uffff\1\u0093\1\uffff\1\u009c\106\uffff\1\u0091",
            "",
            "\1\u00b3\40\uffff\1\u00b4",
            "\1\u00b5",
            "\1\u00b6",
            "\1\u00b7",
            "\1\u00b8",
            "\1\u00b9",
            "",
            "\1\u00ba",
            "\1\7\1\uffff\1\66\5\uffff\1\u00bb\15\uffff\1\u00bc\17\uffff"+
            "\1\67\1\uffff\1\7\1\uffff\1\65\36\uffff\1\7\33\uffff\1\u00bd"+
            "\13\uffff\1\7",
            "\1\66\5\uffff\1\u00be\35\uffff\1\67\3\uffff\1\65",
            "\1\67",
            "\1\67",
            "",
            "\1\u009d\5\uffff\1\u009b\1\uffff\1\160\6\uffff\1\u00bf\4\uffff"+
            "\1\u00c0\17\uffff\1\u009e\1\uffff\1\u0093\1\uffff\1\u009c\12"+
            "\uffff\6\160\2\uffff\3\160\5\uffff\3\160\5\uffff\1\160\10\uffff"+
            "\1\160\12\uffff\2\160\5\uffff\1\160\2\uffff\1\160\1\uffff\4"+
            "\160\1\u0091\2\uffff\4\160\6\uffff\2\160\4\uffff\2\160\5\uffff"+
            "\1\160\5\uffff\1\160\11\uffff\1\160\1\uffff\2\160\3\uffff\1"+
            "\u009a",
            "",
            "\1\u00c1",
            "\1\u00c2\25\uffff\1\u00c4\25\uffff\1\u00c3",
            "\1\u00c5\6\uffff\1\u00c5\171\uffff\1\u00c6",
            "\1\u00c7\25\uffff\1\u00c9\25\uffff\1\u00c8",
            "\1\u00ca\6\uffff\1\u00ca\171\uffff\1\u00cb",
            "\1\u00cc\25\uffff\1\u00ce\25\uffff\1\u00cd",
            "\1\u00cf\6\uffff\1\u00cf\171\uffff\1\u00d0",
            "\1\u00d1",
            "\1\u00d2",
            "\1\u00d3",
            "\1\u00d4",
            "\1\7\25\uffff\1\u008c\21\uffff\1\7\40\uffff\1\7\33\uffff\1"+
            "\54\13\uffff\1\7",
            "\1\u00d5",
            "\1\u00d6\6\uffff\1\u00d6\171\uffff\1\u00d7",
            "\1\66\5\uffff\1\u00be\35\uffff\1\67\3\uffff\1\65",
            "\1\u00d8",
            "\1\u00d9",
            "\1\u00da",
            "",
            "\1\uffff",
            "\1\u00db",
            "\1\u0092\4\uffff\1\u0096\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u00dc",
            "\1\u00dd",
            "\1\160\5\uffff\1\160\10\uffff\1\160\4\uffff\1\u00de\1\uffff"+
            "\1\u0092\4\uffff\1\u0092\1\uffff\1\u0092\2\uffff\1\u0092\3\uffff"+
            "\1\160\1\uffff\1\160\1\uffff\1\160\106\uffff\1\160\44\uffff"+
            "\1\u00df\13\uffff\1\160",
            "\1\160\6\uffff\1\160\4\uffff\1\160\1\uffff\1\160\4\uffff\1"+
            "\u00e0\1\uffff\1\160\2\uffff\1\160\31\uffff\1\160\17\uffff\1"+
            "\160\7\uffff\1\160\34\uffff\1\160\1\uffff\1\160\27\uffff\1\160"+
            "\2\uffff\1\160\3\uffff\1\160\4\uffff\1\160",
            "\1\u00e1",
            "\1\u00e2\6\uffff\1\u00e2\171\uffff\1\u00e3",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u00e4\6\uffff\1\u00e4\171\uffff\1\u00e5",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u00e6",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\4\uffff\1\u00a2\1\uffff\1\u0092\4\uffff\1\u0092\1"+
            "\uffff\1\u0092\2\uffff\1\u0092\5\uffff\1\u0093\25\uffff\1\u00a3"+
            "\62\uffff\1\u0091",
            "\1\u00e7",
            "\1\u00e8",
            "\1\u00e9",
            "\1\u00ea",
            "\1\u00eb",
            "\1\u00ec",
            "\1\u0092\4\uffff\1\u00a9\1\uffff\1\u0092\4\uffff\1\u0092\1"+
            "\uffff\1\u0092\2\uffff\1\u0092\5\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u00ed",
            "\1\u0092\4\uffff\1\u00ab\1\uffff\1\u0092\4\uffff\1\u0092\1"+
            "\uffff\1\u0092\2\uffff\1\u0092\5\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u00ee",
            "\1\u00ef",
            "\1\u00f0",
            "\1\u00f1\4\uffff\1\u00f2\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u00f3",
            "\1\u00f4\6\uffff\1\u00f4\171\uffff\1\u00e3",
            "\1\u00f5",
            "\1\u00f6",
            "\1\u00f7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00f8",
            "\1\7\25\uffff\1\u00f9\21\uffff\1\7\40\uffff\1\7\33\uffff\1"+
            "\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7\60"+
            "\uffff\1\63",
            "\1\7\20\uffff\1\u00fa\26\uffff\1\7\40\uffff\1\7\33\uffff\1"+
            "\54\13\uffff\1\7",
            "\1\u00fb\6\uffff\1\u00fb\171\uffff\1\u00fc",
            "\1\u0090",
            "\1\157\6\uffff\1\176\4\uffff\1\160\36\uffff\1\154\1\120\1\117"+
            "\1\116\1\151\1\126\2\uffff\1\137\1\142\1\152\5\uffff\1\127\2"+
            "\123\5\uffff\1\136\10\uffff\1\134\12\uffff\1\132\1\131\5\uffff"+
            "\1\124\2\uffff\1\147\1\uffff\1\146\1\121\1\143\1\153\3\uffff"+
            "\2\123\1\144\1\145\6\uffff\1\150\1\122\4\uffff\1\125\1\135\1"+
            "\177\4\uffff\1\155\5\uffff\1\133\2\uffff\1\175\6\uffff\1\156"+
            "\1\uffff\1\140\1\141",
            "\1\u00fd\6\uffff\1\u00fd\171\uffff\1\u00fc",
            "\1\160\5\uffff\1\160\10\uffff\1\160\4\uffff\1\u00fe\1\uffff"+
            "\1\u0092\4\uffff\1\u0092\1\uffff\1\u0092\2\uffff\1\u0092\3\uffff"+
            "\1\160\1\uffff\1\160\1\uffff\1\160\106\uffff\1\160\44\uffff"+
            "\1\u00df\13\uffff\1\160",
            "\1\160\6\uffff\1\160\4\uffff\1\160\1\uffff\1\160\4\uffff\1"+
            "\u00ff\1\uffff\1\160\2\uffff\1\160\31\uffff\1\160\17\uffff\1"+
            "\160\7\uffff\1\160\34\uffff\1\160\1\uffff\1\160\27\uffff\1\160"+
            "\2\uffff\1\160\3\uffff\1\160\4\uffff\1\160",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u00c4",
            "\1\u00c4",
            "\1\7\47\uffff\1\7\25\uffff\1\75\12\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\3\uffff\1\u0101\3\uffff\1\u0100\37\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0101\3\uffff\1\u0100",
            "\1\u00c9",
            "\1\u00c9",
            "\1\7\47\uffff\1\7\25\uffff\1\77\12\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\3\uffff\1\u0103\3\uffff\1\u0102\37\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0103\3\uffff\1\u0102",
            "\1\u00ce",
            "\1\u00ce",
            "\1\7\47\uffff\1\7\25\uffff\1\101\12\uffff\1\7\33\uffff\1\54"+
            "\13\uffff\1\7",
            "\1\7\3\uffff\1\u0105\3\uffff\1\u0104\37\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0105\3\uffff\1\u0104",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0106",
            "\1\7\3\uffff\1\u0108\3\uffff\1\u0107\37\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0108\3\uffff\1\u0107",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0093",
            "\1\u0109\40\uffff\1\u010a",
            "\1\u010b",
            "\1\u010c",
            "\1\u010d",
            "\1\u010e",
            "\1\160\1\uffff\1\160\2\uffff\2\160\3\uffff\6\160\1\uffff\1"+
            "\160\1\uffff\1\160\2\uffff\2\160\2\uffff\2\160\2\uffff\1\160"+
            "\5\uffff\1\160\1\uffff\1\u010f\6\uffff\1\160\5\uffff\1\160\51"+
            "\uffff\1\160\6\uffff\2\160\12\uffff\1\160\10\uffff\1\160",
            "\1\u0110",
            "\1\u009d\5\uffff\1\u0111\10\uffff\1\u0092\4\uffff\1\u00b2\17"+
            "\uffff\1\u009e\1\uffff\1\u0093\1\uffff\1\u009c\106\uffff\1\u0091",
            "\1\u009d\5\uffff\1\u0112\35\uffff\1\u009e\3\uffff\1\u009c",
            "\1\u009e",
            "\1\u009e",
            "\1\u0113",
            "\1\u0114\25\uffff\1\u0116\25\uffff\1\u0115",
            "\1\u0117\6\uffff\1\u0117\171\uffff\1\u0118",
            "\1\u0119\25\uffff\1\u011b\25\uffff\1\u011a",
            "\1\u011c\6\uffff\1\u011c\171\uffff\1\u011d",
            "\1\u011e\25\uffff\1\u0120\25\uffff\1\u011f",
            "\1\u0121\6\uffff\1\u0121\171\uffff\1\u0122",
            "\1\u0123",
            "\1\u0124",
            "\1\u0125",
            "\1\u0126",
            "\1\u0092\4\uffff\1\u00f2\1\uffff\1\u0092\4\uffff\1\u0092\1"+
            "\uffff\1\u0092\2\uffff\1\u0092\5\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0127",
            "\1\u0128\6\uffff\1\u0128\171\uffff\1\u0129",
            "\1\u009d\5\uffff\1\u0112\35\uffff\1\u009e\3\uffff\1\u009c",
            "\1\u012a",
            "\1\u012b",
            "\1\u00b4",
            "\1\165",
            "\1\u012c",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\7\uffff\1\u012d\15\uffff\1\u00bc\21\uffff\1\7\1\uffff"+
            "\1\65\36\uffff\1\7\33\uffff\1\u00bd\13\uffff\1\7",
            "\1\65",
            "\1\65",
            "\1\u012e",
            "\1\160\1\uffff\1\160\2\uffff\2\160\3\uffff\6\160\1\uffff\1"+
            "\160\1\uffff\1\160\2\uffff\2\160\2\uffff\2\160\2\uffff\1\160"+
            "\5\uffff\1\160\1\uffff\1\u012f\6\uffff\1\160\5\uffff\1\160\51"+
            "\uffff\1\160\6\uffff\2\160\12\uffff\1\160\10\uffff\1\160",
            "\1\u0130\6\uffff\1\u0130\171\uffff\1\u0131",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0132\6\uffff\1\u0132\171\uffff\1\u0133",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0134\6\uffff\1\u0134\171\uffff\1\u0135",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0136\6\uffff\1\u0136\171\uffff\1\u0137",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\u0138",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0139",
            "\1\u0092\4\uffff\1\u013a\21\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091\60\uffff\1\u009a",
            "\1\u013b\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u013c\6\uffff\1\u013c\171\uffff\1\u013d",
            "\1\u013e\6\uffff\1\u013e\171\uffff\1\u013d",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0116",
            "\1\u0116",
            "\1\u0092\26\uffff\1\u0093\25\uffff\1\u00a3\62\uffff\1\u0091",
            "\1\u0140\3\uffff\1\u013f\10\uffff\1\u0092\26\uffff\1\u0093"+
            "\110\uffff\1\u0091",
            "\1\u0140\3\uffff\1\u013f",
            "\1\u011b",
            "\1\u011b",
            "\1\u0092\26\uffff\1\u0093\25\uffff\1\u00a5\62\uffff\1\u0091",
            "\1\u0142\3\uffff\1\u0141\10\uffff\1\u0092\26\uffff\1\u0093"+
            "\110\uffff\1\u0091",
            "\1\u0142\3\uffff\1\u0141",
            "\1\u0120",
            "\1\u0120",
            "\1\u0092\26\uffff\1\u0093\25\uffff\1\u00a7\62\uffff\1\u0091",
            "\1\u0144\3\uffff\1\u0143\10\uffff\1\u0092\26\uffff\1\u0093"+
            "\110\uffff\1\u0091",
            "\1\u0144\3\uffff\1\u0143",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0145",
            "\1\u0147\3\uffff\1\u0146\10\uffff\1\u0092\26\uffff\1\u0093"+
            "\110\uffff\1\u0091",
            "\1\u0147\3\uffff\1\u0146",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0148",
            "\1\u0149\6\uffff\1\u0149",
            "\1\u014a",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091\6\uffff\1\u014b"+
            "\51\uffff\1\u009a",
            "\1\u0101\3\uffff\1\u014c",
            "\1\u0101\3\uffff\1\u014c",
            "\1\u0103\3\uffff\1\u014d",
            "\1\u0103\3\uffff\1\u014d",
            "\1\u0105\3\uffff\1\u014e",
            "\1\u0105\3\uffff\1\u014e",
            "\1\u0108\3\uffff\1\u014f",
            "\1\u0108\3\uffff\1\u014f",
            "\1\u010a",
            "\1\160\110\uffff\1\160\44\uffff\1\u00df\13\uffff\1\160",
            "\1\u0150",
            "\1\u0092\6\uffff\1\u0092\4\uffff\1\u0092\1\uffff\1\u0092\2"+
            "\uffff\1\u0092\5\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0151\10\uffff\1\u0092\4\uffff\1\u00b2\21\uffff\1\u0093"+
            "\1\uffff\1\u009c\106\uffff\1\u0091",
            "\1\u009c",
            "\1\u009c",
            "\1\u0152\6\uffff\1\u0152\171\uffff\1\u0153",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0154\6\uffff\1\u0154\171\uffff\1\u0155",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0156\6\uffff\1\u0156\171\uffff\1\u0157",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0158\6\uffff\1\u0158\171\uffff\1\u0159",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\7\47\uffff\1\7\40\uffff\1\7\33\uffff\1\54\13\uffff\1\7",
            "\1\7\7\uffff\1\u012d\15\uffff\1\u00bc\21\uffff\1\7\40\uffff"+
            "\1\7\33\uffff\1\u00bd\13\uffff\1\7",
            "\1\160\110\uffff\1\160\6\uffff\1\u014b\35\uffff\1\u00df\13"+
            "\uffff\1\160",
            "",
            "\1\u015a\6\uffff\1\u015a\171\uffff\1\u015b",
            "\1\u015c\6\uffff\1\u015c\171\uffff\1\u015d",
            "\1\u015e\6\uffff\1\u015e\171\uffff\1\u015f",
            "\1\u0160\6\uffff\1\u0160\171\uffff\1\u0161",
            "\1\u0162",
            "\1\u0163\6\uffff\1\u0163",
            "\1\u0140\3\uffff\1\u0164",
            "\1\u0140\3\uffff\1\u0164",
            "\1\u0142\3\uffff\1\u0165",
            "\1\u0142\3\uffff\1\u0165",
            "\1\u0144\3\uffff\1\u0166",
            "\1\u0144\3\uffff\1\u0166",
            "\1\u0147\3\uffff\1\u0167",
            "\1\u0147\3\uffff\1\u0167",
            "\1\u0101",
            "\1\u0101",
            "\1\u0103",
            "\1\u0103",
            "\1\u0105",
            "\1\u0105",
            "\1\u0108",
            "\1\u0108",
            "\1\u0092\26\uffff\1\u0093\110\uffff\1\u0091",
            "\1\u0151\10\uffff\1\u0092\4\uffff\1\u00b2\21\uffff\1\u0093"+
            "\110\uffff\1\u0091",
            "\1\u0168\6\uffff\1\u0168\171\uffff\1\u0169",
            "\1\u016a\6\uffff\1\u016a\171\uffff\1\u016b",
            "\1\u016c\6\uffff\1\u016c\171\uffff\1\u016d",
            "\1\u016e\6\uffff\1\u016e\171\uffff\1\u016f",
            "\1\u0140",
            "\1\u0140",
            "\1\u0142",
            "\1\u0142",
            "\1\u0144",
            "\1\u0144",
            "\1\u0147",
            "\1\u0147"
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "149:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_147 = input.LA(1);

                         
                        int index29_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((input.LT(1).getText().equalsIgnoreCase("SUBTYPE"))&&(input.LT(1).getText().equalsIgnoreCase("SUBTYPE")))&&synpred62_PLSQL3())) ) {s = 146;}

                        else if ( ((((input.LT(1).getText().equalsIgnoreCase("TYPE"))&&(input.LT(1).getText().equalsIgnoreCase("TYPE")))&&synpred70_PLSQL3())) ) {s = 112;}

                         
                        input.seek(index29_147);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA32_eotS =
        "\41\uffff";
    static final String DFA32_eofS =
        "\41\uffff";
    static final String DFA32_minS =
        "\1\26\1\33\1\17\3\uffff\2\13\1\42\1\13\1\17\1\uffff\1\0\2\17\1\42"+
        "\3\13\5\uffff\1\42\2\13\1\42\3\13\2\0";
    static final String DFA32_maxS =
        "\1\26\1\33\1\116\3\uffff\2\54\1\42\1\54\1\47\1\uffff\1\0\2\47\1"+
        "\42\3\54\5\uffff\1\42\2\54\1\42\3\54\2\0";
    static final String DFA32_acceptS =
        "\3\uffff\1\3\1\4\1\1\5\uffff\1\2\7\uffff\1\5\1\6\1\7\1\10\1\11\11"+
        "\uffff";
    static final String DFA32_specialS =
        "\1\uffff\1\3\12\uffff\1\0\22\uffff\1\2\1\1}>";
    static final String[] DFA32_transitionS = {
            "\1\1",
            "\1\2",
            "\1\6\6\uffff\1\6\6\uffff\1\10\4\uffff\1\11\1\uffff\1\10\2\uffff"+
            "\1\7\46\uffff\1\5",
            "",
            "",
            "",
            "\1\12\1\uffff\1\13\36\uffff\1\14",
            "\1\15\40\uffff\1\14",
            "\1\11",
            "\1\16\40\uffff\1\14",
            "\1\22\6\uffff\1\22\6\uffff\1\17\4\uffff\1\20\1\uffff\1\17\2"+
            "\uffff\1\21",
            "",
            "\1\uffff",
            "\1\22\6\uffff\1\22\6\uffff\1\30\4\uffff\1\31\1\uffff\1\30\2"+
            "\uffff\1\32",
            "\1\36\6\uffff\1\36\6\uffff\1\33\4\uffff\1\34\1\uffff\1\33\2"+
            "\uffff\1\35",
            "\1\20",
            "\1\15\40\uffff\1\37",
            "\1\15\40\uffff\1\37",
            "\1\15\40\uffff\1\40",
            "",
            "",
            "",
            "",
            "",
            "\1\31",
            "\1\15\40\uffff\1\40",
            "\1\15\40\uffff\1\40",
            "\1\34",
            "\1\16\40\uffff\1\14",
            "\1\16\40\uffff\1\14",
            "\1\16\40\uffff\1\14",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "165:3: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_12 = input.LA(1);

                         
                        int index32_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((input.LT(1).getText().equalsIgnoreCase("BUILTIN"))&&(input.LT(1).getText().equalsIgnoreCase("BUILTIN")))&&synpred77_PLSQL3())) ) {s = 19;}

                        else if ( (((synpred78_PLSQL3()&&synpred78_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("FIPSFLAG")))) ) {s = 20;}

                        else if ( (((synpred79_PLSQL3()&&synpred79_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("INTERFACE")))) ) {s = 21;}

                        else if ( ((((input.LT(1).getText().equalsIgnoreCase("NEW_NAMES"))&&(input.LT(1).getText().equalsIgnoreCase("NEW_NAMES")))&&synpred80_PLSQL3())) ) {s = 22;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("TIMESTAMP"))) ) {s = 23;}

                         
                        input.seek(index32_12);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA32_32 = input.LA(1);

                         
                        int index32_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((input.LT(1).getText().equalsIgnoreCase("RESTRICT_REFERENCES"))&&(input.LT(1).getText().equalsIgnoreCase("RESTRICT_REFERENCES")))&&synpred73_PLSQL3())) ) {s = 5;}

                        else if ( ((((input.LT(1).getText().equalsIgnoreCase("BUILTIN"))&&(input.LT(1).getText().equalsIgnoreCase("BUILTIN")))&&synpred77_PLSQL3())) ) {s = 19;}

                        else if ( (((synpred78_PLSQL3()&&synpred78_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("FIPSFLAG")))) ) {s = 20;}

                        else if ( (((synpred79_PLSQL3()&&synpred79_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("INTERFACE")))) ) {s = 21;}

                        else if ( ((((input.LT(1).getText().equalsIgnoreCase("NEW_NAMES"))&&(input.LT(1).getText().equalsIgnoreCase("NEW_NAMES")))&&synpred80_PLSQL3())) ) {s = 22;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("TIMESTAMP"))) ) {s = 23;}

                         
                        input.seek(index32_32);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA32_31 = input.LA(1);

                         
                        int index32_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((input.LT(1).getText().equalsIgnoreCase("RESTRICT_REFERENCES"))&&(input.LT(1).getText().equalsIgnoreCase("RESTRICT_REFERENCES")))&&synpred73_PLSQL3())) ) {s = 5;}

                        else if ( (((synpred74_PLSQL3()&&synpred74_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("EXCEPTION_INIT")))) ) {s = 11;}

                        else if ( ((((input.LT(1).getText().equalsIgnoreCase("BUILTIN"))&&(input.LT(1).getText().equalsIgnoreCase("BUILTIN")))&&synpred77_PLSQL3())) ) {s = 19;}

                        else if ( (((synpred78_PLSQL3()&&synpred78_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("FIPSFLAG")))) ) {s = 20;}

                        else if ( (((synpred79_PLSQL3()&&synpred79_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("INTERFACE")))) ) {s = 21;}

                        else if ( ((((input.LT(1).getText().equalsIgnoreCase("NEW_NAMES"))&&(input.LT(1).getText().equalsIgnoreCase("NEW_NAMES")))&&synpred80_PLSQL3())) ) {s = 22;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("TIMESTAMP"))) ) {s = 23;}

                         
                        input.seek(index32_31);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA32_1 = input.LA(1);

                         
                        int index32_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA32_1==LPAREN) ) {s = 2;}

                        else if ( ((((input.LT(1).getText().equalsIgnoreCase("AUTONOMOUS_TRANSACTION"))&&(input.LT(1).getText().equalsIgnoreCase("AUTONOMOUS_TRANSACTION")))&&synpred75_PLSQL3())) ) {s = 3;}

                        else if ( (((synpred76_PLSQL3()&&synpred76_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("SERIALLY_REUSABLE")))) ) {s = 4;}

                         
                        input.seek(index32_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA125_eotS =
        "\101\uffff";
    static final String DFA125_eofS =
        "\1\2\100\uffff";
    static final String DFA125_minS =
        "\1\6\1\0\77\uffff";
    static final String DFA125_maxS =
        "\1\u00a5\1\0\77\uffff";
    static final String DFA125_acceptS =
        "\2\uffff\1\2\75\uffff\1\1";
    static final String DFA125_specialS =
        "\1\uffff\1\0\77\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\2\1\uffff\1\2\2\uffff\15\2\1\uffff\1\2\1\uffff\1\1\2\2\2"+
            "\uffff\3\2\1\uffff\1\2\2\uffff\2\2\1\uffff\1\2\1\uffff\2\2\5"+
            "\uffff\5\2\1\uffff\1\2\7\uffff\1\2\5\uffff\1\2\10\uffff\2\2"+
            "\1\uffff\1\2\1\uffff\1\2\2\uffff\2\2\3\uffff\1\2\2\uffff\2\2"+
            "\1\uffff\1\2\4\uffff\4\2\2\uffff\2\2\6\uffff\1\2\1\uffff\1\2"+
            "\5\uffff\3\2\5\uffff\1\2\5\uffff\2\2\2\uffff\1\2\2\uffff\1\2"+
            "\3\uffff\2\2\1\uffff\1\2\1\uffff\2\2\6\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "471:26: ({...}? LPAREN ( call_parameters )? RPAREN )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_1 = input.LA(1);

                         
                        int index125_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )&&( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ))&&synpred232_PLSQL3())) ) {s = 64;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index125_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA157_eotS =
        "\101\uffff";
    static final String DFA157_eofS =
        "\1\1\100\uffff";
    static final String DFA157_minS =
        "\1\6\41\uffff\1\0\36\uffff";
    static final String DFA157_maxS =
        "\1\u00a5\41\uffff\1\0\36\uffff";
    static final String DFA157_acceptS =
        "\1\uffff\1\2\76\uffff\1\1";
    static final String DFA157_specialS =
        "\42\uffff\1\0\36\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\1\42\1\1\1\uffff\12\1\1\uffff\1\1\1"+
            "\uffff\3\1\2\uffff\3\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1"+
            "\uffff\2\1\5\uffff\5\1\1\uffff\1\1\7\uffff\1\1\5\uffff\1\1\10"+
            "\uffff\2\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\3\uffff\1\1\2"+
            "\uffff\2\1\1\uffff\1\1\4\uffff\4\1\2\uffff\2\1\6\uffff\1\1\1"+
            "\uffff\1\1\5\uffff\3\1\5\uffff\1\1\5\uffff\2\1\2\uffff\1\1\2"+
            "\uffff\1\1\3\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2"+
            "\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "()* loopback of 623:19: ( COMMA selected_table )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_34 = input.LA(1);

                         
                        int index157_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred278_PLSQL3()) ) {s = 64;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index157_34);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA166_eotS =
        "\100\uffff";
    static final String DFA166_eofS =
        "\1\2\77\uffff";
    static final String DFA166_minS =
        "\1\6\1\0\76\uffff";
    static final String DFA166_maxS =
        "\1\u00a5\1\0\76\uffff";
    static final String DFA166_acceptS =
        "\2\uffff\1\2\74\uffff\1\1";
    static final String DFA166_specialS =
        "\1\uffff\1\0\76\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\2\1\uffff\1\2\2\uffff\2\2\1\uffff\10\2\1\1\1\2\1\uffff\1"+
            "\2\1\uffff\3\2\2\uffff\3\2\1\uffff\1\2\2\uffff\2\2\1\uffff\1"+
            "\2\1\uffff\2\2\5\uffff\5\2\1\uffff\1\2\7\uffff\1\2\5\uffff\1"+
            "\2\10\uffff\2\2\1\uffff\1\2\1\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\1\2\2\uffff\2\2\1\uffff\1\2\4\uffff\4\2\2\uffff\2\2\6\uffff"+
            "\1\2\1\uffff\1\2\5\uffff\3\2\5\uffff\1\2\5\uffff\2\2\2\uffff"+
            "\1\2\2\uffff\1\2\3\uffff\2\2\1\uffff\1\2\1\uffff\2\2\6\uffff"+
            "\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "638:18: ( query_partition_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_1 = input.LA(1);

                         
                        int index166_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred288_PLSQL3()&&synpred288_PLSQL3())&&(input.LT(1).getText().equalsIgnoreCase("PARTITION")))) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_create_package_in_start_rule50 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_EOF_in_start_rule54 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_create_package65 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_127_in_create_package69 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyREPLACE_in_create_package71 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_package_spec_in_create_package80 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_body_in_create_package84 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPACKAGE_in_package_spec98 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_package_name_in_package_spec100 = new BitSet(new long[]{0x0020000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_set_in_package_spec102 = new BitSet(new long[]{0x0000000000408000L,0x0000000040200000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_package_obj_spec_in_package_spec117 = new BitSet(new long[]{0x0000000000408000L,0x0000000040200000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_85_in_package_spec124 = new BitSet(new long[]{0x0000200000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_package_name_in_package_spec127 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_package_spec131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPACKAGE_in_package_body143 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyBODY_in_package_body147 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_package_name_in_package_body151 = new BitSet(new long[]{0x0020000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_set_in_package_body153 = new BitSet(new long[]{0x0100000000408000L,0x0000000040200200L,0x00000000000000A0L});
    public static final BitSet FOLLOW_package_obj_body_in_package_body167 = new BitSet(new long[]{0x0100000000408000L,0x0000000040200200L,0x00000000000000A0L});
    public static final BitSet FOLLOW_56_in_package_body176 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_package_body178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_package_body187 = new BitSet(new long[]{0x0000200000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_package_name_in_package_body191 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_package_body196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_package_name209 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_DOT_in_package_name211 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_identifier_in_package_name216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_package_obj_spec234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_spec245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_spec251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_package_obj_spec257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_spec_in_package_obj_spec268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_package_obj_spec280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_declaration303 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041D1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_72_in_variable_declaration306 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_type_spec_in_variable_declaration312 = new BitSet(new long[]{0x0000200000000020L,0x0040000000004000L});
    public static final BitSet FOLLOW_118_in_variable_declaration315 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_variable_declaration317 = new BitSet(new long[]{0x0000200000000020L,0x0000000000004000L});
    public static final BitSet FOLLOW_set_in_variable_declaration326 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expression_in_variable_declaration336 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_variable_declaration340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_type_declaration353 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_type_spec_in_type_declaration355 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_type_declaration357 = new BitSet(new long[]{0xFC00000008408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_keyNEW_in_type_declaration361 = new BitSet(new long[]{0xFC00000008408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_type_spec_in_type_declaration368 = new BitSet(new long[]{0x0000200000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_type_declaration372 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_declaration374 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_type_declaration381 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expressions_in_type_declaration383 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_type_declaration385 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_type_declaration389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySUBTYPE_in_subtype_declaration402 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration404 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_subtype_declaration406 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration408 = new BitSet(new long[]{0x0000200000400000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_subtype_declaration412 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_subtype_declaration414 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_keyRANGE_in_subtype_declaration418 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_literal_in_subtype_declaration420 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_DOUBLEDOT_in_subtype_declaration422 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_literal_in_subtype_declaration424 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_subtype_declaration429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_declaration442 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_declaration444 = new BitSet(new long[]{0x0000000008000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_declaration450 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_parameter_specs_in_cursor_declaration452 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_declaration454 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_cursor_declaration461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_command_in_cursor_declaration463 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_cursor_declaration465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_body475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_body493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_body499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_body505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_package_obj_body511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_body_in_package_obj_body516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_body_in_package_obj_body522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_package_obj_body528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements539 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_seq_of_statements541 = new BitSet(new long[]{0x0100000004408402L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements545 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_seq_of_statements547 = new BitSet(new long[]{0x0100000004408402L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_assignment_statement_in_statement562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statement567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statement572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_statement577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statement582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statement588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_statement_in_statement594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statement599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statement604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_statement609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_block_in_statement614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_statement620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLABEL_in_plsql_block635 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_label_name_in_plsql_block637 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RLABEL_in_plsql_block639 = new BitSet(new long[]{0x0100000000408000L,0x0000000040002200L,0x00000000000000A0L});
    public static final BitSet FOLLOW_77_in_plsql_block650 = new BitSet(new long[]{0x0000000000408000L,0x0000000040000200L,0x00000000000000A0L});
    public static final BitSet FOLLOW_declare_spec_in_plsql_block656 = new BitSet(new long[]{0x0100000000408000L,0x0000000040000200L,0x00000000000000A0L});
    public static final BitSet FOLLOW_56_in_plsql_block668 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_plsql_block674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_86_in_plsql_block680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_exception_handler_in_plsql_block684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000001000000000L});
    public static final BitSet FOLLOW_85_in_plsql_block697 = new BitSet(new long[]{0x0000000000408002L});
    public static final BitSet FOLLOW_label_name_in_plsql_block701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_declare_spec717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_declare_spec723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_declare_spec729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_declare_spec735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_declare_spec741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_declare_spec747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_declare_spec753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_declare_spec758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_declaration_in_declare_spec764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_declare_spec769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_declare_spec775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPRAGMA_in_pragma_declaration786 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration793 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration795 = new BitSet(new long[]{0x0000008000408000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_pragma_declaration799 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_function_name_in_pragma_declaration803 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration809 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_declaration811 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration816 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration823 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration825 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_exception_name_in_pragma_declaration827 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration829 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_literal_in_pragma_declaration831 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration833 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration839 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration845 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_keyBUILTIN_in_pragma_declaration851 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration853 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration855 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration857 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_keyFIPSFLAG_in_pragma_declaration863 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration865 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration867 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration869 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_keyINTERFACE_in_pragma_declaration875 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration877 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration879 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration881 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_keyNEW_NAMES_in_pragma_declaration887 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration889 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration891 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration893 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_keyTIMESTAMP_in_pragma_declaration899 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration901 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration903 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration905 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_pragma_declaration913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_params924 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_pragma_params928 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_params930 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_NUMBER_in_pragma_param955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_pragma_param960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_pragma_param965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_assignment_statement981 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_assignment_statement983 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expression_in_assignment_statement985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalues997 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_lvalues1001 = new BitSet(new long[]{0x0000000000408400L});
    public static final BitSet FOLLOW_lvalue_in_lvalues1003 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variable_name_in_lvalue1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_lvalue1021 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_DOT_in_lvalue1023 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_field_name_in_lvalue1025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_lvalue1030 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_lvalue1032 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_subscript_in_lvalue1034 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lvalue1036 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOT_in_lvalue1040 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_field_name_in_lvalue1042 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_COLON_in_lvalue1050 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_host_variable_in_lvalue1052 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COLON_in_lvalue1056 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_host_variable_in_lvalue1058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_field_name1072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_subscript1084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_host_variable1097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_goto_statement1109 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_label_name_in_goto_statement1111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_label_name1123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEXIT_in_exit_statement1135 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_label_name_in_exit_statement1139 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_exit_statement1146 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_condition_in_exit_statement1148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_datatype1163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_datatype1169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_datatype1174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_datatype1179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_datatype1185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_datatype1191 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1211 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1213 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_COMMA_in_datatype1217 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1219 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_datatype1232 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_datatype1236 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1242 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1244 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_datatype1254 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1258 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1260 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_datatype1270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_datatype1275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_datatype1280 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyDAY_in_datatype1282 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1286 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1288 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_datatype1295 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySECOND_in_datatype1297 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1301 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1303 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_datatype1313 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyYEAR_in_datatype1315 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1319 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1321 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_datatype1328 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyMONTH_in_datatype1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_datatype1337 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_keyTIMESTAMP_in_datatype1341 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1347 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1349 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1351 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_datatype1358 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyLOCAL_in_datatype1362 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyTIME_in_datatype1367 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyZONE_in_datatype1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_datatype1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_datatype1381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_datatype1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_datatype1391 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1395 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1397 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_datatype1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_datatype1412 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyPRECISION_in_datatype1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_datatype1419 = new BitSet(new long[]{0x0000000008400002L,0x0000000000000008L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype1428 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1435 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1437 = new BitSet(new long[]{0x0000100000400000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype1441 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_66_in_datatype1445 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1450 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_datatype1457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_148_in_datatype1459 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_identifier_in_datatype1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype1467 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype1469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_datatype1479 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1501 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1503 = new BitSet(new long[]{0x0000100000400000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype1507 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_66_in_datatype1511 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_datatype1523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_148_in_datatype1525 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_identifier_in_datatype1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype1533 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_datatype1545 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1566 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1568 = new BitSet(new long[]{0x0000100000400000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype1572 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_66_in_datatype1576 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_datatype1588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_148_in_datatype1590 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_identifier_in_datatype1594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype1598 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype1600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_datatype1610 = new BitSet(new long[]{0x0000000008400002L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype1614 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1621 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1623 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_datatype1633 = new BitSet(new long[]{0x0000000008400002L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype1641 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1648 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1650 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_datatype1660 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1665 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1667 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_datatype1677 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1681 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1683 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_datatype1693 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_set_in_datatype1696 = new BitSet(new long[]{0x0000000008400002L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype1708 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1715 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1717 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_datatype1727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_datatype1732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_datatype1737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_datatype1742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_datatype1746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_148_in_datatype1748 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_identifier_in_datatype1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype1756 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_datatype1768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_datatype1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_datatype1778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_datatype1784 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype1788 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype1790 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datatype_in_type_spec1806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_type_spec1813 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_TYPE_ATTR_in_type_spec1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_type_spec1821 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ROWTYPE_ATTR_in_type_spec1823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_type_spec1829 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_type_spec1833 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_type_spec1835 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_type_spec1837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_type_name1851 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOT_in_type_name1855 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_identifier_in_type_name1857 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_parameter_spec_in_parameter_specs1871 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_parameter_specs1875 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_parameter_spec_in_parameter_specs1877 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_parameter_name_in_parameter_spec1891 = new BitSet(new long[]{0xFC00000000408002L,0x1E3D20C808041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_99_in_parameter_spec1895 = new BitSet(new long[]{0xFC00000000408002L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_type_spec_in_parameter_spec1902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_parameter_name1917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_spec1928 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_spec1930 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_spec1937 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_parameter_specs_in_cursor_spec1939 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_spec1941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_keyRETURN_in_cursor_spec1948 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_return_type_in_cursor_spec1950 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_cursor_spec1952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_procedure_spec1965 = new BitSet(new long[]{0x0000008000408000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec1967 = new BitSet(new long[]{0x0000200008000000L});
    public static final BitSet FOLLOW_LPAREN_in_procedure_spec1973 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_arguments_in_procedure_spec1975 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_procedure_spec1977 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_procedure_spec1982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_function_spec1993 = new BitSet(new long[]{0x0000008000408000L});
    public static final BitSet FOLLOW_function_name_in_function_spec1995 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_function_spec2002 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_arguments_in_function_spec2004 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_function_spec2006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_keyRETURN_in_function_spec2013 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_return_type_in_function_spec2015 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_function_spec2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_name_in_exception_declaration2028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_exception_declaration2030 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_exception_declaration2032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_name_in_exception_names2043 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_exception_names2047 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_exception_name_in_exception_names2049 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_exception_package_name_in_exception_name2065 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_DOT_in_exception_name2067 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_identifier_in_exception_name2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_exception_package_name2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_type_dec_in_record_declaration2102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_record_type_dec2115 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_type_name_in_record_type_dec2117 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_record_type_dec2119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_keyRECORD_in_record_type_dec2121 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_record_type_dec2126 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_field_specs_in_record_type_dec2128 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_record_type_dec2130 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_record_type_dec2132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_spec_in_field_specs2147 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_field_specs2151 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_field_spec_in_field_specs2153 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_column_name_in_field_spec2166 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_type_spec_in_field_spec2168 = new BitSet(new long[]{0x0000000000000022L,0x0040000000004000L});
    public static final BitSet FOLLOW_118_in_field_spec2173 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_field_spec2175 = new BitSet(new long[]{0x0000000000000022L,0x0000000000004000L});
    public static final BitSet FOLLOW_set_in_field_spec2184 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expression_in_field_spec2194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_type_dec_in_plsql_table_declaration2207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_table_type_dec2219 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_type_name_in_table_type_dec2221 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_table_type_dec2223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_table_type_dec2225 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_table_type_dec2230 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_type_spec_in_table_type_dec2232 = new BitSet(new long[]{0x0000200000000000L,0x0040001000000000L});
    public static final BitSet FOLLOW_118_in_table_type_dec2236 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_table_type_dec2238 = new BitSet(new long[]{0x0000200000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_table_type_dec2247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_table_type_dec2249 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000800000008L});
    public static final BitSet FOLLOW_61_in_table_type_dec2257 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_131_in_table_type_dec2264 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_163_in_table_type_dec2271 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_table_type_dec2273 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_integer_in_table_type_dec2275 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_table_type_dec2277 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_table_type_dec2291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_table_var_dec2302 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_type_name_in_table_var_dec2304 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_table_var_dec2306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_plsql_table_name2317 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOT_in_plsql_table_name2321 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_identifier_in_plsql_table_name2323 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_keyTYPE_in_varray_declaration2337 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_type_name_in_varray_declaration2339 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_varray_declaration2341 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyVARRAY_in_varray_declaration2348 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_keyVARYING_in_varray_declaration2352 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyARRAY_in_varray_declaration2354 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_varray_declaration2358 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_integer_in_varray_declaration2360 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_varray_declaration2362 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_varray_declaration2366 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_type_spec_in_varray_declaration2368 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_varray_declaration2372 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_varray_declaration2374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_body_in_procedure_declaration2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_proc_fun_start_in_procedure_body2401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_procedure_body2406 = new BitSet(new long[]{0x0000008000408000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_body2409 = new BitSet(new long[]{0x0020000008000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_procedure_body2416 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_argument_in_procedure_body2418 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_COMMA_in_procedure_body2422 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_argument_in_procedure_body2424 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_RPAREN_in_procedure_body2429 = new BitSet(new long[]{0x0020000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_set_in_procedure_body2437 = new BitSet(new long[]{0x0100000000408000L,0x0000000040000200L,0x00000000000000A0L});
    public static final BitSet FOLLOW_declare_spec_in_procedure_body2464 = new BitSet(new long[]{0x0100000000408000L,0x0000000040000200L,0x00000000000000A0L});
    public static final BitSet FOLLOW_56_in_procedure_body2475 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_procedure_body2483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_86_in_procedure_body2491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000001000000000L});
    public static final BitSet FOLLOW_exception_handler_in_procedure_body2495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000001000000000L});
    public static final BitSet FOLLOW_85_in_procedure_body2505 = new BitSet(new long[]{0x0000208000408000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_body2509 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_procedure_body2514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_begin_block2525 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_begin_block2531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_86_in_begin_block2539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_exception_handler_in_begin_block2543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000001000000000L});
    public static final BitSet FOLLOW_85_in_begin_block2553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_exception_handler2565 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_exception_names_in_exception_handler2567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_exception_handler2569 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_exception_handler2573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_proc_fun_start2584 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_proc_fun_start2588 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyREPLACE_in_proc_fun_start2590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_proc_fun_start_in_function_body2606 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_94_in_function_body2611 = new BitSet(new long[]{0x0000008000408000L});
    public static final BitSet FOLLOW_function_name_in_function_body2614 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_function_body2621 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_arguments_in_function_body2623 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_function_body2625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_keyRETURN_in_function_body2633 = new BitSet(new long[]{0xFC00000000408000L,0x1E3D20C008041C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_return_type_in_function_body2635 = new BitSet(new long[]{0x0020000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_set_in_function_body2637 = new BitSet(new long[]{0x0100000000408000L,0x0000000040000200L,0x00000000000000A0L});
    public static final BitSet FOLLOW_declare_spec_in_function_body2664 = new BitSet(new long[]{0x0100000000408000L,0x0000000040000200L,0x00000000000000A0L});
    public static final BitSet FOLLOW_56_in_function_body2675 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_function_body2683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_86_in_function_body2691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_exception_handler_in_function_body2695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000001000000000L});
    public static final BitSet FOLLOW_85_in_function_body2705 = new BitSet(new long[]{0x0000208000408000L});
    public static final BitSet FOLLOW_function_name_in_function_body2709 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_SEMI_in_function_body2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_function_name2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_function_name2729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_procedure_name2741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_procedure_name2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_arguments2757 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_arguments2761 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_argument_in_arguments2763 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_argument_name_in_argument2777 = new BitSet(new long[]{0xFC00000000408022L,0x1E3D20C808045C1CL,0x0000000D0041061AL});
    public static final BitSet FOLLOW_keyOUT_in_argument2781 = new BitSet(new long[]{0xFC00000000408022L,0x1E3D20C008045C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_99_in_argument2785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_keyOUT_in_argument2787 = new BitSet(new long[]{0xFC00000000408022L,0x1E3D20C008045C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_99_in_argument2791 = new BitSet(new long[]{0xFC00000000408022L,0x1E3D20C008045C1CL,0x0000000D00410618L});
    public static final BitSet FOLLOW_argument_type_in_argument2797 = new BitSet(new long[]{0x0000000000000022L,0x0000000000004000L});
    public static final BitSet FOLLOW_set_in_argument2806 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expression_in_argument2816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_argument_name2830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_argument_type2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_value2863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quoted_string_in_value2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_value2873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_value2877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_value2882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_return_type2893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_body_in_function_declaration2904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_user_defined_function_in_function_call2915 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_function_call2921 = new BitSet(new long[]{0x0000109428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_call_parameters_in_function_call2925 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_function_call2930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_collection_function_call2949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_names2960 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_variable_names2964 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_variable_name_in_variable_names2966 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_identifier_in_variable_name2979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_null_statement2990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRAISE_in_raise_statement3002 = new BitSet(new long[]{0x0000000000408002L});
    public static final BitSet FOLLOW_exception_name_in_raise_statement3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_return_statement3021 = new BitSet(new long[]{0x0000009428408002L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expression_in_return_statement3025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLABEL_in_loop_statement3041 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_label_name_in_loop_statement3043 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RLABEL_in_loop_statement3045 = new BitSet(new long[]{0x0000000000000000L,0x0000400010000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keyWHILE_in_loop_statement3054 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_condition_in_loop_statement3057 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_92_in_loop_statement3066 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_numeric_loop_param_in_loop_statement3083 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement3099 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_keyLOOP_in_loop_statement3120 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_loop_statement3124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_loop_statement3128 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_keyLOOP_in_loop_statement3130 = new BitSet(new long[]{0x0000000000408002L});
    public static final BitSet FOLLOW_label_name_in_loop_statement3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_name_in_numeric_loop_param3151 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_numeric_loop_param3153 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_keyREVERSE_in_numeric_loop_param3157 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param3162 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_DOUBLEDOT_in_numeric_loop_param3164 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param3166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_index_name3177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_integer_expr3189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_cursor_name3200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_cursor_loop_param3211 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_cursor_loop_param3213 = new BitSet(new long[]{0x0000000008408000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param3219 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param3223 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expressions_in_cursor_loop_param3225 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param3227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param3236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_loop_param3238 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param3240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_record_name3255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_commit_statement3266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_if_statement3277 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_condition_in_if_statement3280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_if_statement3282 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement3284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000380000L});
    public static final BitSet FOLLOW_keyELSIF_in_if_statement3294 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_condition_in_if_statement3296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_if_statement3298 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement3300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000380000L});
    public static final BitSet FOLLOW_83_in_if_statement3311 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement3313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_if_statement3320 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_if_statement3322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_command_in_sql_statement3333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_modify_data_in_sql_command3344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_control_data_in_sql_command3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_command_in_to_modify_data3360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_command_in_to_modify_data3365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_command_in_to_modify_data3370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_command_in_to_modify_data3375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_command_in_to_modify_data3380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_to_control_data3391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_to_control_data3396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_to_control_data3401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_to_control_data3406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_to_control_data3411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_to_control_data3416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_to_control_data3421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_select_command3432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_select_statement3446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_select_expression3461 = new BitSet(new long[]{0x0004009428408040L,0x0100000002020002L,0x0000000050890000L});
    public static final BitSet FOLLOW_select_list_in_select_expression3480 = new BitSet(new long[]{0x0000000000400000L,0x0000020020000000L});
    public static final BitSet FOLLOW_keyBULK_in_select_expression3486 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyCOLLECT_in_select_expression3488 = new BitSet(new long[]{0x0000000000000000L,0x0000020020000000L});
    public static final BitSet FOLLOW_105_in_select_expression3497 = new BitSet(new long[]{0x0000000000408400L});
    public static final BitSet FOLLOW_lvalues_in_select_expression3499 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_select_expression3506 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_join_clause_in_select_expression3510 = new BitSet(new long[]{0x0000000000400002L,0x0000810300000080L,0x0000002021000001L});
    public static final BitSet FOLLOW_LPAREN_in_select_expression3514 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_join_clause_in_select_expression3516 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_select_expression3518 = new BitSet(new long[]{0x0000000000400002L,0x0000810300000080L,0x0000002021000001L});
    public static final BitSet FOLLOW_table_reference_list_in_select_expression3522 = new BitSet(new long[]{0x0000000000400002L,0x0000810300000080L,0x0000002021000001L});
    public static final BitSet FOLLOW_where_clause_in_select_expression3530 = new BitSet(new long[]{0x0000000000400002L,0x0000810300000080L,0x0000000021000001L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_select_expression3537 = new BitSet(new long[]{0x0000000000400002L,0x0000810300000000L,0x0000000020000001L});
    public static final BitSet FOLLOW_group_by_clause_in_select_expression3544 = new BitSet(new long[]{0x0000000000400002L,0x0000810200000000L,0x0000000020000001L});
    public static final BitSet FOLLOW_97_in_select_expression3553 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_select_expression3555 = new BitSet(new long[]{0x0000000000400002L,0x0000810000000000L,0x0000000020000001L});
    public static final BitSet FOLLOW_model_clause_in_select_expression3562 = new BitSet(new long[]{0x0000000000000002L,0x0000810000000000L,0x0000000020000001L});
    public static final BitSet FOLLOW_157_in_select_expression3573 = new BitSet(new long[]{0x0004000008000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_50_in_select_expression3577 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_104_in_select_expression3587 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_111_in_select_expression3594 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_expression_in_select_expression3606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_subquery_in_select_expression3614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_order_by_clause_in_select_expression3630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_select_list3644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_displayed_column_in_select_list3649 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_select_list3653 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_displayed_column_in_select_list3655 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_93_in_table_reference_list_from3669 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_table_reference_list_in_table_reference_list_from3671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selected_table_in_table_reference_list3682 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_table_reference_list3686 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_selected_table_in_table_reference_list3688 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_selected_table_in_join_clause3702 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_inner_cross_join_clause_in_join_clause3706 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_outer_join_clause_in_join_clause3710 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause3725 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause3730 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause3732 = new BitSet(new long[]{0x0000000000400000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_inner_cross_join_clause3736 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_inner_cross_join_clause3738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_inner_cross_join_clause3742 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_inner_cross_join_clause3744 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_specs_in_inner_cross_join_clause3746 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_inner_cross_join_clause3748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCROSS_in_inner_cross_join_clause3757 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyNATURAL_in_inner_cross_join_clause3761 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause3765 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause3771 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause3785 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause3794 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause3796 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_keyNATURAL_in_outer_join_clause3802 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause3806 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause3811 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_selected_table_in_outer_join_clause3819 = new BitSet(new long[]{0x0000000000400002L,0x4000000000000000L});
    public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause3823 = new BitSet(new long[]{0x0000000000400002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_outer_join_clause3832 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_outer_join_clause3834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_outer_join_clause3838 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_outer_join_clause3840 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_specs_in_outer_join_clause3842 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_outer_join_clause3844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPARTITION_in_query_partition_clause3857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_query_partition_clause3859 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expression_list_in_query_partition_clause3861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFULL_in_outer_join_type3873 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_keyLEFT_in_outer_join_type3877 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_keyRIGHT_in_outer_join_type3881 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_keyOUTER_in_outer_join_type3887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_outer_join_sign3900 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_PLUS_in_outer_join_sign3902 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_outer_join_sign3904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_where_clause3914 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_where_clause3916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_hierarchical_query_clause3928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_hierarchical_query_clause3930 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause3932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_hierarchical_query_clause3937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_hierarchical_query_clause3939 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_keyNOCYCLE_in_hierarchical_query_clause3943 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause3948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_group_by_clause3958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_group_by_clause3960 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_group_by_exprs_in_group_by_clause3962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs3972 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_group_by_exprs3976 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs3978 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_group_by_expr3991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_group_by_expr3996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_group_by_expr4001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLUP_in_rollup_cube_clause4013 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_keyCUBE_in_rollup_cube_clause4017 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_rollup_cube_clause4021 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_rollup_cube_clause4023 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_rollup_cube_clause4025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyGROUPING_in_grouping_sets_clause4035 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySETS_in_grouping_sets_clause4037 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_grouping_sets_clause4039 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_grouping_sets_clause4041 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_grouping_sets_clause4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4053 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_grouping_sets_exprs4057 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs4059 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_grouping_sets_expr4072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_grouping_sets_expr4076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyMODEL_in_model_clause4086 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000040001000L});
    public static final BitSet FOLLOW_cell_reference_options_in_model_clause4090 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_return_rows_clause_in_model_clause4098 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_reference_model_in_model_clause4107 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_main_model_in_model_clause4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_cell_reference_options4126 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyKEEP_in_cell_reference_options4130 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyNAV_in_cell_reference_options4134 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_cell_reference_options4143 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyDIMENSION_in_cell_reference_options4147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySINGLE_in_cell_reference_options4151 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyREFERENCE_in_cell_reference_options4153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_return_rows_clause4168 = new BitSet(new long[]{0x0004000000400000L});
    public static final BitSet FOLLOW_keyUPDATED_in_return_rows_clause4172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_50_in_return_rows_clause4176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_return_rows_clause4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREFERENCE_in_reference_model4190 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_reference_model_name_in_reference_model4192 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_reference_model4194 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_reference_model4196 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_subquery_in_reference_model4198 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_reference_model4200 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_model_column_clauses_in_reference_model4204 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_reference_model4208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_reference_model_name4220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyMAIN_in_main_model4232 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_main_model_name_in_main_model4234 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_model_column_clauses_in_main_model4239 = new BitSet(new long[]{0x0000000008400000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_main_model4245 = new BitSet(new long[]{0x0000000008400000L});
    public static final BitSet FOLLOW_model_rules_clause_in_main_model4249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_main_model_name4259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_model_column_clauses4271 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_spec_in_model_column_clauses4275 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyDIMENSION_in_model_column_clauses4285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_model_column_clauses4287 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_model_column_clauses4289 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_model_columns_in_model_column_clauses4291 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_model_column_clauses4293 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyMEASURES_in_model_column_clauses4297 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_model_column_clauses4299 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_model_columns_in_model_column_clauses4301 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_model_column_clauses4303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_column_in_model_columns4313 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_model_columns4317 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_model_column_in_model_columns4319 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_sql_expression_in_model_column4332 = new BitSet(new long[]{0x0020000000408002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_53_in_model_column4338 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_spec_in_model_column4343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRULES_in_model_rules_clause4358 = new BitSet(new long[]{0x0000000008400000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_model_rules_clause4362 = new BitSet(new long[]{0x0000000008400000L});
    public static final BitSet FOLLOW_keyUPSERT_in_model_rules_clause4366 = new BitSet(new long[]{0x0004000008400000L});
    public static final BitSet FOLLOW_50_in_model_rules_clause4370 = new BitSet(new long[]{0x0000000008400000L});
    public static final BitSet FOLLOW_keyAUTOMATIC_in_model_rules_clause4382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_keySEQUENTIAL_in_model_rules_clause4386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_model_rules_clause4390 = new BitSet(new long[]{0x0000000008400000L});
    public static final BitSet FOLLOW_keyITERATE_in_model_rules_clause4402 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause4404 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_model_rules_clause4406 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause4408 = new BitSet(new long[]{0x0000000008400000L});
    public static final BitSet FOLLOW_keyUNTIL_in_model_rules_clause4412 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause4414 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_model_rules_clause4416 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause4418 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause4428 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000080010000L});
    public static final BitSet FOLLOW_model_rules_exprs_in_model_rules_clause4430 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause4432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs4442 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_model_rules_exprs4446 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000080010000L});
    public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs4448 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_159_in_model_rules_expr4463 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_keyUPSERT_in_model_rules_expr4467 = new BitSet(new long[]{0x0004000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_50_in_model_rules_expr4471 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_cell_assignment_in_model_rules_expr4479 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_order_by_clause_in_model_rules_expr4483 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_EQ_in_model_rules_expr4488 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_model_rules_expr4490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measure_column_in_cell_assignment4500 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_LBRACK_in_cell_assignment4502 = new BitSet(new long[]{0x0010009428408000L,0x0140000013020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_multi_column_for_loop_in_cell_assignment4506 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_cell_assignment_exprs_in_cell_assignment4510 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_RBRACK_in_cell_assignment4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4524 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_cell_assignment_exprs4528 = new BitSet(new long[]{0x0010009428408000L,0x0140000013020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs4530 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_sql_condition_in_cell_assignment_expr4543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_cell_assignment_expr4547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_column_for_loop_in_cell_assignment_expr4551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_measure_column4561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_single_column_for_loop4571 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_name_in_single_column_for_loop4573 = new BitSet(new long[]{0x0000000000000000L,0x0000080820000000L});
    public static final BitSet FOLLOW_99_in_single_column_for_loop4579 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_single_column_for_loop4581 = new BitSet(new long[]{0x0000009428000000L});
    public static final BitSet FOLLOW_literals_in_single_column_for_loop4585 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_subquery_in_single_column_for_loop4589 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_single_column_for_loop4593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_single_column_for_loop4601 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_pattern_in_single_column_for_loop4603 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_single_column_for_loop4608 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop4610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_single_column_for_loop4612 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop4614 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyINCREMENT_in_single_column_for_loop4618 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_keyDECREMENT_in_single_column_for_loop4622 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop4626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_literal4651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_literal4656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_literals4666 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_literals4670 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_literal_in_literals4672 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LPAREN_in_bracket_literals4685 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_literals_in_bracket_literals4687 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_bracket_literals4689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list4699 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_bracket_literals_list4703 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list4705 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_pattern4718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_multi_column_for_loop4728 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop4730 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_specs_in_multi_column_for_loop4732 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop4734 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_multi_column_for_loop4736 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop4738 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_bracket_literals_list_in_multi_column_for_loop4742 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_subquery_in_multi_column_for_loop4746 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop4750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_order_by_clause4760 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000001L});
    public static final BitSet FOLLOW_keySIBLINGS_in_order_by_clause4764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_order_by_clause4769 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_order_by_exprs_in_order_by_clause4771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs4781 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_order_by_exprs4785 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs4787 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_sql_expression_in_order_by_expr4802 = new BitSet(new long[]{0x0040000000400002L,0x0000000000010000L});
    public static final BitSet FOLLOW_54_in_order_by_expr4825 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_80_in_order_by_expr4829 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_keyNULLS_in_order_by_expr4836 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyFIRST_in_order_by_expr4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_order_by_expr4842 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyLAST_in_order_by_expr4844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_for_update_clause4857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_for_update_clause4859 = new BitSet(new long[]{0x0000000000400002L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_for_update_clause4863 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_specs_in_for_update_clause4865 = new BitSet(new long[]{0x0000000000400002L,0x0080000000000000L});
    public static final BitSet FOLLOW_keyWAIT_in_for_update_clause4872 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_integer_in_for_update_clause4874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_for_update_clause4878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_where_condition_whole4892 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_where_condition_whole4894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_condition_in_where_condition4905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_displayed_column4918 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_DOT_in_displayed_column4920 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_displayed_column4922 = new BitSet(new long[]{0x0020000000408002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_sql_expression_in_displayed_column4930 = new BitSet(new long[]{0x0020000000408002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_alias_in_displayed_column4940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_schema_name4954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_table_name4965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_nested_expressions4976 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_nested_expressions4980 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_nested_expressions4982 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_sql_expression_in_nested_expression4998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_nested_expression5005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_bool_in_plsql_condition5022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions5033 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_plsql_expressions5037 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions5039 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_expr_bool_in_plsql_expression5060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_bool5072 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_expr_bool5076 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_or_in_expr_bool5078 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_or5091 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_expr_or5095 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_and_in_expr_or5097 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_118_in_expr_and5112 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_not_in_expr_and5117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_in_expr_not5127 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_relational_op_in_expr_not5134 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_add_in_expr_not5136 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_expr_not5142 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_expr_not5146 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_expr_not5150 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_expr_not5154 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not5158 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_106_in_expr_not5164 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L});
    public static final BitSet FOLLOW_118_in_expr_not5168 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_expr_not5173 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_118_in_expr_not5181 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_expr_not5186 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_add_in_expr_not5188 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_118_in_expr_not5196 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_57_in_expr_not5201 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_add_in_expr_not5203 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_expr_not5205 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_add_in_expr_not5207 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_118_in_expr_not5215 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_expr_not5220 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_expr_not5222 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expressions_in_expr_not5224 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expr_not5226 = new BitSet(new long[]{0x0200040312BA0102L,0x00400C0800000000L});
    public static final BitSet FOLLOW_sql_expression_in_sql_expressions5257 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_sql_expressions5261 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_sql_expressions5263 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_expr_add_in_sql_expression5283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mul_in_expr_add5293 = new BitSet(new long[]{0x0000001020010002L});
    public static final BitSet FOLLOW_set_in_expr_add5297 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_mul_in_expr_add5311 = new BitSet(new long[]{0x0000001020010002L});
    public static final BitSet FOLLOW_expr_sign_in_expr_mul5324 = new BitSet(new long[]{0x0000000000001042L});
    public static final BitSet FOLLOW_set_in_expr_mul5328 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_sign_in_expr_mul5338 = new BitSet(new long[]{0x0000000000001042L});
    public static final BitSet FOLLOW_expr_pow_in_expr_sign5362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_expr_in_expr_pow5372 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_EXPONENT_in_expr_pow5376 = new BitSet(new long[]{0x0000008408408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_expr_in_expr_pow5378 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_expr_paren_in_expr_expr5399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_expr_expr5412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expression_in_expr_expr5426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_expression_in_expr_expr5439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_expr_expr5452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_expr_expr5465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_literal_in_simple_expression5484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_simple_expression5489 = new BitSet(new long[]{0x0000040100880100L});
    public static final BitSet FOLLOW_set_in_simple_expression5491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_simple_expression5524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_simple_expression5529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_simple_expression5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_simple_expression5542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_prior_in_compound_expression5554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_expr_paren5566 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_expr_paren5568 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expr_paren5570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_expr_prior5580 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_add_in_expr_prior5582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_case_expression5592 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000001010890000L});
    public static final BitSet FOLLOW_simple_case_expression_in_case_expression5596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_searched_case_expression_in_case_expression5600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_else_case_expression_in_case_expression5606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_case_expression5611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression5621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_simple_case_expression5625 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression5627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_simple_case_expression5629 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression5631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_searched_case_expression5646 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_nested_condition_in_searched_case_expression5648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_searched_case_expression5650 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_searched_case_expression5652 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_83_in_else_case_expression5665 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_else_case_expression5667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_case_statement5679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_case_statement5684 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000001010890000L});
    public static final BitSet FOLLOW_simple_case_statement_in_case_statement5689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_searched_case_statement_in_case_statement5693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_else_case_statement_in_case_statement5699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_case_statement5704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_case_statement5706 = new BitSet(new long[]{0x0000000000408002L});
    public static final BitSet FOLLOW_label_name_in_case_statement5710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement5723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_simple_case_statement5727 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement5729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_simple_case_statement5731 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_simple_case_statement5733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_searched_case_statement5748 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expression_in_searched_case_statement5750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_searched_case_statement5752 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_searched_case_statement5754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_83_in_else_case_statement5767 = new BitSet(new long[]{0x0100000004408400L,0x01005024D400A242L,0x00000040801D51A0L});
    public static final BitSet FOLLOW_seq_of_statements_in_else_case_statement5769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_expression5779 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_expression5781 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_subquery_in_cursor_expression5783 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_expression5785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_datetime_expression5795 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_55_in_datetime_expression5797 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyLOCAL_in_datetime_expression5803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_datetime_expression5809 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyZONE_in_datetime_expression5811 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_keyDBTIMEZONE_in_datetime_expression5815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySESSIONTIMEZONE_in_datetime_expression5819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_datetime_expression5823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_function_expression5839 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOT_in_function_expression5843 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression5845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_function_expression5859 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression5861 = new BitSet(new long[]{0x0000009428408040L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_ASTERISK_in_function_expression5865 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression5869 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression5873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_function_expression5879 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression5883 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression5885 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression5887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression5891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_special_expression5913 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_special_expression5915 = new BitSet(new long[]{0x0000009428408040L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_ASTERISK_in_special_expression5919 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nested_expression_in_special_expression5923 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_special_expression5927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_special_expression5933 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_special_expression5935 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_special_expression5937 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_special_expression5939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_interval_expression5953 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyDAY_in_interval_expression5959 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_interval_expression5963 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_leading_field_precision_in_interval_expression5965 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_interval_expression5967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_interval_expression5972 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySECOND_in_interval_expression5974 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_interval_expression5978 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_fractional_second_precision_in_interval_expression5980 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_interval_expression5982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyYEAR_in_interval_expression5991 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_interval_expression5995 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_leading_field_precision_in_interval_expression5997 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_interval_expression5999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_interval_expression6004 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyMONTH_in_interval_expression6006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_leading_field_precision6020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_fractional_second_precision6031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_sequence_name6082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_integer6092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_alias6106 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_sql_identifier_in_alias6111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_column_specs6122 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_column_specs6126 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_spec_in_column_specs6128 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec6142 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOT_in_column_spec6146 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec6148 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOT_in_column_spec6152 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec6154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_column_name6176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_nested_table6186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_nested_table_column_name6198 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name6200 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_table_name_in_nested_table_column_name6205 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name6207 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_nested_table_in_nested_table_column_name6209 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name6211 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_name_in_nested_table_column_name6213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_user_defined_function6224 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOT_in_user_defined_function6228 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_sql_identifier_in_user_defined_function6230 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOT_in_user_defined_function6237 = new BitSet(new long[]{0x0000000000000000L,0x0000000001008000L,0x0000000000000040L});
    public static final BitSet FOLLOW_set_in_user_defined_function6239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_selected_table6277 = new BitSet(new long[]{0x0020000000408002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_153_in_selected_table6283 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_keyTHE_in_selected_table6287 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_subquery_in_selected_table6292 = new BitSet(new long[]{0x0020000000408002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_alias_in_selected_table6298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_table_spec6314 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_DOT_in_table_spec6316 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_table_name_in_table_spec6321 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_AT_SIGN_in_table_spec6325 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_link_name_in_table_spec6327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_table_alias6343 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_DOT_in_table_alias6345 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_table_name_in_table_alias6350 = new BitSet(new long[]{0x0020000000408082L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_AT_SIGN_in_table_alias6354 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_link_name_in_table_alias6356 = new BitSet(new long[]{0x0020000000408002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_alias_in_table_alias6363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_link_name6377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_nested_condition6389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_bool_in_nested_condition6396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_sql_condition6413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_paren6424 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_condition_paren6426 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_paren6428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_and_in_condition_or6438 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_condition_or6442 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_condition_and_in_condition_or6444 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_condition_not_in_condition_and6457 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_condition_and6461 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_condition_not_in_condition_and6463 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_118_in_condition_not6476 = new BitSet(new long[]{0x0010009428408000L,0x0100000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_condition_expr_in_condition_not6478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_expr_in_condition_not6483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_exists_in_condition_expr6493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_in_condition_expr6498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_comparison_in_condition_expr6503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_group_comparison_in_condition_expr6508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_in_in_condition_expr6513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_a_set_in_condition_expr6518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_any_in_condition_expr6523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_empty_in_condition_expr6528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_in_condition_expr6533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_present_in_condition_expr6538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_like_in_condition_expr6543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_memeber_in_condition_expr6548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_between_in_condition_expr6553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_regexp_like_in_condition_expr6558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_submultiset_in_condition_expr6563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_equals_path_in_condition_expr6568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_under_path_in_condition_expr6573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_paren_in_condition_expr6578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_condition_exists6588 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_exists6590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_command_in_condition_exists6592 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_exists6594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_is6604 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_condition_is6606 = new BitSet(new long[]{0x0000000000400000L,0x0140000000000000L});
    public static final BitSet FOLLOW_118_in_condition_is6610 = new BitSet(new long[]{0x0000000000400000L,0x0100000000000000L});
    public static final BitSet FOLLOW_keyNAN_in_condition_is6617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINFINITE_in_condition_is6621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_condition_is6625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison6637 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_comparison6639 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison6641 = new BitSet(new long[]{0x0000000208020000L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison6645 = new BitSet(new long[]{0x0000000200020000L});
    public static final BitSet FOLLOW_set_in_condition_comparison6650 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison6660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_command_in_condition_comparison6662 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison6664 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison6668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_condition_comparison6678 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_comparison6683 = new BitSet(new long[]{0x000000021A320000L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison6687 = new BitSet(new long[]{0x0000000212320000L});
    public static final BitSet FOLLOW_set_in_condition_comparison6692 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_134_in_condition_comparison6720 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_comparison6727 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison6731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_command_in_condition_comparison6733 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison6735 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison6741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison6754 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison6756 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison6758 = new BitSet(new long[]{0x0000000200020000L});
    public static final BitSet FOLLOW_set_in_condition_group_comparison6760 = new BitSet(new long[]{0x0014000000400000L});
    public static final BitSet FOLLOW_52_in_condition_group_comparison6772 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_keySOME_in_condition_group_comparison6776 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_50_in_condition_group_comparison6780 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison6784 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_condition_group_comparison6788 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_group_comparison6792 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison6796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_group_comparison6801 = new BitSet(new long[]{0x0000000212320000L});
    public static final BitSet FOLLOW_set_in_condition_group_comparison6803 = new BitSet(new long[]{0x0014000000400000L});
    public static final BitSet FOLLOW_52_in_condition_group_comparison6831 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_keySOME_in_condition_group_comparison6835 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_50_in_condition_group_comparison6839 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison6843 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison6847 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_group_comparison6851 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison6855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in6865 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_in6867 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in6869 = new BitSet(new long[]{0x0000000000000000L,0x0040000800000000L});
    public static final BitSet FOLLOW_118_in_condition_in6873 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_condition_in6878 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in6880 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_condition_in6884 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_in6888 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in6892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_in6897 = new BitSet(new long[]{0x0000000000000000L,0x0040000800000000L});
    public static final BitSet FOLLOW_118_in_condition_in6901 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_condition_in6906 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in6908 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expression_list_in_condition_in6912 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_in6916 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in6920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_a_set6930 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_condition_is_a_set6932 = new BitSet(new long[]{0x0000000000400000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_condition_is_a_set6936 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyA_in_condition_is_a_set6941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_148_in_condition_is_a_set6943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_condition_is_any6955 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_condition_is_any6957 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_52_in_condition_is_any6962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_empty6972 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_condition_is_empty6974 = new BitSet(new long[]{0x0000000000400000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_condition_is_empty6978 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyEMPTY_in_condition_is_empty6983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_is_of_type6993 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_condition_is_of_type6995 = new BitSet(new long[]{0x0000000000000000L,0x2040000000000000L});
    public static final BitSet FOLLOW_118_in_condition_is_of_type6999 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_condition_is_of_type7004 = new BitSet(new long[]{0x0000000008400000L});
    public static final BitSet FOLLOW_keyTYPE_in_condition_is_of_type7008 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_is_of_type7013 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_type_name_in_condition_is_of_type7015 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_is_of_type7017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7027 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_condition_is_of_type_names7031 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names7033 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_keyONLY_in_condition_is_of_type_name7048 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_type_name_in_condition_is_of_type_name7053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_reference_in_condition_is_present7063 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_condition_is_present7065 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyPRESENT_in_condition_is_present7067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like7077 = new BitSet(new long[]{0x0000000000400000L,0x0040080000000000L});
    public static final BitSet FOLLOW_118_in_condition_like7081 = new BitSet(new long[]{0x0000000000400000L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_condition_like7088 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_keyLIKEC_in_condition_like7092 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_keyLIKE2_in_condition_like7096 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_keyLIKE4_in_condition_like7100 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like7104 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_keyESCAPE_in_condition_like7108 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_memeber7123 = new BitSet(new long[]{0x0000000000400000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_condition_memeber7127 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyMEMBER_in_condition_memeber7132 = new BitSet(new long[]{0x0000000000408000L,0x2000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_125_in_condition_memeber7136 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_memeber7141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between7151 = new BitSet(new long[]{0x0200000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_condition_between7155 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_57_in_condition_between7160 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between7162 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_condition_between7164 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between7166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like7176 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_regexp_like7178 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_call_parameters_in_condition_regexp_like7180 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_regexp_like7182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset7192 = new BitSet(new long[]{0x0000000000400000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_condition_submultiset7196 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySUBMULTISET_in_condition_submultiset7201 = new BitSet(new long[]{0x0000000000408000L,0x2000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_125_in_condition_submultiset7205 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset7210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEQUALS_PATH_in_condition_equals_path7220 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_equals_path7222 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_name_in_condition_equals_path7224 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_condition_equals_path7226 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_path_string_in_condition_equals_path7228 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_COMMA_in_condition_equals_path7232 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_correlation_integer_in_condition_equals_path7234 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_equals_path7239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUNDER_PATH_in_condition_under_path7249 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_under_path7251 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_name_in_condition_under_path7253 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path7257 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_levels_in_condition_under_path7259 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path7264 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_path_string_in_condition_under_path7266 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path7270 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_correlation_integer_in_condition_under_path7272 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_under_path7277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_levels7287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_correlation_integer7297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_path_string7307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_grouping_expression_list7317 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_grouping_expression_list7321 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expression_list_in_grouping_expression_list7323 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LPAREN_in_expression_list7336 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expressions_in_expression_list7338 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expression_list7340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expressions_in_expression_list7345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_cell_reference7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_parameter_in_call_parameters7365 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_call_parameters7369 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_call_parameter_in_call_parameters7371 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_parameter_name_in_call_parameter7386 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ARROW_in_call_parameter7388 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_call_parameter7393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_exp_set7443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_exp_set7448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subquery7459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_command_in_subquery7461 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subquery7463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_connect_clause7476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_connect_clause7478 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause7480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_connect_clause7487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_connect_clause7489 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_134_in_connect_clause7496 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause7498 = new BitSet(new long[]{0x0000000212320000L});
    public static final BitSet FOLLOW_relational_op_in_connect_clause7500 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause7502 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause7508 = new BitSet(new long[]{0x0000000212320000L});
    public static final BitSet FOLLOW_relational_op_in_connect_clause7510 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause7512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_connect_clause7514 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_134_in_connect_clause7540 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause7544 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause7550 = new BitSet(new long[]{0x0000000212320000L});
    public static final BitSet FOLLOW_relational_op_in_connect_clause7552 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_134_in_connect_clause7556 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause7561 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_51_in_connect_clause7565 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause7567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_152_in_connect_clause7580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_connect_clause7582 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause7584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_group_clause7598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_group_clause7600 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_group_clause7602 = new BitSet(new long[]{0x0000000000000802L,0x0000000200000000L});
    public static final BitSet FOLLOW_COMMA_in_group_clause7606 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_group_clause7608 = new BitSet(new long[]{0x0000000000000802L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_group_clause7615 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_group_clause7617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_set_clause7635 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_50_in_set_clause7637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_104_in_set_clause7643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_111_in_set_clause7647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_command_in_set_clause7651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_order_clause7663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_order_clause7665 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sorted_def_in_order_clause7667 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_order_clause7671 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sorted_def_in_order_clause7673 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_sql_expression_in_sorted_def7697 = new BitSet(new long[]{0x0040000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_NUMBER_in_sorted_def7709 = new BitSet(new long[]{0x0040000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_92_in_update_clause7733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_update_clause7735 = new BitSet(new long[]{0x0000000000000002L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_update_clause7739 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_name_in_update_clause7741 = new BitSet(new long[]{0x0000000000000802L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_update_clause7745 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_name_in_update_clause7747 = new BitSet(new long[]{0x0000000000000802L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_update_clause7757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_insert_command7771 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_105_in_insert_command7773 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_table_reference_list_in_insert_command7775 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000200080000L});
    public static final BitSet FOLLOW_LPAREN_in_insert_command7781 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_specs_in_insert_command7783 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insert_command7785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200080000L});
    public static final BitSet FOLLOW_161_in_insert_command7794 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_insert_command7796 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expressions_in_insert_command7798 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insert_command7800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_select_statement_in_insert_command7806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_returning_clause_in_insert_command7816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_update_command7830 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_selected_table_in_update_command7832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_148_in_update_command7836 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_update_nested_column_specs_in_update_command7843 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000003000L});
    public static final BitSet FOLLOW_update_column_specs_in_update_command7849 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000003000L});
    public static final BitSet FOLLOW_165_in_update_command7859 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_keyCURRENT_OF_in_update_command7866 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_cursor_name_in_update_command7868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_sql_condition_in_update_command7875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_returning_clause_in_update_command7891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_column_spec_in_update_column_specs7905 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_update_column_specs7909 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_update_column_spec_in_update_column_specs7911 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_column_spec_in_update_column_spec7925 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_EQ_in_update_column_spec7927 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_update_column_spec7929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs7940 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_update_nested_column_specs7944 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs7946 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LPAREN_in_update_nested_column_spec7960 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_specs_in_update_nested_column_spec7962 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_update_nested_column_spec7964 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_EQ_in_update_nested_column_spec7966 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_subquery_in_update_nested_column_spec7968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_delete_command7979 = new BitSet(new long[]{0x0000000008408000L,0x0000000020000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_93_in_delete_command7983 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_selected_table_in_delete_command7988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000003000L});
    public static final BitSet FOLLOW_165_in_delete_command7994 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_keyCURRENT_OF_in_delete_command8001 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_cursor_name_in_delete_command8003 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_sql_condition_in_delete_command8010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_returning_clause_in_delete_command8026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_returning_clause8042 = new BitSet(new long[]{0x0000009428408040L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_keyRETURNING_in_returning_clause8046 = new BitSet(new long[]{0x0000009428408040L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_select_list_in_returning_clause8050 = new BitSet(new long[]{0x0000000000400000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyBULK_in_returning_clause8054 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyCOLLECT_in_returning_clause8056 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_105_in_returning_clause8061 = new BitSet(new long[]{0x0000000000408400L});
    public static final BitSet FOLLOW_lvalues_in_returning_clause8063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_set_transaction_command8074 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyTRANSACTION_in_set_transaction_command8076 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyREAD_in_set_transaction_command8078 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyONLY_in_set_transaction_command8080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCLOSE_in_close_statement8091 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_cursor_name_in_close_statement8093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_fetch_statement8104 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_cursor_name_in_fetch_statement8106 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_105_in_fetch_statement8108 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_variable_names_in_fetch_statement8115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_fetch_statement8121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_lock_table_statement8136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_lock_table_statement8138 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_table_reference_list_in_lock_table_statement8140 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_lock_table_statement8144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L,0x0000000000208000L});
    public static final BitSet FOLLOW_lock_mode_in_lock_table_statement8146 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_lock_table_statement8148 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_lock_table_statement8152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_lock_mode8166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_149_in_lock_mode8168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_lock_mode8173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_lock_mode8175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_lock_mode8180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_lock_mode8182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_lock_mode8187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_lock_mode8192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_lock_mode8194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_lock_mode8196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_lock_mode8201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyOPEN_in_open_statement8212 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_cursor_name_in_open_statement8214 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_open_statement8218 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_plsql_expressions_in_open_statement8220 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_open_statement8222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLBACK_in_rollback_statement8236 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000020L,0x0000000008000000L});
    public static final BitSet FOLLOW_keyWORK_in_rollback_statement8240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_rollback_statement8249 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_rollback_statement8253 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_savepoint_name_in_rollback_statement8258 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_rollback_statement8267 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_quoted_string_in_rollback_statement8269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_savepoint_statement8283 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement8285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_savepoint_name8296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_quoted_string8328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_match_string8339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyA8378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyAUTOMATIC8407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCOUNT8440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCROSS8473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCUBE8507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCURRENT_OF8535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDAY8570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDBTIMEZONE8598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDECREMENT8627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDIMENSION8656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEMPTY8689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEQUALS_PATH8716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyESCAPE8748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyFIRST8781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyFULL8815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyGROUPING8845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyIGNORE8877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINCREMENT8906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINFINITE8936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINNER8969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINTERVAL8999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyITERATE9030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyJOIN9064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyKEEP9098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLAST9132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLEFT9166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLIKE29199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLIKE49232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLIKEC9265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLOCAL9298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMAIN9332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMEASURES9362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMEMBER9394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMODEL9427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMONTH9460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNAN9495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNATURAL9526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNAV9561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNOCYCLE9592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNULLS9625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyONLY9659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyOUTER9692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPARTITION9721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPRECISION9750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPRESENT9781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREFERENCE9810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREGEXP_LIKE9837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRIGHT9871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyROLLUP9903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRULES9936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySECOND9968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySECONDS9999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySEQUENTIAL10027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySESSIONTIMEZONE10050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySETS10084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySIBLINGS10114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySINGLE10146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySOME10180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySUBMULTISET10207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTIME10241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTIMESTAMP10270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTHE10305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUNDER_PATH10333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUNTIL10366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUPDATED10397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUPSERT10429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyWAIT10463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyYEAR10497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyZONE10531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyARRAY10565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION10581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBODY10615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBUILTIN10646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBULK10680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBYTE10714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCLOSE10747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCOLLECT10778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCURSOR10810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_keyELSIF10841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEXCEPTION_INIT10866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEXIT10900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyFIPSFLAG10930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_keyFUNCTION10958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINTERFACE10988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_keyLOOP11020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNEW11056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNEW_NAMES11085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyOPEN11119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_keyOUT11152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_keyPACKAGE11182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_keyPRAGMA11213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_keyRAISE11245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRANGE11279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREAD11313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_keyRECORD11343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREF11379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREPLACE11410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRESTRICT_REFERENCES11429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_keyRETURN11459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_keyRETURNING11487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREVERSE11519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_keyROLLBACK11547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySERIALLY_REUSABLE11569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySUBTYPE11600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTRANSACTION11627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTYPE11661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUSING11694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyVARRAY11726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyVARYING11756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_keyWHILE11787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyWORK11822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_sql_identifier11831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_sql_identifier11836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred13_PLSQL3234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred14_PLSQL3239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNEW_in_synpred27_PLSQL3361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_statement_in_synpred43_PLSQL3562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_synpred44_PLSQL3567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_synpred46_PLSQL3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_synpred48_PLSQL3588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_synpred52_PLSQL3609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_block_in_synpred53_PLSQL3614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred62_PLSQL3723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred70_PLSQL3769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRESTRICT_REFERENCES_in_synpred73_PLSQL3793 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred73_PLSQL3795 = new BitSet(new long[]{0x0000008000408000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_synpred73_PLSQL3799 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_function_name_in_synpred73_PLSQL3803 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred73_PLSQL3809 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_param_in_synpred73_PLSQL3811 = new BitSet(new long[]{0x0000100000000800L});
    public static final BitSet FOLLOW_RPAREN_in_synpred73_PLSQL3816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEXCEPTION_INIT_in_synpred74_PLSQL3823 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred74_PLSQL3825 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_exception_name_in_synpred74_PLSQL3827 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred74_PLSQL3829 = new BitSet(new long[]{0x0000009420000000L});
    public static final BitSet FOLLOW_literal_in_synpred74_PLSQL3831 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred74_PLSQL3833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred75_PLSQL3839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySERIALLY_REUSABLE_in_synpred76_PLSQL3845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyBUILTIN_in_synpred77_PLSQL3851 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred77_PLSQL3853 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_params_in_synpred77_PLSQL3855 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred77_PLSQL3857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFIPSFLAG_in_synpred78_PLSQL3863 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred78_PLSQL3865 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_params_in_synpred78_PLSQL3867 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred78_PLSQL3869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERFACE_in_synpred79_PLSQL3875 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred79_PLSQL3877 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_params_in_synpred79_PLSQL3879 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred79_PLSQL3881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNEW_NAMES_in_synpred80_PLSQL3887 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred80_PLSQL3889 = new BitSet(new long[]{0x0000009420408000L});
    public static final BitSet FOLLOW_pragma_params_in_synpred80_PLSQL3891 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred80_PLSQL3893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_synpred114_PLSQL31280 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyDAY_in_synpred114_PLSQL31282 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred114_PLSQL31286 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred114_PLSQL31288 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred114_PLSQL31290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_synpred114_PLSQL31295 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySECOND_in_synpred114_PLSQL31297 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred114_PLSQL31301 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred114_PLSQL31303 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred114_PLSQL31305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_synpred116_PLSQL31313 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyYEAR_in_synpred116_PLSQL31315 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred116_PLSQL31319 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred116_PLSQL31321 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred116_PLSQL31323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_synpred116_PLSQL31328 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyMONTH_in_synpred116_PLSQL31330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_synpred117_PLSQL31337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datatype_in_synpred172_PLSQL31806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred232_PLSQL32921 = new BitSet(new long[]{0x0000109428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_call_parameters_in_synpred232_PLSQL32925 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred232_PLSQL32930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_loop_param_in_synpred238_PLSQL33077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_loop_param_in_synpred239_PLSQL33093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREVERSE_in_synpred242_PLSQL33157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_synpred252_PLSQL33391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_synpred256_PLSQL33411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_synpred263_PLSQL33510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred264_PLSQL33514 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_join_clause_in_synpred264_PLSQL33516 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred264_PLSQL33518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_synpred265_PLSQL33530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_synpred266_PLSQL33537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_by_clause_in_synpred267_PLSQL33544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_synpred268_PLSQL33553 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_synpred268_PLSQL33555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_clause_in_synpred269_PLSQL33562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_synpred274_PLSQL33573 = new BitSet(new long[]{0x0004000008000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_50_in_synpred274_PLSQL33577 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_104_in_synpred274_PLSQL33587 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_111_in_synpred274_PLSQL33594 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_expression_in_synpred274_PLSQL33606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_synpred274_PLSQL33614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_by_clause_in_synpred275_PLSQL33630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred278_PLSQL33686 = new BitSet(new long[]{0x0000000008408000L,0x0000000000000000L,0x0000000002010000L});
    public static final BitSet FOLLOW_selected_table_in_synpred278_PLSQL33688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inner_cross_join_clause_in_synpred279_PLSQL33706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_clause_in_synpred280_PLSQL33710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINNER_in_synpred283_PLSQL33725 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyJOIN_in_synpred283_PLSQL33730 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_table_name_in_synpred283_PLSQL33732 = new BitSet(new long[]{0x0000000000400000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_synpred283_PLSQL33736 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_synpred283_PLSQL33738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_synpred283_PLSQL33742 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred283_PLSQL33744 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_specs_in_synpred283_PLSQL33746 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred283_PLSQL33748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCROSS_in_synpred284_PLSQL33757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_type_in_synpred286_PLSQL33794 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyJOIN_in_synpred286_PLSQL33796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_type_in_synpred287_PLSQL33806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred288_PLSQL33823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred289_PLSQL33832 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_synpred289_PLSQL33834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_synpred290_PLSQL33838 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred290_PLSQL33840 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_specs_in_synpred290_PLSQL33842 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred290_PLSQL33844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFULL_in_synpred291_PLSQL33873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLEFT_in_synpred292_PLSQL33877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyOUTER_in_synpred293_PLSQL33887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNOCYCLE_in_synpred295_PLSQL33943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred296_PLSQL33976 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_group_by_expr_in_synpred296_PLSQL33978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_synpred297_PLSQL33991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_synpred298_PLSQL33996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLUP_in_synpred299_PLSQL34013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_synpred301_PLSQL34072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_synpred304_PLSQL34126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_synpred305_PLSQL34126 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyKEEP_in_synpred305_PLSQL34130 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyNAV_in_synpred305_PLSQL34134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyDIMENSION_in_synpred306_PLSQL34147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred311_PLSQL34271 = new BitSet(new long[]{0x0000000000408002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_column_spec_in_synpred311_PLSQL34275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyAUTOMATIC_in_synpred318_PLSQL34382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_condition_in_synpred330_PLSQL34543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred331_PLSQL34547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINCREMENT_in_synpred335_PLSQL34618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred343_PLSQL34785 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_order_by_expr_in_synpred343_PLSQL34787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_synpred346_PLSQL34829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_synpred347_PLSQL34836 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyFIRST_in_synpred347_PLSQL34838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_synpred348_PLSQL34842 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyLAST_in_synpred348_PLSQL34844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred355_PLSQL34998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred357_PLSQL35076 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_or_in_synpred357_PLSQL35078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred358_PLSQL35095 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_and_in_synpred358_PLSQL35097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relational_op_in_synpred360_PLSQL35134 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_add_in_synpred360_PLSQL35136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_synpred361_PLSQL35142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_synpred362_PLSQL35146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_synpred363_PLSQL35150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_synpred364_PLSQL35154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred365_PLSQL35158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_synpred367_PLSQL35164 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L});
    public static final BitSet FOLLOW_118_in_synpred367_PLSQL35168 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_synpred367_PLSQL35173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred369_PLSQL35181 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_synpred369_PLSQL35186 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_add_in_synpred369_PLSQL35188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred371_PLSQL35196 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_57_in_synpred371_PLSQL35201 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_add_in_synpred371_PLSQL35203 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred371_PLSQL35205 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_add_in_synpred371_PLSQL35207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred373_PLSQL35215 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_synpred373_PLSQL35220 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred373_PLSQL35222 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expressions_in_synpred373_PLSQL35224 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred373_PLSQL35226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred375_PLSQL35261 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_synpred375_PLSQL35263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred378_PLSQL35297 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_mul_in_synpred378_PLSQL35311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred380_PLSQL35328 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_sign_in_synpred380_PLSQL35338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPONENT_in_synpred383_PLSQL35376 = new BitSet(new long[]{0x0000008408408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expr_expr_in_synpred383_PLSQL35378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_paren_in_synpred384_PLSQL35393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_synpred385_PLSQL35406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expression_in_synpred386_PLSQL35420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_expression_in_synpred387_PLSQL35433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_synpred388_PLSQL35446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_synpred389_PLSQL35459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_synpred396_PLSQL35518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyDBTIMEZONE_in_synpred410_PLSQL35815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySESSIONTIMEZONE_in_synpred411_PLSQL35819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_synpred413_PLSQL35839 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOT_in_synpred413_PLSQL35843 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_synpred413_PLSQL35845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred416_PLSQL35883 = new BitSet(new long[]{0x0000009428408000L,0x0140000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_nested_expression_in_synpred416_PLSQL35885 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred416_PLSQL35887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyDAY_in_synpred421_PLSQL35959 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred421_PLSQL35963 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_leading_field_precision_in_synpred421_PLSQL35965 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred421_PLSQL35967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_synpred421_PLSQL35972 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySECOND_in_synpred421_PLSQL35974 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred421_PLSQL35978 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_fractional_second_precision_in_synpred421_PLSQL35980 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred421_PLSQL35982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred428_PLSQL36228 = new BitSet(new long[]{0x0000000000408000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_sql_identifier_in_synpred428_PLSQL36230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_synpred432_PLSQL36277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_synpred435_PLSQL36298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_synpred441_PLSQL36389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred442_PLSQL36442 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_condition_and_in_synpred442_PLSQL36444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred443_PLSQL36461 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_condition_not_in_synpred443_PLSQL36463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_in_synpred446_PLSQL36498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_comparison_in_synpred447_PLSQL36503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_group_comparison_in_synpred448_PLSQL36508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_in_in_synpred449_PLSQL36513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_a_set_in_synpred450_PLSQL36518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_any_in_synpred451_PLSQL36523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_empty_in_synpred452_PLSQL36528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_in_synpred453_PLSQL36533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_present_in_synpred454_PLSQL36538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_like_in_synpred455_PLSQL36543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_memeber_in_synpred456_PLSQL36548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_between_in_synpred457_PLSQL36553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_regexp_like_in_synpred458_PLSQL36558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_submultiset_in_synpred459_PLSQL36563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_equals_path_in_synpred460_PLSQL36568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_under_path_in_synpred461_PLSQL36573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNAN_in_synpred463_PLSQL36617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINFINITE_in_synpred464_PLSQL36621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred467_PLSQL36668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred468_PLSQL36637 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred468_PLSQL36639 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred468_PLSQL36641 = new BitSet(new long[]{0x0000000208020000L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred468_PLSQL36645 = new BitSet(new long[]{0x0000000200020000L});
    public static final BitSet FOLLOW_set_in_synpred468_PLSQL36650 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred468_PLSQL36660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_select_command_in_synpred468_PLSQL36662 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred468_PLSQL36664 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred468_PLSQL36668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred477_PLSQL36727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred478_PLSQL36741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred482_PLSQL36788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred483_PLSQL36754 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred483_PLSQL36756 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred483_PLSQL36758 = new BitSet(new long[]{0x0000000200020000L});
    public static final BitSet FOLLOW_set_in_synpred483_PLSQL36760 = new BitSet(new long[]{0x0014000000400000L});
    public static final BitSet FOLLOW_52_in_synpred483_PLSQL36772 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_keySOME_in_synpred483_PLSQL36776 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_50_in_synpred483_PLSQL36780 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred483_PLSQL36784 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred483_PLSQL36788 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_select_command_in_synpred483_PLSQL36792 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred483_PLSQL36796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred491_PLSQL36847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred493_PLSQL36884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred494_PLSQL36865 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred494_PLSQL36867 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred494_PLSQL36869 = new BitSet(new long[]{0x0000000000000000L,0x0040000800000000L});
    public static final BitSet FOLLOW_118_in_synpred494_PLSQL36873 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_synpred494_PLSQL36878 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred494_PLSQL36880 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred494_PLSQL36884 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_select_command_in_synpred494_PLSQL36888 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred494_PLSQL36892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_synpred496_PLSQL36912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLIKEC_in_synpred506_PLSQL37092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLIKE2_in_synpred507_PLSQL37096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyESCAPE_in_synpred508_PLSQL37108 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expression_in_synpred508_PLSQL37110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred517_PLSQL37321 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_expression_list_in_synpred517_PLSQL37323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred518_PLSQL37336 = new BitSet(new long[]{0x0000009428408000L,0x0100000002020002L,0x0000000010890000L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred518_PLSQL37338 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred518_PLSQL37340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred526_PLSQL37437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_synpred529_PLSQL37528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_synpred530_PLSQL37528 = new BitSet(new long[]{0x0010009428408000L,0x0140000003020002L,0x0000000010890040L});
    public static final BitSet FOLLOW_sql_condition_in_synpred530_PLSQL37533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_synpred531_PLSQL37540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred540_PLSQL37691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_synpred541_PLSQL37703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_names_in_synpred562_PLSQL38115 = new BitSet(new long[]{0x0000000000000002L});

}